Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> main
Rule 1     main -> PROGRAM variables_opt main_func block
Rule 2     variables_opt -> empty
Rule 3     variables_opt -> variables
Rule 4     main_func -> empty
Rule 5     main_func -> function main_func
Rule 6     block -> { block_stm_opt }
Rule 7     block_stm_opt -> empty
Rule 8     block_stm_opt -> statement block_stm_opt
Rule 9     statement -> assignation
Rule 10    statement -> condition
Rule 11    statement -> iteration
Rule 12    statement -> function_call
Rule 13    variables -> VARIABLE : var_body
Rule 14    var_body -> var_opts var_id ; var_body_rec
Rule 15    var_body_rec -> empty
Rule 16    var_body_rec -> var_body
Rule 17    var_opts -> base_type
Rule 18    var_opts -> ARRAY FROM base_type FROM id_or_number
Rule 19    var_id -> ID var_id_rec
Rule 20    var_id_rec -> empty
Rule 21    var_id_rec -> , var_id
Rule 22    assignation -> ID = expression
Rule 23    condition -> cond_if cond_else_if_opt cond_else_opt
Rule 24    cond_if -> IF HAPPENS ( expression ) DO block
Rule 25    cond_else_if_opt -> empty
Rule 26    cond_else_if_opt -> cond_else_if cond_else_if_opt
Rule 27    cond_else_if -> OR IF HAPPENS ( expression ) DO block
Rule 28    cond_else_opt -> empty
Rule 29    cond_else_opt -> ELSE HAPPENS block
Rule 30    iteration -> iteration_opts ) DO block
Rule 31    iteration_opts -> WHILE HAPPENS ( expression
Rule 32    iteration_opts -> FOR ( id_or_number
Rule 33    function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return }
Rule 34    function_declaration -> function_type FUNCTION ID
Rule 35    function_variables_opt -> empty
Rule 36    function_variables_opt -> variables
Rule 37    function_type -> empty
Rule 38    function_type -> type
Rule 39    function_params -> empty
Rule 40    function_params -> type ID function_params_rec
Rule 41    function_params_rec -> empty
Rule 42    function_params_rec -> , function_params
Rule 43    function_stm -> empty
Rule 44    function_stm -> statement function_stm
Rule 45    function_return -> empty
Rule 46    function_return -> RETURN expression
Rule 47    function_call -> read
Rule 48    function_call -> print
Rule 49    function_call -> local_function
Rule 50    function_call -> list_push
Rule 51    function_call -> list_pop
Rule 52    read -> READ ( base_type ID )
Rule 53    print -> PRINT ( expr_params )
Rule 54    expr_params -> empty
Rule 55    expr_params -> expression expr_params_rec
Rule 56    expr_params_rec -> empty
Rule 57    expr_params_rec -> , expr_params
Rule 58    local_function -> ID ( expr_params )
Rule 59    list_push -> PUSH TO ID ( expression )
Rule 60    list_pop -> POP LAST FROM ID ( )
Rule 61    list_access -> ID [ id_or_number ]
Rule 62    random -> RANDOM ( FROM CONST_I , TO CONST_I )
Rule 63    expression -> exp_comp expression_opt
Rule 64    expression_opt -> empty
Rule 65    expression_opt -> logic_operators expression
Rule 66    exp_comp -> exp_add exp_comp_opt
Rule 67    exp_comp_opt -> empty
Rule 68    exp_comp_opt -> comp_operators exp_comp
Rule 69    exp_add -> exp_multiply exp_add_opt
Rule 70    exp_add_opt -> empty
Rule 71    exp_add_opt -> add_operators exp_add
Rule 72    exp_multiply -> term exp_multiply_opt
Rule 73    exp_multiply_opt -> empty
Rule 74    exp_multiply_opt -> multiply_operators exp_multiply
Rule 75    term -> term_nested
Rule 76    term -> term_body
Rule 77    term_nested -> ( expression )
Rule 78    term_body -> term_body_opt term_body_types
Rule 79    term_body_opt -> empty
Rule 80    term_body_opt -> +
Rule 81    term_body_opt -> -
Rule 82    term_body_types -> ID
Rule 83    term_body_types -> term_body_types_rest
Rule 84    term_body_types_rest -> CONST_I term_int_add_stk
Rule 85    term_body_types_rest -> CONST_F term_float_add_stk
Rule 86    term_body_types_rest -> CONST_S term_string_add_stk
Rule 87    term_body_types_rest -> TRUE term_bool_add_stk
Rule 88    term_body_types_rest -> FALSE term_bool_add_stk
Rule 89    term_body_types_rest -> random
Rule 90    term_body_types_rest -> list_access
Rule 91    term_body_types_rest -> function_call
Rule 92    term_int_add_stk -> empty
Rule 93    term_float_add_stk -> empty
Rule 94    term_string_add_stk -> empty
Rule 95    term_bool_add_stk -> empty
Rule 96    type -> base_type
Rule 97    type -> ARRAY FROM base_type
Rule 98    id_or_number -> ID
Rule 99    id_or_number -> CONST_I
Rule 100   base_type -> INT
Rule 101   base_type -> FLOAT
Rule 102   base_type -> STRING
Rule 103   base_type -> BOOLEAN
Rule 104   logic_operators -> AND
Rule 105   logic_operators -> OR
Rule 106   comp_operators -> <
Rule 107   comp_operators -> >
Rule 108   comp_operators -> EQ
Rule 109   comp_operators -> NEQ
Rule 110   comp_operators -> GTE
Rule 111   comp_operators -> LTE
Rule 112   multiply_operators -> *
Rule 113   multiply_operators -> /
Rule 114   add_operators -> +
Rule 115   add_operators -> -
Rule 116   empty -> <empty>

Terminals, with rules where they appear

(                    : 24 27 31 32 33 52 53 58 59 60 62 77
)                    : 24 27 30 33 52 53 58 59 60 62 77
*                    : 112
+                    : 80 114
,                    : 21 42 57 62
-                    : 81 115
/                    : 113
:                    : 13
;                    : 14
<                    : 106
=                    : 22
>                    : 107
AND                  : 104
ARRAY                : 18 97
BOOLEAN              : 103
CONST_F              : 85
CONST_I              : 62 62 84 99
CONST_S              : 86
DO                   : 24 27 30
ELSE                 : 29
EQ                   : 108
FALSE                : 88
FLOAT                : 101
FOR                  : 32
FROM                 : 18 18 60 62 97
FUNCTION             : 34
GTE                  : 110
HAPPENS              : 24 27 29 31
ID                   : 19 22 34 40 52 58 59 60 61 82 98
IF                   : 24 27
INT                  : 100
LAST                 : 60
LTE                  : 111
NEQ                  : 109
OR                   : 27 105
POP                  : 60
PRINT                : 53
PROGRAM              : 1
PUSH                 : 59
RANDOM               : 62
READ                 : 52
RETURN               : 46
STRING               : 102
TO                   : 59 62
TRUE                 : 87
VARIABLE             : 13
WHILE                : 31
[                    : 61
]                    : 61
error                : 
{                    : 6 33
}                    : 6 33

Nonterminals, with rules where they appear

add_operators        : 71
assignation          : 9
base_type            : 17 18 52 96 97
block                : 1 24 27 29 30
block_stm_opt        : 6 8
comp_operators       : 68
cond_else_if         : 26
cond_else_if_opt     : 23 26
cond_else_opt        : 23
cond_if              : 23
condition            : 10
empty                : 2 4 7 15 20 25 28 35 37 39 41 43 45 54 56 64 67 70 73 79 92 93 94 95
exp_add              : 66 71
exp_add_opt          : 69
exp_comp             : 63 68
exp_comp_opt         : 66
exp_multiply         : 69 74
exp_multiply_opt     : 72
expr_params          : 53 57 58
expr_params_rec      : 55
expression           : 22 24 27 31 46 55 59 65 77
expression_opt       : 63
function             : 5
function_call        : 12 91
function_declaration : 33
function_params      : 33 42
function_params_rec  : 40
function_return      : 33
function_stm         : 33 44
function_type        : 34
function_variables_opt : 33
id_or_number         : 18 32 61
iteration            : 11
iteration_opts       : 30
list_access          : 90
list_pop             : 51
list_push            : 50
local_function       : 49
logic_operators      : 65
main                 : 0
main_func            : 1 5
multiply_operators   : 74
print                : 48
random               : 89
read                 : 47
statement            : 8 44
term                 : 72
term_body            : 76
term_body_opt        : 78
term_body_types      : 78
term_body_types_rest : 83
term_bool_add_stk    : 87 88
term_float_add_stk   : 85
term_int_add_stk     : 84
term_nested          : 75
term_string_add_stk  : 86
type                 : 38 40
var_body             : 13 16
var_body_rec         : 14
var_id               : 14 21
var_id_rec           : 19
var_opts             : 14
variables            : 3 36
variables_opt        : 1

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . PROGRAM variables_opt main_func block

    PROGRAM         shift and go to state 1

    main                           shift and go to state 2

state 1

    (1) main -> PROGRAM . variables_opt main_func block
    (2) variables_opt -> . empty
    (3) variables_opt -> . variables
    (116) empty -> .
    (13) variables -> . VARIABLE : var_body

    ARRAY           reduce using rule 116 (empty -> .)
    INT             reduce using rule 116 (empty -> .)
    FLOAT           reduce using rule 116 (empty -> .)
    STRING          reduce using rule 116 (empty -> .)
    BOOLEAN         reduce using rule 116 (empty -> .)
    {               reduce using rule 116 (empty -> .)
    FUNCTION        reduce using rule 116 (empty -> .)
    VARIABLE        shift and go to state 4

    variables                      shift and go to state 3
    variables_opt                  shift and go to state 5
    empty                          shift and go to state 6

state 2

    (0) S' -> main .



state 3

    (3) variables_opt -> variables .

    ARRAY           reduce using rule 3 (variables_opt -> variables .)
    INT             reduce using rule 3 (variables_opt -> variables .)
    FLOAT           reduce using rule 3 (variables_opt -> variables .)
    STRING          reduce using rule 3 (variables_opt -> variables .)
    BOOLEAN         reduce using rule 3 (variables_opt -> variables .)
    {               reduce using rule 3 (variables_opt -> variables .)
    FUNCTION        reduce using rule 3 (variables_opt -> variables .)


state 4

    (13) variables -> VARIABLE . : var_body

    :               shift and go to state 7


state 5

    (1) main -> PROGRAM variables_opt . main_func block
    (4) main_func -> . empty
    (5) main_func -> . function main_func
    (116) empty -> .
    (33) function -> . function_declaration ( function_params ) { function_variables_opt function_stm function_return }
    (34) function_declaration -> . function_type FUNCTION ID
    (37) function_type -> . empty
    (38) function_type -> . type
    (96) type -> . base_type
    (97) type -> . ARRAY FROM base_type
    (100) base_type -> . INT
    (101) base_type -> . FLOAT
    (102) base_type -> . STRING
    (103) base_type -> . BOOLEAN

    {               reduce using rule 116 (empty -> .)
    FUNCTION        reduce using rule 116 (empty -> .)
    ARRAY           shift and go to state 10
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 14
    BOOLEAN         shift and go to state 15

    function                       shift and go to state 13
    base_type                      shift and go to state 9
    function_declaration           shift and go to state 16
    function_type                  shift and go to state 8
    type                           shift and go to state 11
    main_func                      shift and go to state 19
    empty                          shift and go to state 12

state 6

    (2) variables_opt -> empty .

    ARRAY           reduce using rule 2 (variables_opt -> empty .)
    INT             reduce using rule 2 (variables_opt -> empty .)
    FLOAT           reduce using rule 2 (variables_opt -> empty .)
    STRING          reduce using rule 2 (variables_opt -> empty .)
    BOOLEAN         reduce using rule 2 (variables_opt -> empty .)
    {               reduce using rule 2 (variables_opt -> empty .)
    FUNCTION        reduce using rule 2 (variables_opt -> empty .)


state 7

    (13) variables -> VARIABLE : . var_body
    (14) var_body -> . var_opts var_id ; var_body_rec
    (17) var_opts -> . base_type
    (18) var_opts -> . ARRAY FROM base_type FROM id_or_number
    (100) base_type -> . INT
    (101) base_type -> . FLOAT
    (102) base_type -> . STRING
    (103) base_type -> . BOOLEAN

    ARRAY           shift and go to state 23
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 14
    BOOLEAN         shift and go to state 15

    var_opts                       shift and go to state 20
    var_body                       shift and go to state 21
    base_type                      shift and go to state 22

state 8

    (34) function_declaration -> function_type . FUNCTION ID

    FUNCTION        shift and go to state 24


state 9

    (96) type -> base_type .

    FUNCTION        reduce using rule 96 (type -> base_type .)
    ID              reduce using rule 96 (type -> base_type .)


state 10

    (97) type -> ARRAY . FROM base_type

    FROM            shift and go to state 25


state 11

    (38) function_type -> type .

    FUNCTION        reduce using rule 38 (function_type -> type .)


state 12

    (4) main_func -> empty .
    (37) function_type -> empty .

    {               reduce using rule 4 (main_func -> empty .)
    FUNCTION        reduce using rule 37 (function_type -> empty .)


state 13

    (5) main_func -> function . main_func
    (4) main_func -> . empty
    (5) main_func -> . function main_func
    (116) empty -> .
    (33) function -> . function_declaration ( function_params ) { function_variables_opt function_stm function_return }
    (34) function_declaration -> . function_type FUNCTION ID
    (37) function_type -> . empty
    (38) function_type -> . type
    (96) type -> . base_type
    (97) type -> . ARRAY FROM base_type
    (100) base_type -> . INT
    (101) base_type -> . FLOAT
    (102) base_type -> . STRING
    (103) base_type -> . BOOLEAN

    {               reduce using rule 116 (empty -> .)
    FUNCTION        reduce using rule 116 (empty -> .)
    ARRAY           shift and go to state 10
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 14
    BOOLEAN         shift and go to state 15

    function                       shift and go to state 13
    base_type                      shift and go to state 9
    function_declaration           shift and go to state 16
    function_type                  shift and go to state 8
    main_func                      shift and go to state 26
    type                           shift and go to state 11
    empty                          shift and go to state 12

state 14

    (102) base_type -> STRING .

    ID              reduce using rule 102 (base_type -> STRING .)
    FUNCTION        reduce using rule 102 (base_type -> STRING .)
    FROM            reduce using rule 102 (base_type -> STRING .)


state 15

    (103) base_type -> BOOLEAN .

    ID              reduce using rule 103 (base_type -> BOOLEAN .)
    FUNCTION        reduce using rule 103 (base_type -> BOOLEAN .)
    FROM            reduce using rule 103 (base_type -> BOOLEAN .)


state 16

    (33) function -> function_declaration . ( function_params ) { function_variables_opt function_stm function_return }

    (               shift and go to state 27


state 17

    (100) base_type -> INT .

    ID              reduce using rule 100 (base_type -> INT .)
    FUNCTION        reduce using rule 100 (base_type -> INT .)
    FROM            reduce using rule 100 (base_type -> INT .)


state 18

    (101) base_type -> FLOAT .

    ID              reduce using rule 101 (base_type -> FLOAT .)
    FUNCTION        reduce using rule 101 (base_type -> FLOAT .)
    FROM            reduce using rule 101 (base_type -> FLOAT .)


state 19

    (1) main -> PROGRAM variables_opt main_func . block
    (6) block -> . { block_stm_opt }

    {               shift and go to state 28

    block                          shift and go to state 29

state 20

    (14) var_body -> var_opts . var_id ; var_body_rec
    (19) var_id -> . ID var_id_rec

    ID              shift and go to state 31

    var_id                         shift and go to state 30

state 21

    (13) variables -> VARIABLE : var_body .

    ID              reduce using rule 13 (variables -> VARIABLE : var_body .)
    IF              reduce using rule 13 (variables -> VARIABLE : var_body .)
    WHILE           reduce using rule 13 (variables -> VARIABLE : var_body .)
    FOR             reduce using rule 13 (variables -> VARIABLE : var_body .)
    READ            reduce using rule 13 (variables -> VARIABLE : var_body .)
    PRINT           reduce using rule 13 (variables -> VARIABLE : var_body .)
    PUSH            reduce using rule 13 (variables -> VARIABLE : var_body .)
    POP             reduce using rule 13 (variables -> VARIABLE : var_body .)
    RETURN          reduce using rule 13 (variables -> VARIABLE : var_body .)
    }               reduce using rule 13 (variables -> VARIABLE : var_body .)
    ARRAY           reduce using rule 13 (variables -> VARIABLE : var_body .)
    INT             reduce using rule 13 (variables -> VARIABLE : var_body .)
    FLOAT           reduce using rule 13 (variables -> VARIABLE : var_body .)
    STRING          reduce using rule 13 (variables -> VARIABLE : var_body .)
    BOOLEAN         reduce using rule 13 (variables -> VARIABLE : var_body .)
    {               reduce using rule 13 (variables -> VARIABLE : var_body .)
    FUNCTION        reduce using rule 13 (variables -> VARIABLE : var_body .)


state 22

    (17) var_opts -> base_type .

    ID              reduce using rule 17 (var_opts -> base_type .)


state 23

    (18) var_opts -> ARRAY . FROM base_type FROM id_or_number

    FROM            shift and go to state 32


state 24

    (34) function_declaration -> function_type FUNCTION . ID

    ID              shift and go to state 33


state 25

    (97) type -> ARRAY FROM . base_type
    (100) base_type -> . INT
    (101) base_type -> . FLOAT
    (102) base_type -> . STRING
    (103) base_type -> . BOOLEAN

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 14
    BOOLEAN         shift and go to state 15

    base_type                      shift and go to state 34

state 26

    (5) main_func -> function main_func .

    {               reduce using rule 5 (main_func -> function main_func .)


state 27

    (33) function -> function_declaration ( . function_params ) { function_variables_opt function_stm function_return }
    (39) function_params -> . empty
    (40) function_params -> . type ID function_params_rec
    (116) empty -> .
    (96) type -> . base_type
    (97) type -> . ARRAY FROM base_type
    (100) base_type -> . INT
    (101) base_type -> . FLOAT
    (102) base_type -> . STRING
    (103) base_type -> . BOOLEAN

    )               reduce using rule 116 (empty -> .)
    ARRAY           shift and go to state 10
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 14
    BOOLEAN         shift and go to state 15

    base_type                      shift and go to state 9
    function_params                shift and go to state 37
    type                           shift and go to state 36
    empty                          shift and go to state 35

state 28

    (6) block -> { . block_stm_opt }
    (7) block_stm_opt -> . empty
    (8) block_stm_opt -> . statement block_stm_opt
    (116) empty -> .
    (9) statement -> . assignation
    (10) statement -> . condition
    (11) statement -> . iteration
    (12) statement -> . function_call
    (22) assignation -> . ID = expression
    (23) condition -> . cond_if cond_else_if_opt cond_else_opt
    (30) iteration -> . iteration_opts ) DO block
    (47) function_call -> . read
    (48) function_call -> . print
    (49) function_call -> . local_function
    (50) function_call -> . list_push
    (51) function_call -> . list_pop
    (24) cond_if -> . IF HAPPENS ( expression ) DO block
    (31) iteration_opts -> . WHILE HAPPENS ( expression
    (32) iteration_opts -> . FOR ( id_or_number
    (52) read -> . READ ( base_type ID )
    (53) print -> . PRINT ( expr_params )
    (58) local_function -> . ID ( expr_params )
    (59) list_push -> . PUSH TO ID ( expression )
    (60) list_pop -> . POP LAST FROM ID ( )

    }               reduce using rule 116 (empty -> .)
    ID              shift and go to state 55
    IF              shift and go to state 57
    WHILE           shift and go to state 41
    FOR             shift and go to state 51
    READ            shift and go to state 38
    PRINT           shift and go to state 40
    PUSH            shift and go to state 54
    POP             shift and go to state 44

    iteration_opts                 shift and go to state 49
    assignation                    shift and go to state 58
    read                           shift and go to state 52
    iteration                      shift and go to state 59
    cond_if                        shift and go to state 53
    function_call                  shift and go to state 39
    list_push                      shift and go to state 50
    list_pop                       shift and go to state 42
    local_function                 shift and go to state 45
    empty                          shift and go to state 48
    statement                      shift and go to state 46
    print                          shift and go to state 47
    block_stm_opt                  shift and go to state 43
    condition                      shift and go to state 56

state 29

    (1) main -> PROGRAM variables_opt main_func block .

    $end            reduce using rule 1 (main -> PROGRAM variables_opt main_func block .)


state 30

    (14) var_body -> var_opts var_id . ; var_body_rec

    ;               shift and go to state 60


state 31

    (19) var_id -> ID . var_id_rec
    (20) var_id_rec -> . empty
    (21) var_id_rec -> . , var_id
    (116) empty -> .

    ,               shift and go to state 63
    ;               reduce using rule 116 (empty -> .)

    var_id_rec                     shift and go to state 61
    empty                          shift and go to state 62

state 32

    (18) var_opts -> ARRAY FROM . base_type FROM id_or_number
    (100) base_type -> . INT
    (101) base_type -> . FLOAT
    (102) base_type -> . STRING
    (103) base_type -> . BOOLEAN

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 14
    BOOLEAN         shift and go to state 15

    base_type                      shift and go to state 64

state 33

    (34) function_declaration -> function_type FUNCTION ID .

    (               reduce using rule 34 (function_declaration -> function_type FUNCTION ID .)


state 34

    (97) type -> ARRAY FROM base_type .

    FUNCTION        reduce using rule 97 (type -> ARRAY FROM base_type .)
    ID              reduce using rule 97 (type -> ARRAY FROM base_type .)


state 35

    (39) function_params -> empty .

    )               reduce using rule 39 (function_params -> empty .)


state 36

    (40) function_params -> type . ID function_params_rec

    ID              shift and go to state 65


state 37

    (33) function -> function_declaration ( function_params . ) { function_variables_opt function_stm function_return }

    )               shift and go to state 66


state 38

    (52) read -> READ . ( base_type ID )

    (               shift and go to state 67


state 39

    (12) statement -> function_call .

    ID              reduce using rule 12 (statement -> function_call .)
    IF              reduce using rule 12 (statement -> function_call .)
    WHILE           reduce using rule 12 (statement -> function_call .)
    FOR             reduce using rule 12 (statement -> function_call .)
    READ            reduce using rule 12 (statement -> function_call .)
    PRINT           reduce using rule 12 (statement -> function_call .)
    PUSH            reduce using rule 12 (statement -> function_call .)
    POP             reduce using rule 12 (statement -> function_call .)
    RETURN          reduce using rule 12 (statement -> function_call .)
    }               reduce using rule 12 (statement -> function_call .)


state 40

    (53) print -> PRINT . ( expr_params )

    (               shift and go to state 68


state 41

    (31) iteration_opts -> WHILE . HAPPENS ( expression

    HAPPENS         shift and go to state 69


state 42

    (51) function_call -> list_pop .

    ID              reduce using rule 51 (function_call -> list_pop .)
    IF              reduce using rule 51 (function_call -> list_pop .)
    WHILE           reduce using rule 51 (function_call -> list_pop .)
    FOR             reduce using rule 51 (function_call -> list_pop .)
    READ            reduce using rule 51 (function_call -> list_pop .)
    PRINT           reduce using rule 51 (function_call -> list_pop .)
    PUSH            reduce using rule 51 (function_call -> list_pop .)
    POP             reduce using rule 51 (function_call -> list_pop .)
    }               reduce using rule 51 (function_call -> list_pop .)
    RETURN          reduce using rule 51 (function_call -> list_pop .)
    *               reduce using rule 51 (function_call -> list_pop .)
    /               reduce using rule 51 (function_call -> list_pop .)
    +               reduce using rule 51 (function_call -> list_pop .)
    -               reduce using rule 51 (function_call -> list_pop .)
    <               reduce using rule 51 (function_call -> list_pop .)
    >               reduce using rule 51 (function_call -> list_pop .)
    EQ              reduce using rule 51 (function_call -> list_pop .)
    NEQ             reduce using rule 51 (function_call -> list_pop .)
    GTE             reduce using rule 51 (function_call -> list_pop .)
    LTE             reduce using rule 51 (function_call -> list_pop .)
    AND             reduce using rule 51 (function_call -> list_pop .)
    OR              reduce using rule 51 (function_call -> list_pop .)
    ,               reduce using rule 51 (function_call -> list_pop .)
    )               reduce using rule 51 (function_call -> list_pop .)


state 43

    (6) block -> { block_stm_opt . }

    }               shift and go to state 70


state 44

    (60) list_pop -> POP . LAST FROM ID ( )

    LAST            shift and go to state 71


state 45

    (49) function_call -> local_function .

    ID              reduce using rule 49 (function_call -> local_function .)
    IF              reduce using rule 49 (function_call -> local_function .)
    WHILE           reduce using rule 49 (function_call -> local_function .)
    FOR             reduce using rule 49 (function_call -> local_function .)
    READ            reduce using rule 49 (function_call -> local_function .)
    PRINT           reduce using rule 49 (function_call -> local_function .)
    PUSH            reduce using rule 49 (function_call -> local_function .)
    POP             reduce using rule 49 (function_call -> local_function .)
    }               reduce using rule 49 (function_call -> local_function .)
    RETURN          reduce using rule 49 (function_call -> local_function .)
    *               reduce using rule 49 (function_call -> local_function .)
    /               reduce using rule 49 (function_call -> local_function .)
    +               reduce using rule 49 (function_call -> local_function .)
    -               reduce using rule 49 (function_call -> local_function .)
    <               reduce using rule 49 (function_call -> local_function .)
    >               reduce using rule 49 (function_call -> local_function .)
    EQ              reduce using rule 49 (function_call -> local_function .)
    NEQ             reduce using rule 49 (function_call -> local_function .)
    GTE             reduce using rule 49 (function_call -> local_function .)
    LTE             reduce using rule 49 (function_call -> local_function .)
    AND             reduce using rule 49 (function_call -> local_function .)
    OR              reduce using rule 49 (function_call -> local_function .)
    ,               reduce using rule 49 (function_call -> local_function .)
    )               reduce using rule 49 (function_call -> local_function .)


state 46

    (8) block_stm_opt -> statement . block_stm_opt
    (7) block_stm_opt -> . empty
    (8) block_stm_opt -> . statement block_stm_opt
    (116) empty -> .
    (9) statement -> . assignation
    (10) statement -> . condition
    (11) statement -> . iteration
    (12) statement -> . function_call
    (22) assignation -> . ID = expression
    (23) condition -> . cond_if cond_else_if_opt cond_else_opt
    (30) iteration -> . iteration_opts ) DO block
    (47) function_call -> . read
    (48) function_call -> . print
    (49) function_call -> . local_function
    (50) function_call -> . list_push
    (51) function_call -> . list_pop
    (24) cond_if -> . IF HAPPENS ( expression ) DO block
    (31) iteration_opts -> . WHILE HAPPENS ( expression
    (32) iteration_opts -> . FOR ( id_or_number
    (52) read -> . READ ( base_type ID )
    (53) print -> . PRINT ( expr_params )
    (58) local_function -> . ID ( expr_params )
    (59) list_push -> . PUSH TO ID ( expression )
    (60) list_pop -> . POP LAST FROM ID ( )

    }               reduce using rule 116 (empty -> .)
    ID              shift and go to state 55
    IF              shift and go to state 57
    WHILE           shift and go to state 41
    FOR             shift and go to state 51
    READ            shift and go to state 38
    PRINT           shift and go to state 40
    PUSH            shift and go to state 54
    POP             shift and go to state 44

    iteration_opts                 shift and go to state 49
    assignation                    shift and go to state 58
    read                           shift and go to state 52
    iteration                      shift and go to state 59
    cond_if                        shift and go to state 53
    function_call                  shift and go to state 39
    list_push                      shift and go to state 50
    list_pop                       shift and go to state 42
    local_function                 shift and go to state 45
    empty                          shift and go to state 48
    statement                      shift and go to state 46
    print                          shift and go to state 47
    block_stm_opt                  shift and go to state 72
    condition                      shift and go to state 56

state 47

    (48) function_call -> print .

    ID              reduce using rule 48 (function_call -> print .)
    IF              reduce using rule 48 (function_call -> print .)
    WHILE           reduce using rule 48 (function_call -> print .)
    FOR             reduce using rule 48 (function_call -> print .)
    READ            reduce using rule 48 (function_call -> print .)
    PRINT           reduce using rule 48 (function_call -> print .)
    PUSH            reduce using rule 48 (function_call -> print .)
    POP             reduce using rule 48 (function_call -> print .)
    }               reduce using rule 48 (function_call -> print .)
    RETURN          reduce using rule 48 (function_call -> print .)
    *               reduce using rule 48 (function_call -> print .)
    /               reduce using rule 48 (function_call -> print .)
    +               reduce using rule 48 (function_call -> print .)
    -               reduce using rule 48 (function_call -> print .)
    <               reduce using rule 48 (function_call -> print .)
    >               reduce using rule 48 (function_call -> print .)
    EQ              reduce using rule 48 (function_call -> print .)
    NEQ             reduce using rule 48 (function_call -> print .)
    GTE             reduce using rule 48 (function_call -> print .)
    LTE             reduce using rule 48 (function_call -> print .)
    AND             reduce using rule 48 (function_call -> print .)
    OR              reduce using rule 48 (function_call -> print .)
    ,               reduce using rule 48 (function_call -> print .)
    )               reduce using rule 48 (function_call -> print .)


state 48

    (7) block_stm_opt -> empty .

    }               reduce using rule 7 (block_stm_opt -> empty .)


state 49

    (30) iteration -> iteration_opts . ) DO block

    )               shift and go to state 73


state 50

    (50) function_call -> list_push .

    ID              reduce using rule 50 (function_call -> list_push .)
    IF              reduce using rule 50 (function_call -> list_push .)
    WHILE           reduce using rule 50 (function_call -> list_push .)
    FOR             reduce using rule 50 (function_call -> list_push .)
    READ            reduce using rule 50 (function_call -> list_push .)
    PRINT           reduce using rule 50 (function_call -> list_push .)
    PUSH            reduce using rule 50 (function_call -> list_push .)
    POP             reduce using rule 50 (function_call -> list_push .)
    }               reduce using rule 50 (function_call -> list_push .)
    RETURN          reduce using rule 50 (function_call -> list_push .)
    *               reduce using rule 50 (function_call -> list_push .)
    /               reduce using rule 50 (function_call -> list_push .)
    +               reduce using rule 50 (function_call -> list_push .)
    -               reduce using rule 50 (function_call -> list_push .)
    <               reduce using rule 50 (function_call -> list_push .)
    >               reduce using rule 50 (function_call -> list_push .)
    EQ              reduce using rule 50 (function_call -> list_push .)
    NEQ             reduce using rule 50 (function_call -> list_push .)
    GTE             reduce using rule 50 (function_call -> list_push .)
    LTE             reduce using rule 50 (function_call -> list_push .)
    AND             reduce using rule 50 (function_call -> list_push .)
    OR              reduce using rule 50 (function_call -> list_push .)
    ,               reduce using rule 50 (function_call -> list_push .)
    )               reduce using rule 50 (function_call -> list_push .)


state 51

    (32) iteration_opts -> FOR . ( id_or_number

    (               shift and go to state 74


state 52

    (47) function_call -> read .

    ID              reduce using rule 47 (function_call -> read .)
    IF              reduce using rule 47 (function_call -> read .)
    WHILE           reduce using rule 47 (function_call -> read .)
    FOR             reduce using rule 47 (function_call -> read .)
    READ            reduce using rule 47 (function_call -> read .)
    PRINT           reduce using rule 47 (function_call -> read .)
    PUSH            reduce using rule 47 (function_call -> read .)
    POP             reduce using rule 47 (function_call -> read .)
    }               reduce using rule 47 (function_call -> read .)
    RETURN          reduce using rule 47 (function_call -> read .)
    *               reduce using rule 47 (function_call -> read .)
    /               reduce using rule 47 (function_call -> read .)
    +               reduce using rule 47 (function_call -> read .)
    -               reduce using rule 47 (function_call -> read .)
    <               reduce using rule 47 (function_call -> read .)
    >               reduce using rule 47 (function_call -> read .)
    EQ              reduce using rule 47 (function_call -> read .)
    NEQ             reduce using rule 47 (function_call -> read .)
    GTE             reduce using rule 47 (function_call -> read .)
    LTE             reduce using rule 47 (function_call -> read .)
    AND             reduce using rule 47 (function_call -> read .)
    OR              reduce using rule 47 (function_call -> read .)
    ,               reduce using rule 47 (function_call -> read .)
    )               reduce using rule 47 (function_call -> read .)


state 53

    (23) condition -> cond_if . cond_else_if_opt cond_else_opt
    (25) cond_else_if_opt -> . empty
    (26) cond_else_if_opt -> . cond_else_if cond_else_if_opt
    (116) empty -> .
    (27) cond_else_if -> . OR IF HAPPENS ( expression ) DO block

    ELSE            reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    OR              shift and go to state 77

    cond_else_if_opt               shift and go to state 75
    empty                          shift and go to state 76
    cond_else_if                   shift and go to state 78

state 54

    (59) list_push -> PUSH . TO ID ( expression )

    TO              shift and go to state 79


state 55

    (22) assignation -> ID . = expression
    (58) local_function -> ID . ( expr_params )

    =               shift and go to state 80
    (               shift and go to state 81


state 56

    (10) statement -> condition .

    ID              reduce using rule 10 (statement -> condition .)
    IF              reduce using rule 10 (statement -> condition .)
    WHILE           reduce using rule 10 (statement -> condition .)
    FOR             reduce using rule 10 (statement -> condition .)
    READ            reduce using rule 10 (statement -> condition .)
    PRINT           reduce using rule 10 (statement -> condition .)
    PUSH            reduce using rule 10 (statement -> condition .)
    POP             reduce using rule 10 (statement -> condition .)
    RETURN          reduce using rule 10 (statement -> condition .)
    }               reduce using rule 10 (statement -> condition .)


state 57

    (24) cond_if -> IF . HAPPENS ( expression ) DO block

    HAPPENS         shift and go to state 82


state 58

    (9) statement -> assignation .

    ID              reduce using rule 9 (statement -> assignation .)
    IF              reduce using rule 9 (statement -> assignation .)
    WHILE           reduce using rule 9 (statement -> assignation .)
    FOR             reduce using rule 9 (statement -> assignation .)
    READ            reduce using rule 9 (statement -> assignation .)
    PRINT           reduce using rule 9 (statement -> assignation .)
    PUSH            reduce using rule 9 (statement -> assignation .)
    POP             reduce using rule 9 (statement -> assignation .)
    RETURN          reduce using rule 9 (statement -> assignation .)
    }               reduce using rule 9 (statement -> assignation .)


state 59

    (11) statement -> iteration .

    ID              reduce using rule 11 (statement -> iteration .)
    IF              reduce using rule 11 (statement -> iteration .)
    WHILE           reduce using rule 11 (statement -> iteration .)
    FOR             reduce using rule 11 (statement -> iteration .)
    READ            reduce using rule 11 (statement -> iteration .)
    PRINT           reduce using rule 11 (statement -> iteration .)
    PUSH            reduce using rule 11 (statement -> iteration .)
    POP             reduce using rule 11 (statement -> iteration .)
    RETURN          reduce using rule 11 (statement -> iteration .)
    }               reduce using rule 11 (statement -> iteration .)


state 60

    (14) var_body -> var_opts var_id ; . var_body_rec
    (15) var_body_rec -> . empty
    (16) var_body_rec -> . var_body
    (116) empty -> .
    (14) var_body -> . var_opts var_id ; var_body_rec
    (17) var_opts -> . base_type
    (18) var_opts -> . ARRAY FROM base_type FROM id_or_number
    (100) base_type -> . INT
    (101) base_type -> . FLOAT
    (102) base_type -> . STRING
    (103) base_type -> . BOOLEAN

  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    {               reduce using rule 116 (empty -> .)
    FUNCTION        reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    ARRAY           shift and go to state 23
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 14
    BOOLEAN         shift and go to state 15

  ! ARRAY           [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! FLOAT           [ reduce using rule 116 (empty -> .) ]
  ! STRING          [ reduce using rule 116 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 116 (empty -> .) ]

    var_opts                       shift and go to state 20
    var_body                       shift and go to state 83
    base_type                      shift and go to state 22
    var_body_rec                   shift and go to state 84
    empty                          shift and go to state 85

state 61

    (19) var_id -> ID var_id_rec .

    ;               reduce using rule 19 (var_id -> ID var_id_rec .)


state 62

    (20) var_id_rec -> empty .

    ;               reduce using rule 20 (var_id_rec -> empty .)


state 63

    (21) var_id_rec -> , . var_id
    (19) var_id -> . ID var_id_rec

    ID              shift and go to state 31

    var_id                         shift and go to state 86

state 64

    (18) var_opts -> ARRAY FROM base_type . FROM id_or_number

    FROM            shift and go to state 87


state 65

    (40) function_params -> type ID . function_params_rec
    (41) function_params_rec -> . empty
    (42) function_params_rec -> . , function_params
    (116) empty -> .

    ,               shift and go to state 89
    )               reduce using rule 116 (empty -> .)

    function_params_rec            shift and go to state 88
    empty                          shift and go to state 90

state 66

    (33) function -> function_declaration ( function_params ) . { function_variables_opt function_stm function_return }

    {               shift and go to state 91


state 67

    (52) read -> READ ( . base_type ID )
    (100) base_type -> . INT
    (101) base_type -> . FLOAT
    (102) base_type -> . STRING
    (103) base_type -> . BOOLEAN

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 14
    BOOLEAN         shift and go to state 15

    base_type                      shift and go to state 92

state 68

    (53) print -> PRINT ( . expr_params )
    (54) expr_params -> . empty
    (55) expr_params -> . expression expr_params_rec
    (116) empty -> .
    (63) expression -> . exp_comp expression_opt
    (66) exp_comp -> . exp_add exp_comp_opt
    (69) exp_add -> . exp_multiply exp_add_opt
    (72) exp_multiply -> . term exp_multiply_opt
    (75) term -> . term_nested
    (76) term -> . term_body
    (77) term_nested -> . ( expression )
    (78) term_body -> . term_body_opt term_body_types
    (79) term_body_opt -> . empty
    (80) term_body_opt -> . +
    (81) term_body_opt -> . -

    )               reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    CONST_I         reduce using rule 116 (empty -> .)
    CONST_F         reduce using rule 116 (empty -> .)
    CONST_S         reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    RANDOM          reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)
    (               shift and go to state 96
    +               shift and go to state 104
    -               shift and go to state 100

    term_body                      shift and go to state 93
    term                           shift and go to state 94
    exp_comp                       shift and go to state 95
    exp_multiply                   shift and go to state 97
    term_nested                    shift and go to state 98
    term_body_opt                  shift and go to state 99
    expr_params                    shift and go to state 101
    empty                          shift and go to state 105
    exp_add                        shift and go to state 102
    expression                     shift and go to state 103

state 69

    (31) iteration_opts -> WHILE HAPPENS . ( expression

    (               shift and go to state 106


state 70

    (6) block -> { block_stm_opt } .

    ID              reduce using rule 6 (block -> { block_stm_opt } .)
    IF              reduce using rule 6 (block -> { block_stm_opt } .)
    WHILE           reduce using rule 6 (block -> { block_stm_opt } .)
    FOR             reduce using rule 6 (block -> { block_stm_opt } .)
    READ            reduce using rule 6 (block -> { block_stm_opt } .)
    PRINT           reduce using rule 6 (block -> { block_stm_opt } .)
    PUSH            reduce using rule 6 (block -> { block_stm_opt } .)
    POP             reduce using rule 6 (block -> { block_stm_opt } .)
    }               reduce using rule 6 (block -> { block_stm_opt } .)
    RETURN          reduce using rule 6 (block -> { block_stm_opt } .)
    OR              reduce using rule 6 (block -> { block_stm_opt } .)
    ELSE            reduce using rule 6 (block -> { block_stm_opt } .)
    $end            reduce using rule 6 (block -> { block_stm_opt } .)


state 71

    (60) list_pop -> POP LAST . FROM ID ( )

    FROM            shift and go to state 107


state 72

    (8) block_stm_opt -> statement block_stm_opt .

    }               reduce using rule 8 (block_stm_opt -> statement block_stm_opt .)


state 73

    (30) iteration -> iteration_opts ) . DO block

    DO              shift and go to state 108


state 74

    (32) iteration_opts -> FOR ( . id_or_number
    (98) id_or_number -> . ID
    (99) id_or_number -> . CONST_I

    ID              shift and go to state 111
    CONST_I         shift and go to state 109

    id_or_number                   shift and go to state 110

state 75

    (23) condition -> cond_if cond_else_if_opt . cond_else_opt
    (28) cond_else_opt -> . empty
    (29) cond_else_opt -> . ELSE HAPPENS block
    (116) empty -> .

    ELSE            shift and go to state 113
    ID              reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

    cond_else_opt                  shift and go to state 112
    empty                          shift and go to state 114

state 76

    (25) cond_else_if_opt -> empty .

    ELSE            reduce using rule 25 (cond_else_if_opt -> empty .)
    ID              reduce using rule 25 (cond_else_if_opt -> empty .)
    IF              reduce using rule 25 (cond_else_if_opt -> empty .)
    WHILE           reduce using rule 25 (cond_else_if_opt -> empty .)
    FOR             reduce using rule 25 (cond_else_if_opt -> empty .)
    READ            reduce using rule 25 (cond_else_if_opt -> empty .)
    PRINT           reduce using rule 25 (cond_else_if_opt -> empty .)
    PUSH            reduce using rule 25 (cond_else_if_opt -> empty .)
    POP             reduce using rule 25 (cond_else_if_opt -> empty .)
    }               reduce using rule 25 (cond_else_if_opt -> empty .)
    RETURN          reduce using rule 25 (cond_else_if_opt -> empty .)


state 77

    (27) cond_else_if -> OR . IF HAPPENS ( expression ) DO block

    IF              shift and go to state 115


state 78

    (26) cond_else_if_opt -> cond_else_if . cond_else_if_opt
    (25) cond_else_if_opt -> . empty
    (26) cond_else_if_opt -> . cond_else_if cond_else_if_opt
    (116) empty -> .
    (27) cond_else_if -> . OR IF HAPPENS ( expression ) DO block

    ELSE            reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    OR              shift and go to state 77

    cond_else_if_opt               shift and go to state 116
    empty                          shift and go to state 76
    cond_else_if                   shift and go to state 78

state 79

    (59) list_push -> PUSH TO . ID ( expression )

    ID              shift and go to state 117


state 80

    (22) assignation -> ID = . expression
    (63) expression -> . exp_comp expression_opt
    (66) exp_comp -> . exp_add exp_comp_opt
    (69) exp_add -> . exp_multiply exp_add_opt
    (72) exp_multiply -> . term exp_multiply_opt
    (75) term -> . term_nested
    (76) term -> . term_body
    (77) term_nested -> . ( expression )
    (78) term_body -> . term_body_opt term_body_types
    (79) term_body_opt -> . empty
    (80) term_body_opt -> . +
    (81) term_body_opt -> . -
    (116) empty -> .

    (               shift and go to state 96
    +               shift and go to state 104
    -               shift and go to state 100
    ID              reduce using rule 116 (empty -> .)
    CONST_I         reduce using rule 116 (empty -> .)
    CONST_F         reduce using rule 116 (empty -> .)
    CONST_S         reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    RANDOM          reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)

    term_body                      shift and go to state 93
    term                           shift and go to state 94
    exp_comp                       shift and go to state 95
    expression                     shift and go to state 118
    term_nested                    shift and go to state 98
    term_body_opt                  shift and go to state 99
    exp_add                        shift and go to state 102
    exp_multiply                   shift and go to state 97
    empty                          shift and go to state 119

state 81

    (58) local_function -> ID ( . expr_params )
    (54) expr_params -> . empty
    (55) expr_params -> . expression expr_params_rec
    (116) empty -> .
    (63) expression -> . exp_comp expression_opt
    (66) exp_comp -> . exp_add exp_comp_opt
    (69) exp_add -> . exp_multiply exp_add_opt
    (72) exp_multiply -> . term exp_multiply_opt
    (75) term -> . term_nested
    (76) term -> . term_body
    (77) term_nested -> . ( expression )
    (78) term_body -> . term_body_opt term_body_types
    (79) term_body_opt -> . empty
    (80) term_body_opt -> . +
    (81) term_body_opt -> . -

    )               reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    CONST_I         reduce using rule 116 (empty -> .)
    CONST_F         reduce using rule 116 (empty -> .)
    CONST_S         reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    RANDOM          reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)
    (               shift and go to state 96
    +               shift and go to state 104
    -               shift and go to state 100

    term_body                      shift and go to state 93
    term                           shift and go to state 94
    exp_comp                       shift and go to state 95
    exp_multiply                   shift and go to state 97
    term_nested                    shift and go to state 98
    term_body_opt                  shift and go to state 99
    expr_params                    shift and go to state 120
    empty                          shift and go to state 105
    exp_add                        shift and go to state 102
    expression                     shift and go to state 103

state 82

    (24) cond_if -> IF HAPPENS . ( expression ) DO block

    (               shift and go to state 121


state 83

    (16) var_body_rec -> var_body .

    ARRAY           reduce using rule 16 (var_body_rec -> var_body .)
    INT             reduce using rule 16 (var_body_rec -> var_body .)
    FLOAT           reduce using rule 16 (var_body_rec -> var_body .)
    STRING          reduce using rule 16 (var_body_rec -> var_body .)
    BOOLEAN         reduce using rule 16 (var_body_rec -> var_body .)
    {               reduce using rule 16 (var_body_rec -> var_body .)
    FUNCTION        reduce using rule 16 (var_body_rec -> var_body .)
    ID              reduce using rule 16 (var_body_rec -> var_body .)
    IF              reduce using rule 16 (var_body_rec -> var_body .)
    WHILE           reduce using rule 16 (var_body_rec -> var_body .)
    FOR             reduce using rule 16 (var_body_rec -> var_body .)
    READ            reduce using rule 16 (var_body_rec -> var_body .)
    PRINT           reduce using rule 16 (var_body_rec -> var_body .)
    PUSH            reduce using rule 16 (var_body_rec -> var_body .)
    POP             reduce using rule 16 (var_body_rec -> var_body .)
    RETURN          reduce using rule 16 (var_body_rec -> var_body .)
    }               reduce using rule 16 (var_body_rec -> var_body .)


state 84

    (14) var_body -> var_opts var_id ; var_body_rec .

    ARRAY           reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    INT             reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    FLOAT           reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    STRING          reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    BOOLEAN         reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    {               reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    FUNCTION        reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    ID              reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    IF              reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    WHILE           reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    FOR             reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    READ            reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    PRINT           reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    PUSH            reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    POP             reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    RETURN          reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    }               reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)


state 85

    (15) var_body_rec -> empty .

    ARRAY           reduce using rule 15 (var_body_rec -> empty .)
    INT             reduce using rule 15 (var_body_rec -> empty .)
    FLOAT           reduce using rule 15 (var_body_rec -> empty .)
    STRING          reduce using rule 15 (var_body_rec -> empty .)
    BOOLEAN         reduce using rule 15 (var_body_rec -> empty .)
    {               reduce using rule 15 (var_body_rec -> empty .)
    FUNCTION        reduce using rule 15 (var_body_rec -> empty .)
    ID              reduce using rule 15 (var_body_rec -> empty .)
    IF              reduce using rule 15 (var_body_rec -> empty .)
    WHILE           reduce using rule 15 (var_body_rec -> empty .)
    FOR             reduce using rule 15 (var_body_rec -> empty .)
    READ            reduce using rule 15 (var_body_rec -> empty .)
    PRINT           reduce using rule 15 (var_body_rec -> empty .)
    PUSH            reduce using rule 15 (var_body_rec -> empty .)
    POP             reduce using rule 15 (var_body_rec -> empty .)
    RETURN          reduce using rule 15 (var_body_rec -> empty .)
    }               reduce using rule 15 (var_body_rec -> empty .)


state 86

    (21) var_id_rec -> , var_id .

    ;               reduce using rule 21 (var_id_rec -> , var_id .)


state 87

    (18) var_opts -> ARRAY FROM base_type FROM . id_or_number
    (98) id_or_number -> . ID
    (99) id_or_number -> . CONST_I

    ID              shift and go to state 111
    CONST_I         shift and go to state 109

    id_or_number                   shift and go to state 122

state 88

    (40) function_params -> type ID function_params_rec .

    )               reduce using rule 40 (function_params -> type ID function_params_rec .)


state 89

    (42) function_params_rec -> , . function_params
    (39) function_params -> . empty
    (40) function_params -> . type ID function_params_rec
    (116) empty -> .
    (96) type -> . base_type
    (97) type -> . ARRAY FROM base_type
    (100) base_type -> . INT
    (101) base_type -> . FLOAT
    (102) base_type -> . STRING
    (103) base_type -> . BOOLEAN

    )               reduce using rule 116 (empty -> .)
    ARRAY           shift and go to state 10
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 14
    BOOLEAN         shift and go to state 15

    base_type                      shift and go to state 9
    type                           shift and go to state 36
    empty                          shift and go to state 35
    function_params                shift and go to state 123

state 90

    (41) function_params_rec -> empty .

    )               reduce using rule 41 (function_params_rec -> empty .)


state 91

    (33) function -> function_declaration ( function_params ) { . function_variables_opt function_stm function_return }
    (35) function_variables_opt -> . empty
    (36) function_variables_opt -> . variables
    (116) empty -> .
    (13) variables -> . VARIABLE : var_body

    ID              reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    VARIABLE        shift and go to state 4

    function_variables_opt         shift and go to state 124
    variables                      shift and go to state 126
    empty                          shift and go to state 125

state 92

    (52) read -> READ ( base_type . ID )

    ID              shift and go to state 127


state 93

    (76) term -> term_body .

    *               reduce using rule 76 (term -> term_body .)
    /               reduce using rule 76 (term -> term_body .)
    +               reduce using rule 76 (term -> term_body .)
    -               reduce using rule 76 (term -> term_body .)
    <               reduce using rule 76 (term -> term_body .)
    >               reduce using rule 76 (term -> term_body .)
    EQ              reduce using rule 76 (term -> term_body .)
    NEQ             reduce using rule 76 (term -> term_body .)
    GTE             reduce using rule 76 (term -> term_body .)
    LTE             reduce using rule 76 (term -> term_body .)
    AND             reduce using rule 76 (term -> term_body .)
    OR              reduce using rule 76 (term -> term_body .)
    ,               reduce using rule 76 (term -> term_body .)
    )               reduce using rule 76 (term -> term_body .)
    ID              reduce using rule 76 (term -> term_body .)
    IF              reduce using rule 76 (term -> term_body .)
    WHILE           reduce using rule 76 (term -> term_body .)
    FOR             reduce using rule 76 (term -> term_body .)
    READ            reduce using rule 76 (term -> term_body .)
    PRINT           reduce using rule 76 (term -> term_body .)
    PUSH            reduce using rule 76 (term -> term_body .)
    POP             reduce using rule 76 (term -> term_body .)
    }               reduce using rule 76 (term -> term_body .)
    RETURN          reduce using rule 76 (term -> term_body .)


state 94

    (72) exp_multiply -> term . exp_multiply_opt
    (73) exp_multiply_opt -> . empty
    (74) exp_multiply_opt -> . multiply_operators exp_multiply
    (116) empty -> .
    (112) multiply_operators -> . *
    (113) multiply_operators -> . /

    +               reduce using rule 116 (empty -> .)
    -               reduce using rule 116 (empty -> .)
    <               reduce using rule 116 (empty -> .)
    >               reduce using rule 116 (empty -> .)
    EQ              reduce using rule 116 (empty -> .)
    NEQ             reduce using rule 116 (empty -> .)
    GTE             reduce using rule 116 (empty -> .)
    LTE             reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    *               shift and go to state 130
    /               shift and go to state 131

    multiply_operators             shift and go to state 128
    empty                          shift and go to state 132
    exp_multiply_opt               shift and go to state 129

state 95

    (63) expression -> exp_comp . expression_opt
    (64) expression_opt -> . empty
    (65) expression_opt -> . logic_operators expression
    (116) empty -> .
    (104) logic_operators -> . AND
    (105) logic_operators -> . OR

    ,               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    AND             shift and go to state 133
    OR              shift and go to state 136

    expression_opt                 shift and go to state 135
    empty                          shift and go to state 137
    logic_operators                shift and go to state 134

state 96

    (77) term_nested -> ( . expression )
    (63) expression -> . exp_comp expression_opt
    (66) exp_comp -> . exp_add exp_comp_opt
    (69) exp_add -> . exp_multiply exp_add_opt
    (72) exp_multiply -> . term exp_multiply_opt
    (75) term -> . term_nested
    (76) term -> . term_body
    (77) term_nested -> . ( expression )
    (78) term_body -> . term_body_opt term_body_types
    (79) term_body_opt -> . empty
    (80) term_body_opt -> . +
    (81) term_body_opt -> . -
    (116) empty -> .

    (               shift and go to state 96
    +               shift and go to state 104
    -               shift and go to state 100
    ID              reduce using rule 116 (empty -> .)
    CONST_I         reduce using rule 116 (empty -> .)
    CONST_F         reduce using rule 116 (empty -> .)
    CONST_S         reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    RANDOM          reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)

    term_body                      shift and go to state 93
    term                           shift and go to state 94
    exp_comp                       shift and go to state 95
    expression                     shift and go to state 138
    term_nested                    shift and go to state 98
    term_body_opt                  shift and go to state 99
    exp_add                        shift and go to state 102
    exp_multiply                   shift and go to state 97
    empty                          shift and go to state 119

state 97

    (69) exp_add -> exp_multiply . exp_add_opt
    (70) exp_add_opt -> . empty
    (71) exp_add_opt -> . add_operators exp_add
    (116) empty -> .
    (114) add_operators -> . +
    (115) add_operators -> . -

    <               reduce using rule 116 (empty -> .)
    >               reduce using rule 116 (empty -> .)
    EQ              reduce using rule 116 (empty -> .)
    NEQ             reduce using rule 116 (empty -> .)
    GTE             reduce using rule 116 (empty -> .)
    LTE             reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    +               shift and go to state 142
    -               shift and go to state 139

    exp_add_opt                    shift and go to state 141
    add_operators                  shift and go to state 140
    empty                          shift and go to state 143

state 98

    (75) term -> term_nested .

    *               reduce using rule 75 (term -> term_nested .)
    /               reduce using rule 75 (term -> term_nested .)
    +               reduce using rule 75 (term -> term_nested .)
    -               reduce using rule 75 (term -> term_nested .)
    <               reduce using rule 75 (term -> term_nested .)
    >               reduce using rule 75 (term -> term_nested .)
    EQ              reduce using rule 75 (term -> term_nested .)
    NEQ             reduce using rule 75 (term -> term_nested .)
    GTE             reduce using rule 75 (term -> term_nested .)
    LTE             reduce using rule 75 (term -> term_nested .)
    AND             reduce using rule 75 (term -> term_nested .)
    OR              reduce using rule 75 (term -> term_nested .)
    ,               reduce using rule 75 (term -> term_nested .)
    )               reduce using rule 75 (term -> term_nested .)
    ID              reduce using rule 75 (term -> term_nested .)
    IF              reduce using rule 75 (term -> term_nested .)
    WHILE           reduce using rule 75 (term -> term_nested .)
    FOR             reduce using rule 75 (term -> term_nested .)
    READ            reduce using rule 75 (term -> term_nested .)
    PRINT           reduce using rule 75 (term -> term_nested .)
    PUSH            reduce using rule 75 (term -> term_nested .)
    POP             reduce using rule 75 (term -> term_nested .)
    }               reduce using rule 75 (term -> term_nested .)
    RETURN          reduce using rule 75 (term -> term_nested .)


state 99

    (78) term_body -> term_body_opt . term_body_types
    (82) term_body_types -> . ID
    (83) term_body_types -> . term_body_types_rest
    (84) term_body_types_rest -> . CONST_I term_int_add_stk
    (85) term_body_types_rest -> . CONST_F term_float_add_stk
    (86) term_body_types_rest -> . CONST_S term_string_add_stk
    (87) term_body_types_rest -> . TRUE term_bool_add_stk
    (88) term_body_types_rest -> . FALSE term_bool_add_stk
    (89) term_body_types_rest -> . random
    (90) term_body_types_rest -> . list_access
    (91) term_body_types_rest -> . function_call
    (62) random -> . RANDOM ( FROM CONST_I , TO CONST_I )
    (61) list_access -> . ID [ id_or_number ]
    (47) function_call -> . read
    (48) function_call -> . print
    (49) function_call -> . local_function
    (50) function_call -> . list_push
    (51) function_call -> . list_pop
    (52) read -> . READ ( base_type ID )
    (53) print -> . PRINT ( expr_params )
    (58) local_function -> . ID ( expr_params )
    (59) list_push -> . PUSH TO ID ( expression )
    (60) list_pop -> . POP LAST FROM ID ( )

    ID              shift and go to state 153
    CONST_I         shift and go to state 148
    CONST_F         shift and go to state 147
    CONST_S         shift and go to state 144
    TRUE            shift and go to state 149
    FALSE           shift and go to state 154
    RANDOM          shift and go to state 151
    READ            shift and go to state 38
    PRINT           shift and go to state 40
    PUSH            shift and go to state 54
    POP             shift and go to state 44

    read                           shift and go to state 52
    random                         shift and go to state 145
    local_function                 shift and go to state 45
    list_pop                       shift and go to state 42
    list_access                    shift and go to state 155
    term_body_types                shift and go to state 150
    function_call                  shift and go to state 146
    list_push                      shift and go to state 50
    print                          shift and go to state 47
    term_body_types_rest           shift and go to state 152

state 100

    (81) term_body_opt -> - .

    ID              reduce using rule 81 (term_body_opt -> - .)
    CONST_I         reduce using rule 81 (term_body_opt -> - .)
    CONST_F         reduce using rule 81 (term_body_opt -> - .)
    CONST_S         reduce using rule 81 (term_body_opt -> - .)
    TRUE            reduce using rule 81 (term_body_opt -> - .)
    FALSE           reduce using rule 81 (term_body_opt -> - .)
    RANDOM          reduce using rule 81 (term_body_opt -> - .)
    READ            reduce using rule 81 (term_body_opt -> - .)
    PRINT           reduce using rule 81 (term_body_opt -> - .)
    PUSH            reduce using rule 81 (term_body_opt -> - .)
    POP             reduce using rule 81 (term_body_opt -> - .)


state 101

    (53) print -> PRINT ( expr_params . )

    )               shift and go to state 156


state 102

    (66) exp_comp -> exp_add . exp_comp_opt
    (67) exp_comp_opt -> . empty
    (68) exp_comp_opt -> . comp_operators exp_comp
    (116) empty -> .
    (106) comp_operators -> . <
    (107) comp_operators -> . >
    (108) comp_operators -> . EQ
    (109) comp_operators -> . NEQ
    (110) comp_operators -> . GTE
    (111) comp_operators -> . LTE

    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    <               shift and go to state 163
    >               shift and go to state 161
    EQ              shift and go to state 162
    NEQ             shift and go to state 157
    GTE             shift and go to state 159
    LTE             shift and go to state 158

    comp_operators                 shift and go to state 165
    empty                          shift and go to state 164
    exp_comp_opt                   shift and go to state 160

state 103

    (55) expr_params -> expression . expr_params_rec
    (56) expr_params_rec -> . empty
    (57) expr_params_rec -> . , expr_params
    (116) empty -> .

    ,               shift and go to state 168
    )               reduce using rule 116 (empty -> .)

    empty                          shift and go to state 166
    expr_params_rec                shift and go to state 167

state 104

    (80) term_body_opt -> + .

    ID              reduce using rule 80 (term_body_opt -> + .)
    CONST_I         reduce using rule 80 (term_body_opt -> + .)
    CONST_F         reduce using rule 80 (term_body_opt -> + .)
    CONST_S         reduce using rule 80 (term_body_opt -> + .)
    TRUE            reduce using rule 80 (term_body_opt -> + .)
    FALSE           reduce using rule 80 (term_body_opt -> + .)
    RANDOM          reduce using rule 80 (term_body_opt -> + .)
    READ            reduce using rule 80 (term_body_opt -> + .)
    PRINT           reduce using rule 80 (term_body_opt -> + .)
    PUSH            reduce using rule 80 (term_body_opt -> + .)
    POP             reduce using rule 80 (term_body_opt -> + .)


state 105

    (54) expr_params -> empty .
    (79) term_body_opt -> empty .

    )               reduce using rule 54 (expr_params -> empty .)
    ID              reduce using rule 79 (term_body_opt -> empty .)
    CONST_I         reduce using rule 79 (term_body_opt -> empty .)
    CONST_F         reduce using rule 79 (term_body_opt -> empty .)
    CONST_S         reduce using rule 79 (term_body_opt -> empty .)
    TRUE            reduce using rule 79 (term_body_opt -> empty .)
    FALSE           reduce using rule 79 (term_body_opt -> empty .)
    RANDOM          reduce using rule 79 (term_body_opt -> empty .)
    READ            reduce using rule 79 (term_body_opt -> empty .)
    PRINT           reduce using rule 79 (term_body_opt -> empty .)
    PUSH            reduce using rule 79 (term_body_opt -> empty .)
    POP             reduce using rule 79 (term_body_opt -> empty .)


state 106

    (31) iteration_opts -> WHILE HAPPENS ( . expression
    (63) expression -> . exp_comp expression_opt
    (66) exp_comp -> . exp_add exp_comp_opt
    (69) exp_add -> . exp_multiply exp_add_opt
    (72) exp_multiply -> . term exp_multiply_opt
    (75) term -> . term_nested
    (76) term -> . term_body
    (77) term_nested -> . ( expression )
    (78) term_body -> . term_body_opt term_body_types
    (79) term_body_opt -> . empty
    (80) term_body_opt -> . +
    (81) term_body_opt -> . -
    (116) empty -> .

    (               shift and go to state 96
    +               shift and go to state 104
    -               shift and go to state 100
    ID              reduce using rule 116 (empty -> .)
    CONST_I         reduce using rule 116 (empty -> .)
    CONST_F         reduce using rule 116 (empty -> .)
    CONST_S         reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    RANDOM          reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)

    term_body                      shift and go to state 93
    term                           shift and go to state 94
    exp_comp                       shift and go to state 95
    expression                     shift and go to state 169
    term_nested                    shift and go to state 98
    term_body_opt                  shift and go to state 99
    exp_add                        shift and go to state 102
    exp_multiply                   shift and go to state 97
    empty                          shift and go to state 119

state 107

    (60) list_pop -> POP LAST FROM . ID ( )

    ID              shift and go to state 170


state 108

    (30) iteration -> iteration_opts ) DO . block
    (6) block -> . { block_stm_opt }

    {               shift and go to state 28

    block                          shift and go to state 171

state 109

    (99) id_or_number -> CONST_I .

    ID              reduce using rule 99 (id_or_number -> CONST_I .)
    )               reduce using rule 99 (id_or_number -> CONST_I .)
    ]               reduce using rule 99 (id_or_number -> CONST_I .)


state 110

    (32) iteration_opts -> FOR ( id_or_number .

    )               reduce using rule 32 (iteration_opts -> FOR ( id_or_number .)


state 111

    (98) id_or_number -> ID .

    ID              reduce using rule 98 (id_or_number -> ID .)
    )               reduce using rule 98 (id_or_number -> ID .)
    ]               reduce using rule 98 (id_or_number -> ID .)


state 112

    (23) condition -> cond_if cond_else_if_opt cond_else_opt .

    ID              reduce using rule 23 (condition -> cond_if cond_else_if_opt cond_else_opt .)
    IF              reduce using rule 23 (condition -> cond_if cond_else_if_opt cond_else_opt .)
    WHILE           reduce using rule 23 (condition -> cond_if cond_else_if_opt cond_else_opt .)
    FOR             reduce using rule 23 (condition -> cond_if cond_else_if_opt cond_else_opt .)
    READ            reduce using rule 23 (condition -> cond_if cond_else_if_opt cond_else_opt .)
    PRINT           reduce using rule 23 (condition -> cond_if cond_else_if_opt cond_else_opt .)
    PUSH            reduce using rule 23 (condition -> cond_if cond_else_if_opt cond_else_opt .)
    POP             reduce using rule 23 (condition -> cond_if cond_else_if_opt cond_else_opt .)
    }               reduce using rule 23 (condition -> cond_if cond_else_if_opt cond_else_opt .)
    RETURN          reduce using rule 23 (condition -> cond_if cond_else_if_opt cond_else_opt .)


state 113

    (29) cond_else_opt -> ELSE . HAPPENS block

    HAPPENS         shift and go to state 172


state 114

    (28) cond_else_opt -> empty .

    ID              reduce using rule 28 (cond_else_opt -> empty .)
    IF              reduce using rule 28 (cond_else_opt -> empty .)
    WHILE           reduce using rule 28 (cond_else_opt -> empty .)
    FOR             reduce using rule 28 (cond_else_opt -> empty .)
    READ            reduce using rule 28 (cond_else_opt -> empty .)
    PRINT           reduce using rule 28 (cond_else_opt -> empty .)
    PUSH            reduce using rule 28 (cond_else_opt -> empty .)
    POP             reduce using rule 28 (cond_else_opt -> empty .)
    }               reduce using rule 28 (cond_else_opt -> empty .)
    RETURN          reduce using rule 28 (cond_else_opt -> empty .)


state 115

    (27) cond_else_if -> OR IF . HAPPENS ( expression ) DO block

    HAPPENS         shift and go to state 173


state 116

    (26) cond_else_if_opt -> cond_else_if cond_else_if_opt .

    ELSE            reduce using rule 26 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    ID              reduce using rule 26 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    IF              reduce using rule 26 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    WHILE           reduce using rule 26 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    FOR             reduce using rule 26 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    READ            reduce using rule 26 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    PRINT           reduce using rule 26 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    PUSH            reduce using rule 26 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    POP             reduce using rule 26 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    }               reduce using rule 26 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    RETURN          reduce using rule 26 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)


state 117

    (59) list_push -> PUSH TO ID . ( expression )

    (               shift and go to state 174


state 118

    (22) assignation -> ID = expression .

    ID              reduce using rule 22 (assignation -> ID = expression .)
    IF              reduce using rule 22 (assignation -> ID = expression .)
    WHILE           reduce using rule 22 (assignation -> ID = expression .)
    FOR             reduce using rule 22 (assignation -> ID = expression .)
    READ            reduce using rule 22 (assignation -> ID = expression .)
    PRINT           reduce using rule 22 (assignation -> ID = expression .)
    PUSH            reduce using rule 22 (assignation -> ID = expression .)
    POP             reduce using rule 22 (assignation -> ID = expression .)
    RETURN          reduce using rule 22 (assignation -> ID = expression .)
    }               reduce using rule 22 (assignation -> ID = expression .)


state 119

    (79) term_body_opt -> empty .

    ID              reduce using rule 79 (term_body_opt -> empty .)
    CONST_I         reduce using rule 79 (term_body_opt -> empty .)
    CONST_F         reduce using rule 79 (term_body_opt -> empty .)
    CONST_S         reduce using rule 79 (term_body_opt -> empty .)
    TRUE            reduce using rule 79 (term_body_opt -> empty .)
    FALSE           reduce using rule 79 (term_body_opt -> empty .)
    RANDOM          reduce using rule 79 (term_body_opt -> empty .)
    READ            reduce using rule 79 (term_body_opt -> empty .)
    PRINT           reduce using rule 79 (term_body_opt -> empty .)
    PUSH            reduce using rule 79 (term_body_opt -> empty .)
    POP             reduce using rule 79 (term_body_opt -> empty .)


state 120

    (58) local_function -> ID ( expr_params . )

    )               shift and go to state 175


state 121

    (24) cond_if -> IF HAPPENS ( . expression ) DO block
    (63) expression -> . exp_comp expression_opt
    (66) exp_comp -> . exp_add exp_comp_opt
    (69) exp_add -> . exp_multiply exp_add_opt
    (72) exp_multiply -> . term exp_multiply_opt
    (75) term -> . term_nested
    (76) term -> . term_body
    (77) term_nested -> . ( expression )
    (78) term_body -> . term_body_opt term_body_types
    (79) term_body_opt -> . empty
    (80) term_body_opt -> . +
    (81) term_body_opt -> . -
    (116) empty -> .

    (               shift and go to state 96
    +               shift and go to state 104
    -               shift and go to state 100
    ID              reduce using rule 116 (empty -> .)
    CONST_I         reduce using rule 116 (empty -> .)
    CONST_F         reduce using rule 116 (empty -> .)
    CONST_S         reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    RANDOM          reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)

    term_body                      shift and go to state 93
    term                           shift and go to state 94
    exp_comp                       shift and go to state 95
    exp_multiply                   shift and go to state 97
    term_nested                    shift and go to state 98
    term_body_opt                  shift and go to state 99
    empty                          shift and go to state 119
    exp_add                        shift and go to state 102
    expression                     shift and go to state 176

state 122

    (18) var_opts -> ARRAY FROM base_type FROM id_or_number .

    ID              reduce using rule 18 (var_opts -> ARRAY FROM base_type FROM id_or_number .)


state 123

    (42) function_params_rec -> , function_params .

    )               reduce using rule 42 (function_params_rec -> , function_params .)


state 124

    (33) function -> function_declaration ( function_params ) { function_variables_opt . function_stm function_return }
    (43) function_stm -> . empty
    (44) function_stm -> . statement function_stm
    (116) empty -> .
    (9) statement -> . assignation
    (10) statement -> . condition
    (11) statement -> . iteration
    (12) statement -> . function_call
    (22) assignation -> . ID = expression
    (23) condition -> . cond_if cond_else_if_opt cond_else_opt
    (30) iteration -> . iteration_opts ) DO block
    (47) function_call -> . read
    (48) function_call -> . print
    (49) function_call -> . local_function
    (50) function_call -> . list_push
    (51) function_call -> . list_pop
    (24) cond_if -> . IF HAPPENS ( expression ) DO block
    (31) iteration_opts -> . WHILE HAPPENS ( expression
    (32) iteration_opts -> . FOR ( id_or_number
    (52) read -> . READ ( base_type ID )
    (53) print -> . PRINT ( expr_params )
    (58) local_function -> . ID ( expr_params )
    (59) list_push -> . PUSH TO ID ( expression )
    (60) list_pop -> . POP LAST FROM ID ( )

    RETURN          reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    ID              shift and go to state 55
    IF              shift and go to state 57
    WHILE           shift and go to state 41
    FOR             shift and go to state 51
    READ            shift and go to state 38
    PRINT           shift and go to state 40
    PUSH            shift and go to state 54
    POP             shift and go to state 44

    function_call                  shift and go to state 39
    list_pop                       shift and go to state 42
    local_function                 shift and go to state 45
    list_push                      shift and go to state 50
    print                          shift and go to state 47
    empty                          shift and go to state 178
    iteration_opts                 shift and go to state 49
    statement                      shift and go to state 177
    read                           shift and go to state 52
    cond_if                        shift and go to state 53
    condition                      shift and go to state 56
    assignation                    shift and go to state 58
    iteration                      shift and go to state 59
    function_stm                   shift and go to state 179

state 125

    (35) function_variables_opt -> empty .

    ID              reduce using rule 35 (function_variables_opt -> empty .)
    IF              reduce using rule 35 (function_variables_opt -> empty .)
    WHILE           reduce using rule 35 (function_variables_opt -> empty .)
    FOR             reduce using rule 35 (function_variables_opt -> empty .)
    READ            reduce using rule 35 (function_variables_opt -> empty .)
    PRINT           reduce using rule 35 (function_variables_opt -> empty .)
    PUSH            reduce using rule 35 (function_variables_opt -> empty .)
    POP             reduce using rule 35 (function_variables_opt -> empty .)
    RETURN          reduce using rule 35 (function_variables_opt -> empty .)
    }               reduce using rule 35 (function_variables_opt -> empty .)


state 126

    (36) function_variables_opt -> variables .

    ID              reduce using rule 36 (function_variables_opt -> variables .)
    IF              reduce using rule 36 (function_variables_opt -> variables .)
    WHILE           reduce using rule 36 (function_variables_opt -> variables .)
    FOR             reduce using rule 36 (function_variables_opt -> variables .)
    READ            reduce using rule 36 (function_variables_opt -> variables .)
    PRINT           reduce using rule 36 (function_variables_opt -> variables .)
    PUSH            reduce using rule 36 (function_variables_opt -> variables .)
    POP             reduce using rule 36 (function_variables_opt -> variables .)
    RETURN          reduce using rule 36 (function_variables_opt -> variables .)
    }               reduce using rule 36 (function_variables_opt -> variables .)


state 127

    (52) read -> READ ( base_type ID . )

    )               shift and go to state 180


state 128

    (74) exp_multiply_opt -> multiply_operators . exp_multiply
    (72) exp_multiply -> . term exp_multiply_opt
    (75) term -> . term_nested
    (76) term -> . term_body
    (77) term_nested -> . ( expression )
    (78) term_body -> . term_body_opt term_body_types
    (79) term_body_opt -> . empty
    (80) term_body_opt -> . +
    (81) term_body_opt -> . -
    (116) empty -> .

    (               shift and go to state 96
    +               shift and go to state 104
    -               shift and go to state 100
    ID              reduce using rule 116 (empty -> .)
    CONST_I         reduce using rule 116 (empty -> .)
    CONST_F         reduce using rule 116 (empty -> .)
    CONST_S         reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    RANDOM          reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)

    term                           shift and go to state 94
    exp_multiply                   shift and go to state 181
    term_body_opt                  shift and go to state 99
    term_nested                    shift and go to state 98
    term_body                      shift and go to state 93
    empty                          shift and go to state 119

state 129

    (72) exp_multiply -> term exp_multiply_opt .

    +               reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    -               reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    <               reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    >               reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    EQ              reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    NEQ             reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    GTE             reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    LTE             reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    AND             reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    OR              reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    ,               reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    )               reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    ID              reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    IF              reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    WHILE           reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    FOR             reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    READ            reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    PRINT           reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    PUSH            reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    POP             reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    }               reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)
    RETURN          reduce using rule 72 (exp_multiply -> term exp_multiply_opt .)


state 130

    (112) multiply_operators -> * .

    (               reduce using rule 112 (multiply_operators -> * .)
    +               reduce using rule 112 (multiply_operators -> * .)
    -               reduce using rule 112 (multiply_operators -> * .)
    ID              reduce using rule 112 (multiply_operators -> * .)
    CONST_I         reduce using rule 112 (multiply_operators -> * .)
    CONST_F         reduce using rule 112 (multiply_operators -> * .)
    CONST_S         reduce using rule 112 (multiply_operators -> * .)
    TRUE            reduce using rule 112 (multiply_operators -> * .)
    FALSE           reduce using rule 112 (multiply_operators -> * .)
    RANDOM          reduce using rule 112 (multiply_operators -> * .)
    READ            reduce using rule 112 (multiply_operators -> * .)
    PRINT           reduce using rule 112 (multiply_operators -> * .)
    PUSH            reduce using rule 112 (multiply_operators -> * .)
    POP             reduce using rule 112 (multiply_operators -> * .)


state 131

    (113) multiply_operators -> / .

    (               reduce using rule 113 (multiply_operators -> / .)
    +               reduce using rule 113 (multiply_operators -> / .)
    -               reduce using rule 113 (multiply_operators -> / .)
    ID              reduce using rule 113 (multiply_operators -> / .)
    CONST_I         reduce using rule 113 (multiply_operators -> / .)
    CONST_F         reduce using rule 113 (multiply_operators -> / .)
    CONST_S         reduce using rule 113 (multiply_operators -> / .)
    TRUE            reduce using rule 113 (multiply_operators -> / .)
    FALSE           reduce using rule 113 (multiply_operators -> / .)
    RANDOM          reduce using rule 113 (multiply_operators -> / .)
    READ            reduce using rule 113 (multiply_operators -> / .)
    PRINT           reduce using rule 113 (multiply_operators -> / .)
    PUSH            reduce using rule 113 (multiply_operators -> / .)
    POP             reduce using rule 113 (multiply_operators -> / .)


state 132

    (73) exp_multiply_opt -> empty .

    +               reduce using rule 73 (exp_multiply_opt -> empty .)
    -               reduce using rule 73 (exp_multiply_opt -> empty .)
    <               reduce using rule 73 (exp_multiply_opt -> empty .)
    >               reduce using rule 73 (exp_multiply_opt -> empty .)
    EQ              reduce using rule 73 (exp_multiply_opt -> empty .)
    NEQ             reduce using rule 73 (exp_multiply_opt -> empty .)
    GTE             reduce using rule 73 (exp_multiply_opt -> empty .)
    LTE             reduce using rule 73 (exp_multiply_opt -> empty .)
    AND             reduce using rule 73 (exp_multiply_opt -> empty .)
    OR              reduce using rule 73 (exp_multiply_opt -> empty .)
    ,               reduce using rule 73 (exp_multiply_opt -> empty .)
    )               reduce using rule 73 (exp_multiply_opt -> empty .)
    ID              reduce using rule 73 (exp_multiply_opt -> empty .)
    IF              reduce using rule 73 (exp_multiply_opt -> empty .)
    WHILE           reduce using rule 73 (exp_multiply_opt -> empty .)
    FOR             reduce using rule 73 (exp_multiply_opt -> empty .)
    READ            reduce using rule 73 (exp_multiply_opt -> empty .)
    PRINT           reduce using rule 73 (exp_multiply_opt -> empty .)
    PUSH            reduce using rule 73 (exp_multiply_opt -> empty .)
    POP             reduce using rule 73 (exp_multiply_opt -> empty .)
    }               reduce using rule 73 (exp_multiply_opt -> empty .)
    RETURN          reduce using rule 73 (exp_multiply_opt -> empty .)


state 133

    (104) logic_operators -> AND .

    (               reduce using rule 104 (logic_operators -> AND .)
    +               reduce using rule 104 (logic_operators -> AND .)
    -               reduce using rule 104 (logic_operators -> AND .)
    ID              reduce using rule 104 (logic_operators -> AND .)
    CONST_I         reduce using rule 104 (logic_operators -> AND .)
    CONST_F         reduce using rule 104 (logic_operators -> AND .)
    CONST_S         reduce using rule 104 (logic_operators -> AND .)
    TRUE            reduce using rule 104 (logic_operators -> AND .)
    FALSE           reduce using rule 104 (logic_operators -> AND .)
    RANDOM          reduce using rule 104 (logic_operators -> AND .)
    READ            reduce using rule 104 (logic_operators -> AND .)
    PRINT           reduce using rule 104 (logic_operators -> AND .)
    PUSH            reduce using rule 104 (logic_operators -> AND .)
    POP             reduce using rule 104 (logic_operators -> AND .)


state 134

    (65) expression_opt -> logic_operators . expression
    (63) expression -> . exp_comp expression_opt
    (66) exp_comp -> . exp_add exp_comp_opt
    (69) exp_add -> . exp_multiply exp_add_opt
    (72) exp_multiply -> . term exp_multiply_opt
    (75) term -> . term_nested
    (76) term -> . term_body
    (77) term_nested -> . ( expression )
    (78) term_body -> . term_body_opt term_body_types
    (79) term_body_opt -> . empty
    (80) term_body_opt -> . +
    (81) term_body_opt -> . -
    (116) empty -> .

    (               shift and go to state 96
    +               shift and go to state 104
    -               shift and go to state 100
    ID              reduce using rule 116 (empty -> .)
    CONST_I         reduce using rule 116 (empty -> .)
    CONST_F         reduce using rule 116 (empty -> .)
    CONST_S         reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    RANDOM          reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)

    term_body                      shift and go to state 93
    term                           shift and go to state 94
    exp_comp                       shift and go to state 95
    exp_multiply                   shift and go to state 97
    term_nested                    shift and go to state 98
    term_body_opt                  shift and go to state 99
    exp_add                        shift and go to state 102
    expression                     shift and go to state 182
    empty                          shift and go to state 119

state 135

    (63) expression -> exp_comp expression_opt .

    )               reduce using rule 63 (expression -> exp_comp expression_opt .)
    ,               reduce using rule 63 (expression -> exp_comp expression_opt .)
    ID              reduce using rule 63 (expression -> exp_comp expression_opt .)
    IF              reduce using rule 63 (expression -> exp_comp expression_opt .)
    WHILE           reduce using rule 63 (expression -> exp_comp expression_opt .)
    FOR             reduce using rule 63 (expression -> exp_comp expression_opt .)
    READ            reduce using rule 63 (expression -> exp_comp expression_opt .)
    PRINT           reduce using rule 63 (expression -> exp_comp expression_opt .)
    PUSH            reduce using rule 63 (expression -> exp_comp expression_opt .)
    POP             reduce using rule 63 (expression -> exp_comp expression_opt .)
    }               reduce using rule 63 (expression -> exp_comp expression_opt .)
    RETURN          reduce using rule 63 (expression -> exp_comp expression_opt .)


state 136

    (105) logic_operators -> OR .

    (               reduce using rule 105 (logic_operators -> OR .)
    +               reduce using rule 105 (logic_operators -> OR .)
    -               reduce using rule 105 (logic_operators -> OR .)
    ID              reduce using rule 105 (logic_operators -> OR .)
    CONST_I         reduce using rule 105 (logic_operators -> OR .)
    CONST_F         reduce using rule 105 (logic_operators -> OR .)
    CONST_S         reduce using rule 105 (logic_operators -> OR .)
    TRUE            reduce using rule 105 (logic_operators -> OR .)
    FALSE           reduce using rule 105 (logic_operators -> OR .)
    RANDOM          reduce using rule 105 (logic_operators -> OR .)
    READ            reduce using rule 105 (logic_operators -> OR .)
    PRINT           reduce using rule 105 (logic_operators -> OR .)
    PUSH            reduce using rule 105 (logic_operators -> OR .)
    POP             reduce using rule 105 (logic_operators -> OR .)


state 137

    (64) expression_opt -> empty .

    ,               reduce using rule 64 (expression_opt -> empty .)
    )               reduce using rule 64 (expression_opt -> empty .)
    ID              reduce using rule 64 (expression_opt -> empty .)
    IF              reduce using rule 64 (expression_opt -> empty .)
    WHILE           reduce using rule 64 (expression_opt -> empty .)
    FOR             reduce using rule 64 (expression_opt -> empty .)
    READ            reduce using rule 64 (expression_opt -> empty .)
    PRINT           reduce using rule 64 (expression_opt -> empty .)
    PUSH            reduce using rule 64 (expression_opt -> empty .)
    POP             reduce using rule 64 (expression_opt -> empty .)
    }               reduce using rule 64 (expression_opt -> empty .)
    RETURN          reduce using rule 64 (expression_opt -> empty .)


state 138

    (77) term_nested -> ( expression . )

    )               shift and go to state 183


state 139

    (115) add_operators -> - .

    (               reduce using rule 115 (add_operators -> - .)
    +               reduce using rule 115 (add_operators -> - .)
    -               reduce using rule 115 (add_operators -> - .)
    ID              reduce using rule 115 (add_operators -> - .)
    CONST_I         reduce using rule 115 (add_operators -> - .)
    CONST_F         reduce using rule 115 (add_operators -> - .)
    CONST_S         reduce using rule 115 (add_operators -> - .)
    TRUE            reduce using rule 115 (add_operators -> - .)
    FALSE           reduce using rule 115 (add_operators -> - .)
    RANDOM          reduce using rule 115 (add_operators -> - .)
    READ            reduce using rule 115 (add_operators -> - .)
    PRINT           reduce using rule 115 (add_operators -> - .)
    PUSH            reduce using rule 115 (add_operators -> - .)
    POP             reduce using rule 115 (add_operators -> - .)


state 140

    (71) exp_add_opt -> add_operators . exp_add
    (69) exp_add -> . exp_multiply exp_add_opt
    (72) exp_multiply -> . term exp_multiply_opt
    (75) term -> . term_nested
    (76) term -> . term_body
    (77) term_nested -> . ( expression )
    (78) term_body -> . term_body_opt term_body_types
    (79) term_body_opt -> . empty
    (80) term_body_opt -> . +
    (81) term_body_opt -> . -
    (116) empty -> .

    (               shift and go to state 96
    +               shift and go to state 104
    -               shift and go to state 100
    ID              reduce using rule 116 (empty -> .)
    CONST_I         reduce using rule 116 (empty -> .)
    CONST_F         reduce using rule 116 (empty -> .)
    CONST_S         reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    RANDOM          reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)

    term                           shift and go to state 94
    term_body                      shift and go to state 93
    term_body_opt                  shift and go to state 99
    exp_add                        shift and go to state 184
    term_nested                    shift and go to state 98
    exp_multiply                   shift and go to state 97
    empty                          shift and go to state 119

state 141

    (69) exp_add -> exp_multiply exp_add_opt .

    <               reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    >               reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    EQ              reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    NEQ             reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    GTE             reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    LTE             reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    AND             reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    OR              reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    )               reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    }               reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    ,               reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    ID              reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    IF              reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    WHILE           reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    FOR             reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    READ            reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    PRINT           reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    PUSH            reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    POP             reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)
    RETURN          reduce using rule 69 (exp_add -> exp_multiply exp_add_opt .)


state 142

    (114) add_operators -> + .

    (               reduce using rule 114 (add_operators -> + .)
    +               reduce using rule 114 (add_operators -> + .)
    -               reduce using rule 114 (add_operators -> + .)
    ID              reduce using rule 114 (add_operators -> + .)
    CONST_I         reduce using rule 114 (add_operators -> + .)
    CONST_F         reduce using rule 114 (add_operators -> + .)
    CONST_S         reduce using rule 114 (add_operators -> + .)
    TRUE            reduce using rule 114 (add_operators -> + .)
    FALSE           reduce using rule 114 (add_operators -> + .)
    RANDOM          reduce using rule 114 (add_operators -> + .)
    READ            reduce using rule 114 (add_operators -> + .)
    PRINT           reduce using rule 114 (add_operators -> + .)
    PUSH            reduce using rule 114 (add_operators -> + .)
    POP             reduce using rule 114 (add_operators -> + .)


state 143

    (70) exp_add_opt -> empty .

    <               reduce using rule 70 (exp_add_opt -> empty .)
    >               reduce using rule 70 (exp_add_opt -> empty .)
    EQ              reduce using rule 70 (exp_add_opt -> empty .)
    NEQ             reduce using rule 70 (exp_add_opt -> empty .)
    GTE             reduce using rule 70 (exp_add_opt -> empty .)
    LTE             reduce using rule 70 (exp_add_opt -> empty .)
    AND             reduce using rule 70 (exp_add_opt -> empty .)
    OR              reduce using rule 70 (exp_add_opt -> empty .)
    ,               reduce using rule 70 (exp_add_opt -> empty .)
    )               reduce using rule 70 (exp_add_opt -> empty .)
    ID              reduce using rule 70 (exp_add_opt -> empty .)
    IF              reduce using rule 70 (exp_add_opt -> empty .)
    WHILE           reduce using rule 70 (exp_add_opt -> empty .)
    FOR             reduce using rule 70 (exp_add_opt -> empty .)
    READ            reduce using rule 70 (exp_add_opt -> empty .)
    PRINT           reduce using rule 70 (exp_add_opt -> empty .)
    PUSH            reduce using rule 70 (exp_add_opt -> empty .)
    POP             reduce using rule 70 (exp_add_opt -> empty .)
    }               reduce using rule 70 (exp_add_opt -> empty .)
    RETURN          reduce using rule 70 (exp_add_opt -> empty .)


state 144

    (86) term_body_types_rest -> CONST_S . term_string_add_stk
    (94) term_string_add_stk -> . empty
    (116) empty -> .

    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    +               reduce using rule 116 (empty -> .)
    -               reduce using rule 116 (empty -> .)
    <               reduce using rule 116 (empty -> .)
    >               reduce using rule 116 (empty -> .)
    EQ              reduce using rule 116 (empty -> .)
    NEQ             reduce using rule 116 (empty -> .)
    GTE             reduce using rule 116 (empty -> .)
    LTE             reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

    term_string_add_stk            shift and go to state 185
    empty                          shift and go to state 186

state 145

    (89) term_body_types_rest -> random .

    *               reduce using rule 89 (term_body_types_rest -> random .)
    /               reduce using rule 89 (term_body_types_rest -> random .)
    +               reduce using rule 89 (term_body_types_rest -> random .)
    -               reduce using rule 89 (term_body_types_rest -> random .)
    <               reduce using rule 89 (term_body_types_rest -> random .)
    >               reduce using rule 89 (term_body_types_rest -> random .)
    EQ              reduce using rule 89 (term_body_types_rest -> random .)
    NEQ             reduce using rule 89 (term_body_types_rest -> random .)
    GTE             reduce using rule 89 (term_body_types_rest -> random .)
    LTE             reduce using rule 89 (term_body_types_rest -> random .)
    AND             reduce using rule 89 (term_body_types_rest -> random .)
    OR              reduce using rule 89 (term_body_types_rest -> random .)
    ,               reduce using rule 89 (term_body_types_rest -> random .)
    )               reduce using rule 89 (term_body_types_rest -> random .)
    ID              reduce using rule 89 (term_body_types_rest -> random .)
    IF              reduce using rule 89 (term_body_types_rest -> random .)
    WHILE           reduce using rule 89 (term_body_types_rest -> random .)
    FOR             reduce using rule 89 (term_body_types_rest -> random .)
    READ            reduce using rule 89 (term_body_types_rest -> random .)
    PRINT           reduce using rule 89 (term_body_types_rest -> random .)
    PUSH            reduce using rule 89 (term_body_types_rest -> random .)
    POP             reduce using rule 89 (term_body_types_rest -> random .)
    }               reduce using rule 89 (term_body_types_rest -> random .)
    RETURN          reduce using rule 89 (term_body_types_rest -> random .)


state 146

    (91) term_body_types_rest -> function_call .

    *               reduce using rule 91 (term_body_types_rest -> function_call .)
    /               reduce using rule 91 (term_body_types_rest -> function_call .)
    +               reduce using rule 91 (term_body_types_rest -> function_call .)
    -               reduce using rule 91 (term_body_types_rest -> function_call .)
    <               reduce using rule 91 (term_body_types_rest -> function_call .)
    >               reduce using rule 91 (term_body_types_rest -> function_call .)
    EQ              reduce using rule 91 (term_body_types_rest -> function_call .)
    NEQ             reduce using rule 91 (term_body_types_rest -> function_call .)
    GTE             reduce using rule 91 (term_body_types_rest -> function_call .)
    LTE             reduce using rule 91 (term_body_types_rest -> function_call .)
    AND             reduce using rule 91 (term_body_types_rest -> function_call .)
    OR              reduce using rule 91 (term_body_types_rest -> function_call .)
    ,               reduce using rule 91 (term_body_types_rest -> function_call .)
    )               reduce using rule 91 (term_body_types_rest -> function_call .)
    ID              reduce using rule 91 (term_body_types_rest -> function_call .)
    IF              reduce using rule 91 (term_body_types_rest -> function_call .)
    WHILE           reduce using rule 91 (term_body_types_rest -> function_call .)
    FOR             reduce using rule 91 (term_body_types_rest -> function_call .)
    READ            reduce using rule 91 (term_body_types_rest -> function_call .)
    PRINT           reduce using rule 91 (term_body_types_rest -> function_call .)
    PUSH            reduce using rule 91 (term_body_types_rest -> function_call .)
    POP             reduce using rule 91 (term_body_types_rest -> function_call .)
    }               reduce using rule 91 (term_body_types_rest -> function_call .)
    RETURN          reduce using rule 91 (term_body_types_rest -> function_call .)


state 147

    (85) term_body_types_rest -> CONST_F . term_float_add_stk
    (93) term_float_add_stk -> . empty
    (116) empty -> .

    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    +               reduce using rule 116 (empty -> .)
    -               reduce using rule 116 (empty -> .)
    <               reduce using rule 116 (empty -> .)
    >               reduce using rule 116 (empty -> .)
    EQ              reduce using rule 116 (empty -> .)
    NEQ             reduce using rule 116 (empty -> .)
    GTE             reduce using rule 116 (empty -> .)
    LTE             reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

    empty                          shift and go to state 187
    term_float_add_stk             shift and go to state 188

state 148

    (84) term_body_types_rest -> CONST_I . term_int_add_stk
    (92) term_int_add_stk -> . empty
    (116) empty -> .

    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    +               reduce using rule 116 (empty -> .)
    -               reduce using rule 116 (empty -> .)
    <               reduce using rule 116 (empty -> .)
    >               reduce using rule 116 (empty -> .)
    EQ              reduce using rule 116 (empty -> .)
    NEQ             reduce using rule 116 (empty -> .)
    GTE             reduce using rule 116 (empty -> .)
    LTE             reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

    term_int_add_stk               shift and go to state 189
    empty                          shift and go to state 190

state 149

    (87) term_body_types_rest -> TRUE . term_bool_add_stk
    (95) term_bool_add_stk -> . empty
    (116) empty -> .

    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    +               reduce using rule 116 (empty -> .)
    -               reduce using rule 116 (empty -> .)
    <               reduce using rule 116 (empty -> .)
    >               reduce using rule 116 (empty -> .)
    EQ              reduce using rule 116 (empty -> .)
    NEQ             reduce using rule 116 (empty -> .)
    GTE             reduce using rule 116 (empty -> .)
    LTE             reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

    term_bool_add_stk              shift and go to state 191
    empty                          shift and go to state 192

state 150

    (78) term_body -> term_body_opt term_body_types .

    *               reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    /               reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    +               reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    -               reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    <               reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    >               reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    EQ              reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    NEQ             reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    GTE             reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    LTE             reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    AND             reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    OR              reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    ,               reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    )               reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    ID              reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    IF              reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    WHILE           reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    FOR             reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    READ            reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    PRINT           reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    PUSH            reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    POP             reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    }               reduce using rule 78 (term_body -> term_body_opt term_body_types .)
    RETURN          reduce using rule 78 (term_body -> term_body_opt term_body_types .)


state 151

    (62) random -> RANDOM . ( FROM CONST_I , TO CONST_I )

    (               shift and go to state 193


state 152

    (83) term_body_types -> term_body_types_rest .

    *               reduce using rule 83 (term_body_types -> term_body_types_rest .)
    /               reduce using rule 83 (term_body_types -> term_body_types_rest .)
    +               reduce using rule 83 (term_body_types -> term_body_types_rest .)
    -               reduce using rule 83 (term_body_types -> term_body_types_rest .)
    <               reduce using rule 83 (term_body_types -> term_body_types_rest .)
    >               reduce using rule 83 (term_body_types -> term_body_types_rest .)
    EQ              reduce using rule 83 (term_body_types -> term_body_types_rest .)
    NEQ             reduce using rule 83 (term_body_types -> term_body_types_rest .)
    GTE             reduce using rule 83 (term_body_types -> term_body_types_rest .)
    LTE             reduce using rule 83 (term_body_types -> term_body_types_rest .)
    AND             reduce using rule 83 (term_body_types -> term_body_types_rest .)
    OR              reduce using rule 83 (term_body_types -> term_body_types_rest .)
    ,               reduce using rule 83 (term_body_types -> term_body_types_rest .)
    )               reduce using rule 83 (term_body_types -> term_body_types_rest .)
    ID              reduce using rule 83 (term_body_types -> term_body_types_rest .)
    IF              reduce using rule 83 (term_body_types -> term_body_types_rest .)
    WHILE           reduce using rule 83 (term_body_types -> term_body_types_rest .)
    FOR             reduce using rule 83 (term_body_types -> term_body_types_rest .)
    READ            reduce using rule 83 (term_body_types -> term_body_types_rest .)
    PRINT           reduce using rule 83 (term_body_types -> term_body_types_rest .)
    PUSH            reduce using rule 83 (term_body_types -> term_body_types_rest .)
    POP             reduce using rule 83 (term_body_types -> term_body_types_rest .)
    }               reduce using rule 83 (term_body_types -> term_body_types_rest .)
    RETURN          reduce using rule 83 (term_body_types -> term_body_types_rest .)


state 153

    (82) term_body_types -> ID .
    (61) list_access -> ID . [ id_or_number ]
    (58) local_function -> ID . ( expr_params )

    *               reduce using rule 82 (term_body_types -> ID .)
    /               reduce using rule 82 (term_body_types -> ID .)
    +               reduce using rule 82 (term_body_types -> ID .)
    -               reduce using rule 82 (term_body_types -> ID .)
    <               reduce using rule 82 (term_body_types -> ID .)
    >               reduce using rule 82 (term_body_types -> ID .)
    EQ              reduce using rule 82 (term_body_types -> ID .)
    NEQ             reduce using rule 82 (term_body_types -> ID .)
    GTE             reduce using rule 82 (term_body_types -> ID .)
    LTE             reduce using rule 82 (term_body_types -> ID .)
    AND             reduce using rule 82 (term_body_types -> ID .)
    OR              reduce using rule 82 (term_body_types -> ID .)
    ,               reduce using rule 82 (term_body_types -> ID .)
    )               reduce using rule 82 (term_body_types -> ID .)
    ID              reduce using rule 82 (term_body_types -> ID .)
    IF              reduce using rule 82 (term_body_types -> ID .)
    WHILE           reduce using rule 82 (term_body_types -> ID .)
    FOR             reduce using rule 82 (term_body_types -> ID .)
    READ            reduce using rule 82 (term_body_types -> ID .)
    PRINT           reduce using rule 82 (term_body_types -> ID .)
    PUSH            reduce using rule 82 (term_body_types -> ID .)
    POP             reduce using rule 82 (term_body_types -> ID .)
    }               reduce using rule 82 (term_body_types -> ID .)
    RETURN          reduce using rule 82 (term_body_types -> ID .)
    [               shift and go to state 194
    (               shift and go to state 81


state 154

    (88) term_body_types_rest -> FALSE . term_bool_add_stk
    (95) term_bool_add_stk -> . empty
    (116) empty -> .

    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    +               reduce using rule 116 (empty -> .)
    -               reduce using rule 116 (empty -> .)
    <               reduce using rule 116 (empty -> .)
    >               reduce using rule 116 (empty -> .)
    EQ              reduce using rule 116 (empty -> .)
    NEQ             reduce using rule 116 (empty -> .)
    GTE             reduce using rule 116 (empty -> .)
    LTE             reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

    term_bool_add_stk              shift and go to state 195
    empty                          shift and go to state 192

state 155

    (90) term_body_types_rest -> list_access .

    *               reduce using rule 90 (term_body_types_rest -> list_access .)
    /               reduce using rule 90 (term_body_types_rest -> list_access .)
    +               reduce using rule 90 (term_body_types_rest -> list_access .)
    -               reduce using rule 90 (term_body_types_rest -> list_access .)
    <               reduce using rule 90 (term_body_types_rest -> list_access .)
    >               reduce using rule 90 (term_body_types_rest -> list_access .)
    EQ              reduce using rule 90 (term_body_types_rest -> list_access .)
    NEQ             reduce using rule 90 (term_body_types_rest -> list_access .)
    GTE             reduce using rule 90 (term_body_types_rest -> list_access .)
    LTE             reduce using rule 90 (term_body_types_rest -> list_access .)
    AND             reduce using rule 90 (term_body_types_rest -> list_access .)
    OR              reduce using rule 90 (term_body_types_rest -> list_access .)
    ,               reduce using rule 90 (term_body_types_rest -> list_access .)
    )               reduce using rule 90 (term_body_types_rest -> list_access .)
    ID              reduce using rule 90 (term_body_types_rest -> list_access .)
    IF              reduce using rule 90 (term_body_types_rest -> list_access .)
    WHILE           reduce using rule 90 (term_body_types_rest -> list_access .)
    FOR             reduce using rule 90 (term_body_types_rest -> list_access .)
    READ            reduce using rule 90 (term_body_types_rest -> list_access .)
    PRINT           reduce using rule 90 (term_body_types_rest -> list_access .)
    PUSH            reduce using rule 90 (term_body_types_rest -> list_access .)
    POP             reduce using rule 90 (term_body_types_rest -> list_access .)
    }               reduce using rule 90 (term_body_types_rest -> list_access .)
    RETURN          reduce using rule 90 (term_body_types_rest -> list_access .)


state 156

    (53) print -> PRINT ( expr_params ) .

    ID              reduce using rule 53 (print -> PRINT ( expr_params ) .)
    IF              reduce using rule 53 (print -> PRINT ( expr_params ) .)
    WHILE           reduce using rule 53 (print -> PRINT ( expr_params ) .)
    FOR             reduce using rule 53 (print -> PRINT ( expr_params ) .)
    READ            reduce using rule 53 (print -> PRINT ( expr_params ) .)
    PRINT           reduce using rule 53 (print -> PRINT ( expr_params ) .)
    PUSH            reduce using rule 53 (print -> PRINT ( expr_params ) .)
    POP             reduce using rule 53 (print -> PRINT ( expr_params ) .)
    RETURN          reduce using rule 53 (print -> PRINT ( expr_params ) .)
    }               reduce using rule 53 (print -> PRINT ( expr_params ) .)
    *               reduce using rule 53 (print -> PRINT ( expr_params ) .)
    /               reduce using rule 53 (print -> PRINT ( expr_params ) .)
    +               reduce using rule 53 (print -> PRINT ( expr_params ) .)
    -               reduce using rule 53 (print -> PRINT ( expr_params ) .)
    <               reduce using rule 53 (print -> PRINT ( expr_params ) .)
    >               reduce using rule 53 (print -> PRINT ( expr_params ) .)
    EQ              reduce using rule 53 (print -> PRINT ( expr_params ) .)
    NEQ             reduce using rule 53 (print -> PRINT ( expr_params ) .)
    GTE             reduce using rule 53 (print -> PRINT ( expr_params ) .)
    LTE             reduce using rule 53 (print -> PRINT ( expr_params ) .)
    AND             reduce using rule 53 (print -> PRINT ( expr_params ) .)
    OR              reduce using rule 53 (print -> PRINT ( expr_params ) .)
    ,               reduce using rule 53 (print -> PRINT ( expr_params ) .)
    )               reduce using rule 53 (print -> PRINT ( expr_params ) .)


state 157

    (109) comp_operators -> NEQ .

    (               reduce using rule 109 (comp_operators -> NEQ .)
    +               reduce using rule 109 (comp_operators -> NEQ .)
    -               reduce using rule 109 (comp_operators -> NEQ .)
    ID              reduce using rule 109 (comp_operators -> NEQ .)
    CONST_I         reduce using rule 109 (comp_operators -> NEQ .)
    CONST_F         reduce using rule 109 (comp_operators -> NEQ .)
    CONST_S         reduce using rule 109 (comp_operators -> NEQ .)
    TRUE            reduce using rule 109 (comp_operators -> NEQ .)
    FALSE           reduce using rule 109 (comp_operators -> NEQ .)
    RANDOM          reduce using rule 109 (comp_operators -> NEQ .)
    READ            reduce using rule 109 (comp_operators -> NEQ .)
    PRINT           reduce using rule 109 (comp_operators -> NEQ .)
    PUSH            reduce using rule 109 (comp_operators -> NEQ .)
    POP             reduce using rule 109 (comp_operators -> NEQ .)


state 158

    (111) comp_operators -> LTE .

    (               reduce using rule 111 (comp_operators -> LTE .)
    +               reduce using rule 111 (comp_operators -> LTE .)
    -               reduce using rule 111 (comp_operators -> LTE .)
    ID              reduce using rule 111 (comp_operators -> LTE .)
    CONST_I         reduce using rule 111 (comp_operators -> LTE .)
    CONST_F         reduce using rule 111 (comp_operators -> LTE .)
    CONST_S         reduce using rule 111 (comp_operators -> LTE .)
    TRUE            reduce using rule 111 (comp_operators -> LTE .)
    FALSE           reduce using rule 111 (comp_operators -> LTE .)
    RANDOM          reduce using rule 111 (comp_operators -> LTE .)
    READ            reduce using rule 111 (comp_operators -> LTE .)
    PRINT           reduce using rule 111 (comp_operators -> LTE .)
    PUSH            reduce using rule 111 (comp_operators -> LTE .)
    POP             reduce using rule 111 (comp_operators -> LTE .)


state 159

    (110) comp_operators -> GTE .

    (               reduce using rule 110 (comp_operators -> GTE .)
    +               reduce using rule 110 (comp_operators -> GTE .)
    -               reduce using rule 110 (comp_operators -> GTE .)
    ID              reduce using rule 110 (comp_operators -> GTE .)
    CONST_I         reduce using rule 110 (comp_operators -> GTE .)
    CONST_F         reduce using rule 110 (comp_operators -> GTE .)
    CONST_S         reduce using rule 110 (comp_operators -> GTE .)
    TRUE            reduce using rule 110 (comp_operators -> GTE .)
    FALSE           reduce using rule 110 (comp_operators -> GTE .)
    RANDOM          reduce using rule 110 (comp_operators -> GTE .)
    READ            reduce using rule 110 (comp_operators -> GTE .)
    PRINT           reduce using rule 110 (comp_operators -> GTE .)
    PUSH            reduce using rule 110 (comp_operators -> GTE .)
    POP             reduce using rule 110 (comp_operators -> GTE .)


state 160

    (66) exp_comp -> exp_add exp_comp_opt .

    AND             reduce using rule 66 (exp_comp -> exp_add exp_comp_opt .)
    OR              reduce using rule 66 (exp_comp -> exp_add exp_comp_opt .)
    ,               reduce using rule 66 (exp_comp -> exp_add exp_comp_opt .)
    )               reduce using rule 66 (exp_comp -> exp_add exp_comp_opt .)
    ID              reduce using rule 66 (exp_comp -> exp_add exp_comp_opt .)
    IF              reduce using rule 66 (exp_comp -> exp_add exp_comp_opt .)
    WHILE           reduce using rule 66 (exp_comp -> exp_add exp_comp_opt .)
    FOR             reduce using rule 66 (exp_comp -> exp_add exp_comp_opt .)
    READ            reduce using rule 66 (exp_comp -> exp_add exp_comp_opt .)
    PRINT           reduce using rule 66 (exp_comp -> exp_add exp_comp_opt .)
    PUSH            reduce using rule 66 (exp_comp -> exp_add exp_comp_opt .)
    POP             reduce using rule 66 (exp_comp -> exp_add exp_comp_opt .)
    }               reduce using rule 66 (exp_comp -> exp_add exp_comp_opt .)
    RETURN          reduce using rule 66 (exp_comp -> exp_add exp_comp_opt .)


state 161

    (107) comp_operators -> > .

    (               reduce using rule 107 (comp_operators -> > .)
    +               reduce using rule 107 (comp_operators -> > .)
    -               reduce using rule 107 (comp_operators -> > .)
    ID              reduce using rule 107 (comp_operators -> > .)
    CONST_I         reduce using rule 107 (comp_operators -> > .)
    CONST_F         reduce using rule 107 (comp_operators -> > .)
    CONST_S         reduce using rule 107 (comp_operators -> > .)
    TRUE            reduce using rule 107 (comp_operators -> > .)
    FALSE           reduce using rule 107 (comp_operators -> > .)
    RANDOM          reduce using rule 107 (comp_operators -> > .)
    READ            reduce using rule 107 (comp_operators -> > .)
    PRINT           reduce using rule 107 (comp_operators -> > .)
    PUSH            reduce using rule 107 (comp_operators -> > .)
    POP             reduce using rule 107 (comp_operators -> > .)


state 162

    (108) comp_operators -> EQ .

    (               reduce using rule 108 (comp_operators -> EQ .)
    +               reduce using rule 108 (comp_operators -> EQ .)
    -               reduce using rule 108 (comp_operators -> EQ .)
    ID              reduce using rule 108 (comp_operators -> EQ .)
    CONST_I         reduce using rule 108 (comp_operators -> EQ .)
    CONST_F         reduce using rule 108 (comp_operators -> EQ .)
    CONST_S         reduce using rule 108 (comp_operators -> EQ .)
    TRUE            reduce using rule 108 (comp_operators -> EQ .)
    FALSE           reduce using rule 108 (comp_operators -> EQ .)
    RANDOM          reduce using rule 108 (comp_operators -> EQ .)
    READ            reduce using rule 108 (comp_operators -> EQ .)
    PRINT           reduce using rule 108 (comp_operators -> EQ .)
    PUSH            reduce using rule 108 (comp_operators -> EQ .)
    POP             reduce using rule 108 (comp_operators -> EQ .)


state 163

    (106) comp_operators -> < .

    (               reduce using rule 106 (comp_operators -> < .)
    +               reduce using rule 106 (comp_operators -> < .)
    -               reduce using rule 106 (comp_operators -> < .)
    ID              reduce using rule 106 (comp_operators -> < .)
    CONST_I         reduce using rule 106 (comp_operators -> < .)
    CONST_F         reduce using rule 106 (comp_operators -> < .)
    CONST_S         reduce using rule 106 (comp_operators -> < .)
    TRUE            reduce using rule 106 (comp_operators -> < .)
    FALSE           reduce using rule 106 (comp_operators -> < .)
    RANDOM          reduce using rule 106 (comp_operators -> < .)
    READ            reduce using rule 106 (comp_operators -> < .)
    PRINT           reduce using rule 106 (comp_operators -> < .)
    PUSH            reduce using rule 106 (comp_operators -> < .)
    POP             reduce using rule 106 (comp_operators -> < .)


state 164

    (67) exp_comp_opt -> empty .

    AND             reduce using rule 67 (exp_comp_opt -> empty .)
    OR              reduce using rule 67 (exp_comp_opt -> empty .)
    ,               reduce using rule 67 (exp_comp_opt -> empty .)
    )               reduce using rule 67 (exp_comp_opt -> empty .)
    ID              reduce using rule 67 (exp_comp_opt -> empty .)
    IF              reduce using rule 67 (exp_comp_opt -> empty .)
    WHILE           reduce using rule 67 (exp_comp_opt -> empty .)
    FOR             reduce using rule 67 (exp_comp_opt -> empty .)
    READ            reduce using rule 67 (exp_comp_opt -> empty .)
    PRINT           reduce using rule 67 (exp_comp_opt -> empty .)
    PUSH            reduce using rule 67 (exp_comp_opt -> empty .)
    POP             reduce using rule 67 (exp_comp_opt -> empty .)
    }               reduce using rule 67 (exp_comp_opt -> empty .)
    RETURN          reduce using rule 67 (exp_comp_opt -> empty .)


state 165

    (68) exp_comp_opt -> comp_operators . exp_comp
    (66) exp_comp -> . exp_add exp_comp_opt
    (69) exp_add -> . exp_multiply exp_add_opt
    (72) exp_multiply -> . term exp_multiply_opt
    (75) term -> . term_nested
    (76) term -> . term_body
    (77) term_nested -> . ( expression )
    (78) term_body -> . term_body_opt term_body_types
    (79) term_body_opt -> . empty
    (80) term_body_opt -> . +
    (81) term_body_opt -> . -
    (116) empty -> .

    (               shift and go to state 96
    +               shift and go to state 104
    -               shift and go to state 100
    ID              reduce using rule 116 (empty -> .)
    CONST_I         reduce using rule 116 (empty -> .)
    CONST_F         reduce using rule 116 (empty -> .)
    CONST_S         reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    RANDOM          reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)

    term                           shift and go to state 94
    term_body                      shift and go to state 93
    term_nested                    shift and go to state 98
    term_body_opt                  shift and go to state 99
    exp_add                        shift and go to state 102
    exp_multiply                   shift and go to state 97
    empty                          shift and go to state 119
    exp_comp                       shift and go to state 196

state 166

    (56) expr_params_rec -> empty .

    )               reduce using rule 56 (expr_params_rec -> empty .)


state 167

    (55) expr_params -> expression expr_params_rec .

    )               reduce using rule 55 (expr_params -> expression expr_params_rec .)


state 168

    (57) expr_params_rec -> , . expr_params
    (54) expr_params -> . empty
    (55) expr_params -> . expression expr_params_rec
    (116) empty -> .
    (63) expression -> . exp_comp expression_opt
    (66) exp_comp -> . exp_add exp_comp_opt
    (69) exp_add -> . exp_multiply exp_add_opt
    (72) exp_multiply -> . term exp_multiply_opt
    (75) term -> . term_nested
    (76) term -> . term_body
    (77) term_nested -> . ( expression )
    (78) term_body -> . term_body_opt term_body_types
    (79) term_body_opt -> . empty
    (80) term_body_opt -> . +
    (81) term_body_opt -> . -

    )               reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    CONST_I         reduce using rule 116 (empty -> .)
    CONST_F         reduce using rule 116 (empty -> .)
    CONST_S         reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    RANDOM          reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)
    (               shift and go to state 96
    +               shift and go to state 104
    -               shift and go to state 100

    term_body                      shift and go to state 93
    term                           shift and go to state 94
    exp_comp                       shift and go to state 95
    exp_multiply                   shift and go to state 97
    term_nested                    shift and go to state 98
    term_body_opt                  shift and go to state 99
    expr_params                    shift and go to state 197
    empty                          shift and go to state 105
    exp_add                        shift and go to state 102
    expression                     shift and go to state 103

state 169

    (31) iteration_opts -> WHILE HAPPENS ( expression .

    )               reduce using rule 31 (iteration_opts -> WHILE HAPPENS ( expression .)


state 170

    (60) list_pop -> POP LAST FROM ID . ( )

    (               shift and go to state 198


state 171

    (30) iteration -> iteration_opts ) DO block .

    ID              reduce using rule 30 (iteration -> iteration_opts ) DO block .)
    IF              reduce using rule 30 (iteration -> iteration_opts ) DO block .)
    WHILE           reduce using rule 30 (iteration -> iteration_opts ) DO block .)
    FOR             reduce using rule 30 (iteration -> iteration_opts ) DO block .)
    READ            reduce using rule 30 (iteration -> iteration_opts ) DO block .)
    PRINT           reduce using rule 30 (iteration -> iteration_opts ) DO block .)
    PUSH            reduce using rule 30 (iteration -> iteration_opts ) DO block .)
    POP             reduce using rule 30 (iteration -> iteration_opts ) DO block .)
    RETURN          reduce using rule 30 (iteration -> iteration_opts ) DO block .)
    }               reduce using rule 30 (iteration -> iteration_opts ) DO block .)


state 172

    (29) cond_else_opt -> ELSE HAPPENS . block
    (6) block -> . { block_stm_opt }

    {               shift and go to state 28

    block                          shift and go to state 199

state 173

    (27) cond_else_if -> OR IF HAPPENS . ( expression ) DO block

    (               shift and go to state 200


state 174

    (59) list_push -> PUSH TO ID ( . expression )
    (63) expression -> . exp_comp expression_opt
    (66) exp_comp -> . exp_add exp_comp_opt
    (69) exp_add -> . exp_multiply exp_add_opt
    (72) exp_multiply -> . term exp_multiply_opt
    (75) term -> . term_nested
    (76) term -> . term_body
    (77) term_nested -> . ( expression )
    (78) term_body -> . term_body_opt term_body_types
    (79) term_body_opt -> . empty
    (80) term_body_opt -> . +
    (81) term_body_opt -> . -
    (116) empty -> .

    (               shift and go to state 96
    +               shift and go to state 104
    -               shift and go to state 100
    ID              reduce using rule 116 (empty -> .)
    CONST_I         reduce using rule 116 (empty -> .)
    CONST_F         reduce using rule 116 (empty -> .)
    CONST_S         reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    RANDOM          reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)

    term_body                      shift and go to state 93
    term                           shift and go to state 94
    exp_comp                       shift and go to state 95
    expression                     shift and go to state 201
    term_nested                    shift and go to state 98
    term_body_opt                  shift and go to state 99
    exp_add                        shift and go to state 102
    exp_multiply                   shift and go to state 97
    empty                          shift and go to state 119

state 175

    (58) local_function -> ID ( expr_params ) .

    ID              reduce using rule 58 (local_function -> ID ( expr_params ) .)
    IF              reduce using rule 58 (local_function -> ID ( expr_params ) .)
    WHILE           reduce using rule 58 (local_function -> ID ( expr_params ) .)
    FOR             reduce using rule 58 (local_function -> ID ( expr_params ) .)
    READ            reduce using rule 58 (local_function -> ID ( expr_params ) .)
    PRINT           reduce using rule 58 (local_function -> ID ( expr_params ) .)
    PUSH            reduce using rule 58 (local_function -> ID ( expr_params ) .)
    POP             reduce using rule 58 (local_function -> ID ( expr_params ) .)
    }               reduce using rule 58 (local_function -> ID ( expr_params ) .)
    *               reduce using rule 58 (local_function -> ID ( expr_params ) .)
    /               reduce using rule 58 (local_function -> ID ( expr_params ) .)
    +               reduce using rule 58 (local_function -> ID ( expr_params ) .)
    -               reduce using rule 58 (local_function -> ID ( expr_params ) .)
    <               reduce using rule 58 (local_function -> ID ( expr_params ) .)
    >               reduce using rule 58 (local_function -> ID ( expr_params ) .)
    EQ              reduce using rule 58 (local_function -> ID ( expr_params ) .)
    NEQ             reduce using rule 58 (local_function -> ID ( expr_params ) .)
    GTE             reduce using rule 58 (local_function -> ID ( expr_params ) .)
    LTE             reduce using rule 58 (local_function -> ID ( expr_params ) .)
    AND             reduce using rule 58 (local_function -> ID ( expr_params ) .)
    OR              reduce using rule 58 (local_function -> ID ( expr_params ) .)
    ,               reduce using rule 58 (local_function -> ID ( expr_params ) .)
    )               reduce using rule 58 (local_function -> ID ( expr_params ) .)
    RETURN          reduce using rule 58 (local_function -> ID ( expr_params ) .)


state 176

    (24) cond_if -> IF HAPPENS ( expression . ) DO block

    )               shift and go to state 202


state 177

    (44) function_stm -> statement . function_stm
    (43) function_stm -> . empty
    (44) function_stm -> . statement function_stm
    (116) empty -> .
    (9) statement -> . assignation
    (10) statement -> . condition
    (11) statement -> . iteration
    (12) statement -> . function_call
    (22) assignation -> . ID = expression
    (23) condition -> . cond_if cond_else_if_opt cond_else_opt
    (30) iteration -> . iteration_opts ) DO block
    (47) function_call -> . read
    (48) function_call -> . print
    (49) function_call -> . local_function
    (50) function_call -> . list_push
    (51) function_call -> . list_pop
    (24) cond_if -> . IF HAPPENS ( expression ) DO block
    (31) iteration_opts -> . WHILE HAPPENS ( expression
    (32) iteration_opts -> . FOR ( id_or_number
    (52) read -> . READ ( base_type ID )
    (53) print -> . PRINT ( expr_params )
    (58) local_function -> . ID ( expr_params )
    (59) list_push -> . PUSH TO ID ( expression )
    (60) list_pop -> . POP LAST FROM ID ( )

    RETURN          reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    ID              shift and go to state 55
    IF              shift and go to state 57
    WHILE           shift and go to state 41
    FOR             shift and go to state 51
    READ            shift and go to state 38
    PRINT           shift and go to state 40
    PUSH            shift and go to state 54
    POP             shift and go to state 44

    iteration_opts                 shift and go to state 49
    assignation                    shift and go to state 58
    read                           shift and go to state 52
    iteration                      shift and go to state 59
    cond_if                        shift and go to state 53
    function_call                  shift and go to state 39
    list_push                      shift and go to state 50
    list_pop                       shift and go to state 42
    local_function                 shift and go to state 45
    function_stm                   shift and go to state 203
    empty                          shift and go to state 178
    statement                      shift and go to state 177
    print                          shift and go to state 47
    condition                      shift and go to state 56

state 178

    (43) function_stm -> empty .

    RETURN          reduce using rule 43 (function_stm -> empty .)
    }               reduce using rule 43 (function_stm -> empty .)


state 179

    (33) function -> function_declaration ( function_params ) { function_variables_opt function_stm . function_return }
    (45) function_return -> . empty
    (46) function_return -> . RETURN expression
    (116) empty -> .

    RETURN          shift and go to state 204
    }               reduce using rule 116 (empty -> .)

    function_return                shift and go to state 206
    empty                          shift and go to state 205

state 180

    (52) read -> READ ( base_type ID ) .

    ID              reduce using rule 52 (read -> READ ( base_type ID ) .)
    IF              reduce using rule 52 (read -> READ ( base_type ID ) .)
    WHILE           reduce using rule 52 (read -> READ ( base_type ID ) .)
    FOR             reduce using rule 52 (read -> READ ( base_type ID ) .)
    READ            reduce using rule 52 (read -> READ ( base_type ID ) .)
    PRINT           reduce using rule 52 (read -> READ ( base_type ID ) .)
    PUSH            reduce using rule 52 (read -> READ ( base_type ID ) .)
    POP             reduce using rule 52 (read -> READ ( base_type ID ) .)
    }               reduce using rule 52 (read -> READ ( base_type ID ) .)
    RETURN          reduce using rule 52 (read -> READ ( base_type ID ) .)
    *               reduce using rule 52 (read -> READ ( base_type ID ) .)
    /               reduce using rule 52 (read -> READ ( base_type ID ) .)
    +               reduce using rule 52 (read -> READ ( base_type ID ) .)
    -               reduce using rule 52 (read -> READ ( base_type ID ) .)
    <               reduce using rule 52 (read -> READ ( base_type ID ) .)
    >               reduce using rule 52 (read -> READ ( base_type ID ) .)
    EQ              reduce using rule 52 (read -> READ ( base_type ID ) .)
    NEQ             reduce using rule 52 (read -> READ ( base_type ID ) .)
    GTE             reduce using rule 52 (read -> READ ( base_type ID ) .)
    LTE             reduce using rule 52 (read -> READ ( base_type ID ) .)
    AND             reduce using rule 52 (read -> READ ( base_type ID ) .)
    OR              reduce using rule 52 (read -> READ ( base_type ID ) .)
    ,               reduce using rule 52 (read -> READ ( base_type ID ) .)
    )               reduce using rule 52 (read -> READ ( base_type ID ) .)


state 181

    (74) exp_multiply_opt -> multiply_operators exp_multiply .

    +               reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    -               reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    <               reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    >               reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    EQ              reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    NEQ             reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    GTE             reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    LTE             reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    AND             reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    OR              reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    ,               reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    )               reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    ID              reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    IF              reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    WHILE           reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    FOR             reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    READ            reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    PRINT           reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    PUSH            reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    POP             reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    }               reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)
    RETURN          reduce using rule 74 (exp_multiply_opt -> multiply_operators exp_multiply .)


state 182

    (65) expression_opt -> logic_operators expression .

    ,               reduce using rule 65 (expression_opt -> logic_operators expression .)
    )               reduce using rule 65 (expression_opt -> logic_operators expression .)
    ID              reduce using rule 65 (expression_opt -> logic_operators expression .)
    IF              reduce using rule 65 (expression_opt -> logic_operators expression .)
    WHILE           reduce using rule 65 (expression_opt -> logic_operators expression .)
    FOR             reduce using rule 65 (expression_opt -> logic_operators expression .)
    READ            reduce using rule 65 (expression_opt -> logic_operators expression .)
    PRINT           reduce using rule 65 (expression_opt -> logic_operators expression .)
    PUSH            reduce using rule 65 (expression_opt -> logic_operators expression .)
    POP             reduce using rule 65 (expression_opt -> logic_operators expression .)
    }               reduce using rule 65 (expression_opt -> logic_operators expression .)
    RETURN          reduce using rule 65 (expression_opt -> logic_operators expression .)


state 183

    (77) term_nested -> ( expression ) .

    *               reduce using rule 77 (term_nested -> ( expression ) .)
    /               reduce using rule 77 (term_nested -> ( expression ) .)
    +               reduce using rule 77 (term_nested -> ( expression ) .)
    -               reduce using rule 77 (term_nested -> ( expression ) .)
    <               reduce using rule 77 (term_nested -> ( expression ) .)
    >               reduce using rule 77 (term_nested -> ( expression ) .)
    EQ              reduce using rule 77 (term_nested -> ( expression ) .)
    NEQ             reduce using rule 77 (term_nested -> ( expression ) .)
    GTE             reduce using rule 77 (term_nested -> ( expression ) .)
    LTE             reduce using rule 77 (term_nested -> ( expression ) .)
    AND             reduce using rule 77 (term_nested -> ( expression ) .)
    OR              reduce using rule 77 (term_nested -> ( expression ) .)
    )               reduce using rule 77 (term_nested -> ( expression ) .)
    ,               reduce using rule 77 (term_nested -> ( expression ) .)
    ID              reduce using rule 77 (term_nested -> ( expression ) .)
    IF              reduce using rule 77 (term_nested -> ( expression ) .)
    WHILE           reduce using rule 77 (term_nested -> ( expression ) .)
    FOR             reduce using rule 77 (term_nested -> ( expression ) .)
    READ            reduce using rule 77 (term_nested -> ( expression ) .)
    PRINT           reduce using rule 77 (term_nested -> ( expression ) .)
    PUSH            reduce using rule 77 (term_nested -> ( expression ) .)
    POP             reduce using rule 77 (term_nested -> ( expression ) .)
    }               reduce using rule 77 (term_nested -> ( expression ) .)
    RETURN          reduce using rule 77 (term_nested -> ( expression ) .)


state 184

    (71) exp_add_opt -> add_operators exp_add .

    <               reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    >               reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    EQ              reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    NEQ             reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    GTE             reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    LTE             reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    AND             reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    OR              reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    ,               reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    )               reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    ID              reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    IF              reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    WHILE           reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    FOR             reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    READ            reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    PRINT           reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    PUSH            reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    POP             reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    }               reduce using rule 71 (exp_add_opt -> add_operators exp_add .)
    RETURN          reduce using rule 71 (exp_add_opt -> add_operators exp_add .)


state 185

    (86) term_body_types_rest -> CONST_S term_string_add_stk .

    *               reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    /               reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    +               reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    -               reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    <               reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    >               reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    EQ              reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    NEQ             reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    GTE             reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    LTE             reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    AND             reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    OR              reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    ,               reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    )               reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    ID              reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    IF              reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    WHILE           reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    FOR             reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    READ            reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    PRINT           reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    PUSH            reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    POP             reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    }               reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)
    RETURN          reduce using rule 86 (term_body_types_rest -> CONST_S term_string_add_stk .)


state 186

    (94) term_string_add_stk -> empty .

    *               reduce using rule 94 (term_string_add_stk -> empty .)
    /               reduce using rule 94 (term_string_add_stk -> empty .)
    +               reduce using rule 94 (term_string_add_stk -> empty .)
    -               reduce using rule 94 (term_string_add_stk -> empty .)
    <               reduce using rule 94 (term_string_add_stk -> empty .)
    >               reduce using rule 94 (term_string_add_stk -> empty .)
    EQ              reduce using rule 94 (term_string_add_stk -> empty .)
    NEQ             reduce using rule 94 (term_string_add_stk -> empty .)
    GTE             reduce using rule 94 (term_string_add_stk -> empty .)
    LTE             reduce using rule 94 (term_string_add_stk -> empty .)
    AND             reduce using rule 94 (term_string_add_stk -> empty .)
    OR              reduce using rule 94 (term_string_add_stk -> empty .)
    ,               reduce using rule 94 (term_string_add_stk -> empty .)
    )               reduce using rule 94 (term_string_add_stk -> empty .)
    ID              reduce using rule 94 (term_string_add_stk -> empty .)
    IF              reduce using rule 94 (term_string_add_stk -> empty .)
    WHILE           reduce using rule 94 (term_string_add_stk -> empty .)
    FOR             reduce using rule 94 (term_string_add_stk -> empty .)
    READ            reduce using rule 94 (term_string_add_stk -> empty .)
    PRINT           reduce using rule 94 (term_string_add_stk -> empty .)
    PUSH            reduce using rule 94 (term_string_add_stk -> empty .)
    POP             reduce using rule 94 (term_string_add_stk -> empty .)
    }               reduce using rule 94 (term_string_add_stk -> empty .)
    RETURN          reduce using rule 94 (term_string_add_stk -> empty .)


state 187

    (93) term_float_add_stk -> empty .

    *               reduce using rule 93 (term_float_add_stk -> empty .)
    /               reduce using rule 93 (term_float_add_stk -> empty .)
    +               reduce using rule 93 (term_float_add_stk -> empty .)
    -               reduce using rule 93 (term_float_add_stk -> empty .)
    <               reduce using rule 93 (term_float_add_stk -> empty .)
    >               reduce using rule 93 (term_float_add_stk -> empty .)
    EQ              reduce using rule 93 (term_float_add_stk -> empty .)
    NEQ             reduce using rule 93 (term_float_add_stk -> empty .)
    GTE             reduce using rule 93 (term_float_add_stk -> empty .)
    LTE             reduce using rule 93 (term_float_add_stk -> empty .)
    AND             reduce using rule 93 (term_float_add_stk -> empty .)
    OR              reduce using rule 93 (term_float_add_stk -> empty .)
    ,               reduce using rule 93 (term_float_add_stk -> empty .)
    )               reduce using rule 93 (term_float_add_stk -> empty .)
    ID              reduce using rule 93 (term_float_add_stk -> empty .)
    IF              reduce using rule 93 (term_float_add_stk -> empty .)
    WHILE           reduce using rule 93 (term_float_add_stk -> empty .)
    FOR             reduce using rule 93 (term_float_add_stk -> empty .)
    READ            reduce using rule 93 (term_float_add_stk -> empty .)
    PRINT           reduce using rule 93 (term_float_add_stk -> empty .)
    PUSH            reduce using rule 93 (term_float_add_stk -> empty .)
    POP             reduce using rule 93 (term_float_add_stk -> empty .)
    }               reduce using rule 93 (term_float_add_stk -> empty .)
    RETURN          reduce using rule 93 (term_float_add_stk -> empty .)


state 188

    (85) term_body_types_rest -> CONST_F term_float_add_stk .

    *               reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    /               reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    +               reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    -               reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    <               reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    >               reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    EQ              reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    NEQ             reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    GTE             reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    LTE             reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    AND             reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    OR              reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    ,               reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    )               reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    ID              reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    IF              reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    WHILE           reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    FOR             reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    READ            reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    PRINT           reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    PUSH            reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    POP             reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    }               reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)
    RETURN          reduce using rule 85 (term_body_types_rest -> CONST_F term_float_add_stk .)


state 189

    (84) term_body_types_rest -> CONST_I term_int_add_stk .

    *               reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    /               reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    +               reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    -               reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    <               reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    >               reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    EQ              reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    NEQ             reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    GTE             reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    LTE             reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    AND             reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    OR              reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    ,               reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    )               reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    ID              reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    IF              reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    WHILE           reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    FOR             reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    READ            reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    PRINT           reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    PUSH            reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    POP             reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    }               reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)
    RETURN          reduce using rule 84 (term_body_types_rest -> CONST_I term_int_add_stk .)


state 190

    (92) term_int_add_stk -> empty .

    *               reduce using rule 92 (term_int_add_stk -> empty .)
    /               reduce using rule 92 (term_int_add_stk -> empty .)
    +               reduce using rule 92 (term_int_add_stk -> empty .)
    -               reduce using rule 92 (term_int_add_stk -> empty .)
    <               reduce using rule 92 (term_int_add_stk -> empty .)
    >               reduce using rule 92 (term_int_add_stk -> empty .)
    EQ              reduce using rule 92 (term_int_add_stk -> empty .)
    NEQ             reduce using rule 92 (term_int_add_stk -> empty .)
    GTE             reduce using rule 92 (term_int_add_stk -> empty .)
    LTE             reduce using rule 92 (term_int_add_stk -> empty .)
    AND             reduce using rule 92 (term_int_add_stk -> empty .)
    OR              reduce using rule 92 (term_int_add_stk -> empty .)
    ,               reduce using rule 92 (term_int_add_stk -> empty .)
    )               reduce using rule 92 (term_int_add_stk -> empty .)
    ID              reduce using rule 92 (term_int_add_stk -> empty .)
    IF              reduce using rule 92 (term_int_add_stk -> empty .)
    WHILE           reduce using rule 92 (term_int_add_stk -> empty .)
    FOR             reduce using rule 92 (term_int_add_stk -> empty .)
    READ            reduce using rule 92 (term_int_add_stk -> empty .)
    PRINT           reduce using rule 92 (term_int_add_stk -> empty .)
    PUSH            reduce using rule 92 (term_int_add_stk -> empty .)
    POP             reduce using rule 92 (term_int_add_stk -> empty .)
    }               reduce using rule 92 (term_int_add_stk -> empty .)
    RETURN          reduce using rule 92 (term_int_add_stk -> empty .)


state 191

    (87) term_body_types_rest -> TRUE term_bool_add_stk .

    *               reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    /               reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    +               reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    -               reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    <               reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    >               reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    EQ              reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    NEQ             reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    GTE             reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    LTE             reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    AND             reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    OR              reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    ,               reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    )               reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    ID              reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    IF              reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    WHILE           reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    FOR             reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    READ            reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    PRINT           reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    PUSH            reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    POP             reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    }               reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)
    RETURN          reduce using rule 87 (term_body_types_rest -> TRUE term_bool_add_stk .)


state 192

    (95) term_bool_add_stk -> empty .

    *               reduce using rule 95 (term_bool_add_stk -> empty .)
    /               reduce using rule 95 (term_bool_add_stk -> empty .)
    +               reduce using rule 95 (term_bool_add_stk -> empty .)
    -               reduce using rule 95 (term_bool_add_stk -> empty .)
    <               reduce using rule 95 (term_bool_add_stk -> empty .)
    >               reduce using rule 95 (term_bool_add_stk -> empty .)
    EQ              reduce using rule 95 (term_bool_add_stk -> empty .)
    NEQ             reduce using rule 95 (term_bool_add_stk -> empty .)
    GTE             reduce using rule 95 (term_bool_add_stk -> empty .)
    LTE             reduce using rule 95 (term_bool_add_stk -> empty .)
    AND             reduce using rule 95 (term_bool_add_stk -> empty .)
    OR              reduce using rule 95 (term_bool_add_stk -> empty .)
    ,               reduce using rule 95 (term_bool_add_stk -> empty .)
    )               reduce using rule 95 (term_bool_add_stk -> empty .)
    ID              reduce using rule 95 (term_bool_add_stk -> empty .)
    IF              reduce using rule 95 (term_bool_add_stk -> empty .)
    WHILE           reduce using rule 95 (term_bool_add_stk -> empty .)
    FOR             reduce using rule 95 (term_bool_add_stk -> empty .)
    READ            reduce using rule 95 (term_bool_add_stk -> empty .)
    PRINT           reduce using rule 95 (term_bool_add_stk -> empty .)
    PUSH            reduce using rule 95 (term_bool_add_stk -> empty .)
    POP             reduce using rule 95 (term_bool_add_stk -> empty .)
    }               reduce using rule 95 (term_bool_add_stk -> empty .)
    RETURN          reduce using rule 95 (term_bool_add_stk -> empty .)


state 193

    (62) random -> RANDOM ( . FROM CONST_I , TO CONST_I )

    FROM            shift and go to state 207


state 194

    (61) list_access -> ID [ . id_or_number ]
    (98) id_or_number -> . ID
    (99) id_or_number -> . CONST_I

    ID              shift and go to state 111
    CONST_I         shift and go to state 109

    id_or_number                   shift and go to state 208

state 195

    (88) term_body_types_rest -> FALSE term_bool_add_stk .

    *               reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    /               reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    +               reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    -               reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    <               reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    >               reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    EQ              reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    NEQ             reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    GTE             reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    LTE             reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    AND             reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    OR              reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    ,               reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    )               reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    ID              reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    IF              reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    WHILE           reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    FOR             reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    READ            reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    PRINT           reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    PUSH            reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    POP             reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    }               reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)
    RETURN          reduce using rule 88 (term_body_types_rest -> FALSE term_bool_add_stk .)


state 196

    (68) exp_comp_opt -> comp_operators exp_comp .

    AND             reduce using rule 68 (exp_comp_opt -> comp_operators exp_comp .)
    OR              reduce using rule 68 (exp_comp_opt -> comp_operators exp_comp .)
    ,               reduce using rule 68 (exp_comp_opt -> comp_operators exp_comp .)
    )               reduce using rule 68 (exp_comp_opt -> comp_operators exp_comp .)
    ID              reduce using rule 68 (exp_comp_opt -> comp_operators exp_comp .)
    IF              reduce using rule 68 (exp_comp_opt -> comp_operators exp_comp .)
    WHILE           reduce using rule 68 (exp_comp_opt -> comp_operators exp_comp .)
    FOR             reduce using rule 68 (exp_comp_opt -> comp_operators exp_comp .)
    READ            reduce using rule 68 (exp_comp_opt -> comp_operators exp_comp .)
    PRINT           reduce using rule 68 (exp_comp_opt -> comp_operators exp_comp .)
    PUSH            reduce using rule 68 (exp_comp_opt -> comp_operators exp_comp .)
    POP             reduce using rule 68 (exp_comp_opt -> comp_operators exp_comp .)
    }               reduce using rule 68 (exp_comp_opt -> comp_operators exp_comp .)
    RETURN          reduce using rule 68 (exp_comp_opt -> comp_operators exp_comp .)


state 197

    (57) expr_params_rec -> , expr_params .

    )               reduce using rule 57 (expr_params_rec -> , expr_params .)


state 198

    (60) list_pop -> POP LAST FROM ID ( . )

    )               shift and go to state 209


state 199

    (29) cond_else_opt -> ELSE HAPPENS block .

    ID              reduce using rule 29 (cond_else_opt -> ELSE HAPPENS block .)
    IF              reduce using rule 29 (cond_else_opt -> ELSE HAPPENS block .)
    WHILE           reduce using rule 29 (cond_else_opt -> ELSE HAPPENS block .)
    FOR             reduce using rule 29 (cond_else_opt -> ELSE HAPPENS block .)
    READ            reduce using rule 29 (cond_else_opt -> ELSE HAPPENS block .)
    PRINT           reduce using rule 29 (cond_else_opt -> ELSE HAPPENS block .)
    PUSH            reduce using rule 29 (cond_else_opt -> ELSE HAPPENS block .)
    POP             reduce using rule 29 (cond_else_opt -> ELSE HAPPENS block .)
    }               reduce using rule 29 (cond_else_opt -> ELSE HAPPENS block .)
    RETURN          reduce using rule 29 (cond_else_opt -> ELSE HAPPENS block .)


state 200

    (27) cond_else_if -> OR IF HAPPENS ( . expression ) DO block
    (63) expression -> . exp_comp expression_opt
    (66) exp_comp -> . exp_add exp_comp_opt
    (69) exp_add -> . exp_multiply exp_add_opt
    (72) exp_multiply -> . term exp_multiply_opt
    (75) term -> . term_nested
    (76) term -> . term_body
    (77) term_nested -> . ( expression )
    (78) term_body -> . term_body_opt term_body_types
    (79) term_body_opt -> . empty
    (80) term_body_opt -> . +
    (81) term_body_opt -> . -
    (116) empty -> .

    (               shift and go to state 96
    +               shift and go to state 104
    -               shift and go to state 100
    ID              reduce using rule 116 (empty -> .)
    CONST_I         reduce using rule 116 (empty -> .)
    CONST_F         reduce using rule 116 (empty -> .)
    CONST_S         reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    RANDOM          reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)

    term_body                      shift and go to state 93
    term                           shift and go to state 94
    exp_comp                       shift and go to state 95
    exp_multiply                   shift and go to state 97
    term_nested                    shift and go to state 98
    term_body_opt                  shift and go to state 99
    empty                          shift and go to state 119
    exp_add                        shift and go to state 102
    expression                     shift and go to state 210

state 201

    (59) list_push -> PUSH TO ID ( expression . )

    )               shift and go to state 211


state 202

    (24) cond_if -> IF HAPPENS ( expression ) . DO block

    DO              shift and go to state 212


state 203

    (44) function_stm -> statement function_stm .

    RETURN          reduce using rule 44 (function_stm -> statement function_stm .)
    }               reduce using rule 44 (function_stm -> statement function_stm .)


state 204

    (46) function_return -> RETURN . expression
    (63) expression -> . exp_comp expression_opt
    (66) exp_comp -> . exp_add exp_comp_opt
    (69) exp_add -> . exp_multiply exp_add_opt
    (72) exp_multiply -> . term exp_multiply_opt
    (75) term -> . term_nested
    (76) term -> . term_body
    (77) term_nested -> . ( expression )
    (78) term_body -> . term_body_opt term_body_types
    (79) term_body_opt -> . empty
    (80) term_body_opt -> . +
    (81) term_body_opt -> . -
    (116) empty -> .

    (               shift and go to state 96
    +               shift and go to state 104
    -               shift and go to state 100
    ID              reduce using rule 116 (empty -> .)
    CONST_I         reduce using rule 116 (empty -> .)
    CONST_F         reduce using rule 116 (empty -> .)
    CONST_S         reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    RANDOM          reduce using rule 116 (empty -> .)
    READ            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    PUSH            reduce using rule 116 (empty -> .)
    POP             reduce using rule 116 (empty -> .)

    term_body                      shift and go to state 93
    term                           shift and go to state 94
    exp_comp                       shift and go to state 95
    expression                     shift and go to state 213
    term_nested                    shift and go to state 98
    term_body_opt                  shift and go to state 99
    exp_add                        shift and go to state 102
    exp_multiply                   shift and go to state 97
    empty                          shift and go to state 119

state 205

    (45) function_return -> empty .

    }               reduce using rule 45 (function_return -> empty .)


state 206

    (33) function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return . }

    }               shift and go to state 214


state 207

    (62) random -> RANDOM ( FROM . CONST_I , TO CONST_I )

    CONST_I         shift and go to state 215


state 208

    (61) list_access -> ID [ id_or_number . ]

    ]               shift and go to state 216


state 209

    (60) list_pop -> POP LAST FROM ID ( ) .

    *               reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    /               reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    +               reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    -               reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    <               reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    >               reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    EQ              reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    NEQ             reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    GTE             reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    LTE             reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    AND             reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    OR              reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    ,               reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    )               reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    ID              reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    IF              reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    WHILE           reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    FOR             reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    READ            reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    PRINT           reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    PUSH            reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    POP             reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    }               reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)
    RETURN          reduce using rule 60 (list_pop -> POP LAST FROM ID ( ) .)


state 210

    (27) cond_else_if -> OR IF HAPPENS ( expression . ) DO block

    )               shift and go to state 217


state 211

    (59) list_push -> PUSH TO ID ( expression ) .

    ID              reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    IF              reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    WHILE           reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    FOR             reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    READ            reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    PRINT           reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    PUSH            reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    POP             reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    RETURN          reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    }               reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    *               reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    /               reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    +               reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    -               reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    <               reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    >               reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    EQ              reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    NEQ             reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    GTE             reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    LTE             reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    AND             reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    OR              reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    ,               reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)
    )               reduce using rule 59 (list_push -> PUSH TO ID ( expression ) .)


state 212

    (24) cond_if -> IF HAPPENS ( expression ) DO . block
    (6) block -> . { block_stm_opt }

    {               shift and go to state 28

    block                          shift and go to state 218

state 213

    (46) function_return -> RETURN expression .

    }               reduce using rule 46 (function_return -> RETURN expression .)


state 214

    (33) function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return } .

    ARRAY           reduce using rule 33 (function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return } .)
    INT             reduce using rule 33 (function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return } .)
    FLOAT           reduce using rule 33 (function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return } .)
    STRING          reduce using rule 33 (function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return } .)
    BOOLEAN         reduce using rule 33 (function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return } .)
    FUNCTION        reduce using rule 33 (function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return } .)
    {               reduce using rule 33 (function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return } .)


state 215

    (62) random -> RANDOM ( FROM CONST_I . , TO CONST_I )

    ,               shift and go to state 219


state 216

    (61) list_access -> ID [ id_or_number ] .

    *               reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    /               reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    +               reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    -               reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    <               reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    >               reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    EQ              reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    NEQ             reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    GTE             reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    LTE             reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    AND             reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    OR              reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    ,               reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    )               reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    ID              reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    IF              reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    WHILE           reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    FOR             reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    READ            reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    PRINT           reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    PUSH            reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    POP             reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    }               reduce using rule 61 (list_access -> ID [ id_or_number ] .)
    RETURN          reduce using rule 61 (list_access -> ID [ id_or_number ] .)


state 217

    (27) cond_else_if -> OR IF HAPPENS ( expression ) . DO block

    DO              shift and go to state 220


state 218

    (24) cond_if -> IF HAPPENS ( expression ) DO block .

    OR              reduce using rule 24 (cond_if -> IF HAPPENS ( expression ) DO block .)
    ELSE            reduce using rule 24 (cond_if -> IF HAPPENS ( expression ) DO block .)
    ID              reduce using rule 24 (cond_if -> IF HAPPENS ( expression ) DO block .)
    IF              reduce using rule 24 (cond_if -> IF HAPPENS ( expression ) DO block .)
    WHILE           reduce using rule 24 (cond_if -> IF HAPPENS ( expression ) DO block .)
    FOR             reduce using rule 24 (cond_if -> IF HAPPENS ( expression ) DO block .)
    READ            reduce using rule 24 (cond_if -> IF HAPPENS ( expression ) DO block .)
    PRINT           reduce using rule 24 (cond_if -> IF HAPPENS ( expression ) DO block .)
    PUSH            reduce using rule 24 (cond_if -> IF HAPPENS ( expression ) DO block .)
    POP             reduce using rule 24 (cond_if -> IF HAPPENS ( expression ) DO block .)
    }               reduce using rule 24 (cond_if -> IF HAPPENS ( expression ) DO block .)
    RETURN          reduce using rule 24 (cond_if -> IF HAPPENS ( expression ) DO block .)


state 219

    (62) random -> RANDOM ( FROM CONST_I , . TO CONST_I )

    TO              shift and go to state 221


state 220

    (27) cond_else_if -> OR IF HAPPENS ( expression ) DO . block
    (6) block -> . { block_stm_opt }

    {               shift and go to state 28

    block                          shift and go to state 222

state 221

    (62) random -> RANDOM ( FROM CONST_I , TO . CONST_I )

    CONST_I         shift and go to state 223


state 222

    (27) cond_else_if -> OR IF HAPPENS ( expression ) DO block .

    OR              reduce using rule 27 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    ELSE            reduce using rule 27 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    ID              reduce using rule 27 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    IF              reduce using rule 27 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    WHILE           reduce using rule 27 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    FOR             reduce using rule 27 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    READ            reduce using rule 27 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    PRINT           reduce using rule 27 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    PUSH            reduce using rule 27 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    POP             reduce using rule 27 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    }               reduce using rule 27 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    RETURN          reduce using rule 27 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)


state 223

    (62) random -> RANDOM ( FROM CONST_I , TO CONST_I . )

    )               shift and go to state 224


state 224

    (62) random -> RANDOM ( FROM CONST_I , TO CONST_I ) .

    *               reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    /               reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    +               reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    -               reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    <               reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    >               reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    EQ              reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    NEQ             reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    GTE             reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    LTE             reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    AND             reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    OR              reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    ,               reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    )               reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    ID              reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    IF              reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    WHILE           reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    FOR             reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    READ            reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    PRINT           reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    PUSH            reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    POP             reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    }               reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    RETURN          reduce using rule 62 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ARRAY in state 60 resolved as shift
WARNING: shift/reduce conflict for INT in state 60 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 60 resolved as shift
WARNING: shift/reduce conflict for STRING in state 60 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 60 resolved as shift
