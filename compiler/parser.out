Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> main
Rule 1     main -> PROGRAM variables_opt main_func block
Rule 2     variables_opt -> empty
Rule 3     variables_opt -> variables
Rule 4     main_func -> empty
Rule 5     main_func -> function main_func
Rule 6     block -> { block_stm_opt }
Rule 7     block_stm_opt -> empty
Rule 8     block_stm_opt -> statement block_stm_opt
Rule 9     statement -> assignation
Rule 10    statement -> condition
Rule 11    statement -> iteration
Rule 12    statement -> function_call
Rule 13    variables -> VARIABLE : var_body
Rule 14    var_body -> var_opts var_id ; var_body_rec
Rule 15    var_body_rec -> empty
Rule 16    var_body_rec -> var_body
Rule 17    var_opts -> base_type
Rule 18    var_opts -> ARRAY FROM base_type FROM id_or_number
Rule 19    var_id -> ID var_id_rec
Rule 20    var_id_rec -> empty
Rule 21    var_id_rec -> , var_id
Rule 22    assignation -> add_assignation_var = add_assignation_sign expression
Rule 23    add_assignation_var -> ID
Rule 24    add_assignation_sign -> empty
Rule 25    condition -> cond_if cond_else_if_opt cond_else_opt
Rule 26    cond_if -> IF HAPPENS ( expression ) DO block
Rule 27    cond_else_if_opt -> empty
Rule 28    cond_else_if_opt -> cond_else_if cond_else_if_opt
Rule 29    cond_else_if -> OR IF HAPPENS ( expression ) DO block
Rule 30    cond_else_opt -> empty
Rule 31    cond_else_opt -> ELSE HAPPENS block
Rule 32    iteration -> iteration_opts ) DO block
Rule 33    iteration_opts -> WHILE HAPPENS ( expression
Rule 34    iteration_opts -> FOR ( id_or_number
Rule 35    function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return }
Rule 36    function_declaration -> function_type FUNCTION ID
Rule 37    function_variables_opt -> empty
Rule 38    function_variables_opt -> variables
Rule 39    function_type -> empty
Rule 40    function_type -> type
Rule 41    function_params -> empty
Rule 42    function_params -> type ID function_params_rec
Rule 43    function_params_rec -> empty
Rule 44    function_params_rec -> , function_params
Rule 45    function_stm -> empty
Rule 46    function_stm -> statement function_stm
Rule 47    function_return -> empty
Rule 48    function_return -> RETURN expression
Rule 49    function_call -> read
Rule 50    function_call -> print
Rule 51    function_call -> local_function
Rule 52    function_call -> list_push
Rule 53    function_call -> list_pop
Rule 54    read -> READ add_read_op ( add_read_var )
Rule 55    add_read_var -> ID
Rule 56    add_read_op -> empty
Rule 57    print -> PRINT add_print_op ( expr_params )
Rule 58    add_print_op -> empty
Rule 59    expr_params -> empty
Rule 60    expr_params -> expression expr_params_rec
Rule 61    expr_params_rec -> empty
Rule 62    expr_params_rec -> , expr_params
Rule 63    local_function -> ID ( expr_params )
Rule 64    list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression )
Rule 65    add_list_push_sign -> empty
Rule 66    add_list_push_var -> ID
Rule 67    list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( )
Rule 68    add_list_pop_var -> ID
Rule 69    add_list_pop_sign -> empty
Rule 70    list_access -> ID [ id_or_number ]
Rule 71    random -> RANDOM ( FROM CONST_I , TO CONST_I )
Rule 72    expression -> exp_comp expression_opt
Rule 73    expression_opt -> empty
Rule 74    expression_opt -> logic_operators expression
Rule 75    exp_comp -> exp_add exp_comp_opt
Rule 76    exp_comp_opt -> empty
Rule 77    exp_comp_opt -> comp_operators exp_comp
Rule 78    exp_add -> exp_multiply exp_add_opt
Rule 79    exp_add_opt -> empty
Rule 80    exp_add_opt -> add_operators exp_add
Rule 81    exp_multiply -> term exp_multiply_opt
Rule 82    exp_multiply_opt -> empty
Rule 83    exp_multiply_opt -> multiply_operators exp_multiply
Rule 84    term -> term_nested
Rule 85    term -> term_body
Rule 86    term_nested -> ( expression )
Rule 87    term_body -> term_body_opt
Rule 88    term_body -> term_body_types
Rule 89    term_body_opt -> term_body_opt_signs term_body_types
Rule 90    term_body_opt_signs -> +
Rule 91    term_body_opt_signs -> -
Rule 92    term_body_types -> ID
Rule 93    term_body_types -> term_body_types_rest
Rule 94    term_body_types_rest -> CONST_I term_int_add_stk
Rule 95    term_body_types_rest -> CONST_F term_float_add_stk
Rule 96    term_body_types_rest -> CONST_S term_string_add_stk
Rule 97    term_body_types_rest -> TRUE term_bool_add_stk
Rule 98    term_body_types_rest -> FALSE term_bool_add_stk
Rule 99    term_body_types_rest -> random
Rule 100   term_body_types_rest -> list_access
Rule 101   term_body_types_rest -> function_call
Rule 102   term_int_add_stk -> empty
Rule 103   term_float_add_stk -> empty
Rule 104   term_string_add_stk -> empty
Rule 105   term_bool_add_stk -> empty
Rule 106   type -> base_type
Rule 107   type -> ARRAY FROM base_type
Rule 108   id_or_number -> ID
Rule 109   id_or_number -> CONST_I
Rule 110   base_type -> INT
Rule 111   base_type -> FLOAT
Rule 112   base_type -> STRING
Rule 113   base_type -> BOOLEAN
Rule 114   logic_operators -> AND
Rule 115   logic_operators -> OR
Rule 116   comp_operators -> <
Rule 117   comp_operators -> >
Rule 118   comp_operators -> EQ
Rule 119   comp_operators -> NEQ
Rule 120   comp_operators -> GTE
Rule 121   comp_operators -> LTE
Rule 122   multiply_operators -> *
Rule 123   multiply_operators -> /
Rule 124   add_operators -> +
Rule 125   add_operators -> -
Rule 126   empty -> <empty>

Terminals, with rules where they appear

(                    : 26 29 33 34 35 54 57 63 64 67 71 86
)                    : 26 29 32 35 54 57 63 64 67 71 86
*                    : 122
+                    : 90 124
,                    : 21 44 62 71
-                    : 91 125
/                    : 123
:                    : 13
;                    : 14
<                    : 116
=                    : 22
>                    : 117
AND                  : 114
ARRAY                : 18 107
BOOLEAN              : 113
CONST_F              : 95
CONST_I              : 71 71 94 109
CONST_S              : 96
DO                   : 26 29 32
ELSE                 : 31
EQ                   : 118
FALSE                : 98
FLOAT                : 111
FOR                  : 34
FROM                 : 18 18 67 71 107
FUNCTION             : 36
GTE                  : 120
HAPPENS              : 26 29 31 33
ID                   : 19 23 36 42 55 63 66 68 70 92 108
IF                   : 26 29
INT                  : 110
LAST                 : 67
LTE                  : 121
NEQ                  : 119
OR                   : 29 115
POP                  : 67
PRINT                : 57
PROGRAM              : 1
PUSH                 : 64
RANDOM               : 71
READ                 : 54
RETURN               : 48
STRING               : 112
TO                   : 64 71
TRUE                 : 97
VARIABLE             : 13
WHILE                : 33
[                    : 70
]                    : 70
error                : 
{                    : 6 35
}                    : 6 35

Nonterminals, with rules where they appear

add_assignation_sign : 22
add_assignation_var  : 22
add_list_pop_sign    : 67
add_list_pop_var     : 67
add_list_push_sign   : 64
add_list_push_var    : 64
add_operators        : 80
add_print_op         : 57
add_read_op          : 54
add_read_var         : 54
assignation          : 9
base_type            : 17 18 106 107
block                : 1 26 29 31 32
block_stm_opt        : 6 8
comp_operators       : 77
cond_else_if         : 28
cond_else_if_opt     : 25 28
cond_else_opt        : 25
cond_if              : 25
condition            : 10
empty                : 2 4 7 15 20 24 27 30 37 39 41 43 45 47 56 58 59 61 65 69 73 76 79 82 102 103 104 105
exp_add              : 75 80
exp_add_opt          : 78
exp_comp             : 72 77
exp_comp_opt         : 75
exp_multiply         : 78 83
exp_multiply_opt     : 81
expr_params          : 57 62 63
expr_params_rec      : 60
expression           : 22 26 29 33 48 60 64 74 86
expression_opt       : 72
function             : 5
function_call        : 12 101
function_declaration : 35
function_params      : 35 44
function_params_rec  : 42
function_return      : 35
function_stm         : 35 46
function_type        : 36
function_variables_opt : 35
id_or_number         : 18 34 70
iteration            : 11
iteration_opts       : 32
list_access          : 100
list_pop             : 53
list_push            : 52
local_function       : 51
logic_operators      : 74
main                 : 0
main_func            : 1 5
multiply_operators   : 83
print                : 50
random               : 99
read                 : 49
statement            : 8 46
term                 : 81
term_body            : 85
term_body_opt        : 87
term_body_opt_signs  : 89
term_body_types      : 88 89
term_body_types_rest : 93
term_bool_add_stk    : 97 98
term_float_add_stk   : 95
term_int_add_stk     : 94
term_nested          : 84
term_string_add_stk  : 96
type                 : 40 42
var_body             : 13 16
var_body_rec         : 14
var_id               : 14 21
var_id_rec           : 19
var_opts             : 14
variables            : 3 38
variables_opt        : 1

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . PROGRAM variables_opt main_func block

    PROGRAM         shift and go to state 1

    main                           shift and go to state 2

state 1

    (1) main -> PROGRAM . variables_opt main_func block
    (2) variables_opt -> . empty
    (3) variables_opt -> . variables
    (126) empty -> .
    (13) variables -> . VARIABLE : var_body

    ARRAY           reduce using rule 126 (empty -> .)
    INT             reduce using rule 126 (empty -> .)
    FLOAT           reduce using rule 126 (empty -> .)
    STRING          reduce using rule 126 (empty -> .)
    BOOLEAN         reduce using rule 126 (empty -> .)
    {               reduce using rule 126 (empty -> .)
    FUNCTION        reduce using rule 126 (empty -> .)
    VARIABLE        shift and go to state 4

    variables                      shift and go to state 3
    variables_opt                  shift and go to state 5
    empty                          shift and go to state 6

state 2

    (0) S' -> main .



state 3

    (3) variables_opt -> variables .

    ARRAY           reduce using rule 3 (variables_opt -> variables .)
    INT             reduce using rule 3 (variables_opt -> variables .)
    FLOAT           reduce using rule 3 (variables_opt -> variables .)
    STRING          reduce using rule 3 (variables_opt -> variables .)
    BOOLEAN         reduce using rule 3 (variables_opt -> variables .)
    {               reduce using rule 3 (variables_opt -> variables .)
    FUNCTION        reduce using rule 3 (variables_opt -> variables .)


state 4

    (13) variables -> VARIABLE . : var_body

    :               shift and go to state 7


state 5

    (1) main -> PROGRAM variables_opt . main_func block
    (4) main_func -> . empty
    (5) main_func -> . function main_func
    (126) empty -> .
    (35) function -> . function_declaration ( function_params ) { function_variables_opt function_stm function_return }
    (36) function_declaration -> . function_type FUNCTION ID
    (39) function_type -> . empty
    (40) function_type -> . type
    (106) type -> . base_type
    (107) type -> . ARRAY FROM base_type
    (110) base_type -> . INT
    (111) base_type -> . FLOAT
    (112) base_type -> . STRING
    (113) base_type -> . BOOLEAN

    {               reduce using rule 126 (empty -> .)
    FUNCTION        reduce using rule 126 (empty -> .)
    ARRAY           shift and go to state 10
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 14
    BOOLEAN         shift and go to state 15

    function                       shift and go to state 13
    base_type                      shift and go to state 9
    function_declaration           shift and go to state 16
    function_type                  shift and go to state 8
    type                           shift and go to state 11
    main_func                      shift and go to state 19
    empty                          shift and go to state 12

state 6

    (2) variables_opt -> empty .

    ARRAY           reduce using rule 2 (variables_opt -> empty .)
    INT             reduce using rule 2 (variables_opt -> empty .)
    FLOAT           reduce using rule 2 (variables_opt -> empty .)
    STRING          reduce using rule 2 (variables_opt -> empty .)
    BOOLEAN         reduce using rule 2 (variables_opt -> empty .)
    {               reduce using rule 2 (variables_opt -> empty .)
    FUNCTION        reduce using rule 2 (variables_opt -> empty .)


state 7

    (13) variables -> VARIABLE : . var_body
    (14) var_body -> . var_opts var_id ; var_body_rec
    (17) var_opts -> . base_type
    (18) var_opts -> . ARRAY FROM base_type FROM id_or_number
    (110) base_type -> . INT
    (111) base_type -> . FLOAT
    (112) base_type -> . STRING
    (113) base_type -> . BOOLEAN

    ARRAY           shift and go to state 23
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 14
    BOOLEAN         shift and go to state 15

    var_opts                       shift and go to state 20
    var_body                       shift and go to state 21
    base_type                      shift and go to state 22

state 8

    (36) function_declaration -> function_type . FUNCTION ID

    FUNCTION        shift and go to state 24


state 9

    (106) type -> base_type .

    ID              reduce using rule 106 (type -> base_type .)
    FUNCTION        reduce using rule 106 (type -> base_type .)


state 10

    (107) type -> ARRAY . FROM base_type

    FROM            shift and go to state 25


state 11

    (40) function_type -> type .

    FUNCTION        reduce using rule 40 (function_type -> type .)


state 12

    (4) main_func -> empty .
    (39) function_type -> empty .

    {               reduce using rule 4 (main_func -> empty .)
    FUNCTION        reduce using rule 39 (function_type -> empty .)


state 13

    (5) main_func -> function . main_func
    (4) main_func -> . empty
    (5) main_func -> . function main_func
    (126) empty -> .
    (35) function -> . function_declaration ( function_params ) { function_variables_opt function_stm function_return }
    (36) function_declaration -> . function_type FUNCTION ID
    (39) function_type -> . empty
    (40) function_type -> . type
    (106) type -> . base_type
    (107) type -> . ARRAY FROM base_type
    (110) base_type -> . INT
    (111) base_type -> . FLOAT
    (112) base_type -> . STRING
    (113) base_type -> . BOOLEAN

    {               reduce using rule 126 (empty -> .)
    FUNCTION        reduce using rule 126 (empty -> .)
    ARRAY           shift and go to state 10
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 14
    BOOLEAN         shift and go to state 15

    function                       shift and go to state 13
    base_type                      shift and go to state 9
    function_declaration           shift and go to state 16
    function_type                  shift and go to state 8
    main_func                      shift and go to state 26
    type                           shift and go to state 11
    empty                          shift and go to state 12

state 14

    (112) base_type -> STRING .

    FUNCTION        reduce using rule 112 (base_type -> STRING .)
    FROM            reduce using rule 112 (base_type -> STRING .)
    ID              reduce using rule 112 (base_type -> STRING .)


state 15

    (113) base_type -> BOOLEAN .

    FUNCTION        reduce using rule 113 (base_type -> BOOLEAN .)
    FROM            reduce using rule 113 (base_type -> BOOLEAN .)
    ID              reduce using rule 113 (base_type -> BOOLEAN .)


state 16

    (35) function -> function_declaration . ( function_params ) { function_variables_opt function_stm function_return }

    (               shift and go to state 27


state 17

    (110) base_type -> INT .

    FUNCTION        reduce using rule 110 (base_type -> INT .)
    FROM            reduce using rule 110 (base_type -> INT .)
    ID              reduce using rule 110 (base_type -> INT .)


state 18

    (111) base_type -> FLOAT .

    FUNCTION        reduce using rule 111 (base_type -> FLOAT .)
    FROM            reduce using rule 111 (base_type -> FLOAT .)
    ID              reduce using rule 111 (base_type -> FLOAT .)


state 19

    (1) main -> PROGRAM variables_opt main_func . block
    (6) block -> . { block_stm_opt }

    {               shift and go to state 28

    block                          shift and go to state 29

state 20

    (14) var_body -> var_opts . var_id ; var_body_rec
    (19) var_id -> . ID var_id_rec

    ID              shift and go to state 31

    var_id                         shift and go to state 30

state 21

    (13) variables -> VARIABLE : var_body .

    ID              reduce using rule 13 (variables -> VARIABLE : var_body .)
    IF              reduce using rule 13 (variables -> VARIABLE : var_body .)
    WHILE           reduce using rule 13 (variables -> VARIABLE : var_body .)
    FOR             reduce using rule 13 (variables -> VARIABLE : var_body .)
    READ            reduce using rule 13 (variables -> VARIABLE : var_body .)
    PRINT           reduce using rule 13 (variables -> VARIABLE : var_body .)
    PUSH            reduce using rule 13 (variables -> VARIABLE : var_body .)
    POP             reduce using rule 13 (variables -> VARIABLE : var_body .)
    RETURN          reduce using rule 13 (variables -> VARIABLE : var_body .)
    }               reduce using rule 13 (variables -> VARIABLE : var_body .)
    ARRAY           reduce using rule 13 (variables -> VARIABLE : var_body .)
    INT             reduce using rule 13 (variables -> VARIABLE : var_body .)
    FLOAT           reduce using rule 13 (variables -> VARIABLE : var_body .)
    STRING          reduce using rule 13 (variables -> VARIABLE : var_body .)
    BOOLEAN         reduce using rule 13 (variables -> VARIABLE : var_body .)
    {               reduce using rule 13 (variables -> VARIABLE : var_body .)
    FUNCTION        reduce using rule 13 (variables -> VARIABLE : var_body .)


state 22

    (17) var_opts -> base_type .

    ID              reduce using rule 17 (var_opts -> base_type .)


state 23

    (18) var_opts -> ARRAY . FROM base_type FROM id_or_number

    FROM            shift and go to state 32


state 24

    (36) function_declaration -> function_type FUNCTION . ID

    ID              shift and go to state 33


state 25

    (107) type -> ARRAY FROM . base_type
    (110) base_type -> . INT
    (111) base_type -> . FLOAT
    (112) base_type -> . STRING
    (113) base_type -> . BOOLEAN

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 14
    BOOLEAN         shift and go to state 15

    base_type                      shift and go to state 34

state 26

    (5) main_func -> function main_func .

    {               reduce using rule 5 (main_func -> function main_func .)


state 27

    (35) function -> function_declaration ( . function_params ) { function_variables_opt function_stm function_return }
    (41) function_params -> . empty
    (42) function_params -> . type ID function_params_rec
    (126) empty -> .
    (106) type -> . base_type
    (107) type -> . ARRAY FROM base_type
    (110) base_type -> . INT
    (111) base_type -> . FLOAT
    (112) base_type -> . STRING
    (113) base_type -> . BOOLEAN

    )               reduce using rule 126 (empty -> .)
    ARRAY           shift and go to state 10
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 14
    BOOLEAN         shift and go to state 15

    base_type                      shift and go to state 9
    function_params                shift and go to state 37
    type                           shift and go to state 36
    empty                          shift and go to state 35

state 28

    (6) block -> { . block_stm_opt }
    (7) block_stm_opt -> . empty
    (8) block_stm_opt -> . statement block_stm_opt
    (126) empty -> .
    (9) statement -> . assignation
    (10) statement -> . condition
    (11) statement -> . iteration
    (12) statement -> . function_call
    (22) assignation -> . add_assignation_var = add_assignation_sign expression
    (25) condition -> . cond_if cond_else_if_opt cond_else_opt
    (32) iteration -> . iteration_opts ) DO block
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (23) add_assignation_var -> . ID
    (26) cond_if -> . IF HAPPENS ( expression ) DO block
    (33) iteration_opts -> . WHILE HAPPENS ( expression
    (34) iteration_opts -> . FOR ( id_or_number
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    }               reduce using rule 126 (empty -> .)
    ID              shift and go to state 56
    IF              shift and go to state 58
    WHILE           shift and go to state 42
    FOR             shift and go to state 52
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    condition                      shift and go to state 57
    function_call                  shift and go to state 40
    list_pop                       shift and go to state 43
    add_assignation_var            shift and go to state 44
    local_function                 shift and go to state 46
    block_stm_opt                  shift and go to state 38
    list_push                      shift and go to state 51
    print                          shift and go to state 48
    empty                          shift and go to state 49
    iteration_opts                 shift and go to state 50
    statement                      shift and go to state 47
    read                           shift and go to state 53
    cond_if                        shift and go to state 54
    assignation                    shift and go to state 59
    iteration                      shift and go to state 60

state 29

    (1) main -> PROGRAM variables_opt main_func block .

    $end            reduce using rule 1 (main -> PROGRAM variables_opt main_func block .)


state 30

    (14) var_body -> var_opts var_id . ; var_body_rec

    ;               shift and go to state 61


state 31

    (19) var_id -> ID . var_id_rec
    (20) var_id_rec -> . empty
    (21) var_id_rec -> . , var_id
    (126) empty -> .

    ,               shift and go to state 64
    ;               reduce using rule 126 (empty -> .)

    var_id_rec                     shift and go to state 62
    empty                          shift and go to state 63

state 32

    (18) var_opts -> ARRAY FROM . base_type FROM id_or_number
    (110) base_type -> . INT
    (111) base_type -> . FLOAT
    (112) base_type -> . STRING
    (113) base_type -> . BOOLEAN

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 14
    BOOLEAN         shift and go to state 15

    base_type                      shift and go to state 65

state 33

    (36) function_declaration -> function_type FUNCTION ID .

    (               reduce using rule 36 (function_declaration -> function_type FUNCTION ID .)


state 34

    (107) type -> ARRAY FROM base_type .

    ID              reduce using rule 107 (type -> ARRAY FROM base_type .)
    FUNCTION        reduce using rule 107 (type -> ARRAY FROM base_type .)


state 35

    (41) function_params -> empty .

    )               reduce using rule 41 (function_params -> empty .)


state 36

    (42) function_params -> type . ID function_params_rec

    ID              shift and go to state 66


state 37

    (35) function -> function_declaration ( function_params . ) { function_variables_opt function_stm function_return }

    )               shift and go to state 67


state 38

    (6) block -> { block_stm_opt . }

    }               shift and go to state 68


state 39

    (54) read -> READ . add_read_op ( add_read_var )
    (56) add_read_op -> . empty
    (126) empty -> .

    (               reduce using rule 126 (empty -> .)

    empty                          shift and go to state 70
    add_read_op                    shift and go to state 69

state 40

    (12) statement -> function_call .

    ID              reduce using rule 12 (statement -> function_call .)
    IF              reduce using rule 12 (statement -> function_call .)
    WHILE           reduce using rule 12 (statement -> function_call .)
    FOR             reduce using rule 12 (statement -> function_call .)
    READ            reduce using rule 12 (statement -> function_call .)
    PRINT           reduce using rule 12 (statement -> function_call .)
    PUSH            reduce using rule 12 (statement -> function_call .)
    POP             reduce using rule 12 (statement -> function_call .)
    RETURN          reduce using rule 12 (statement -> function_call .)
    }               reduce using rule 12 (statement -> function_call .)


state 41

    (57) print -> PRINT . add_print_op ( expr_params )
    (58) add_print_op -> . empty
    (126) empty -> .

    (               reduce using rule 126 (empty -> .)

    add_print_op                   shift and go to state 71
    empty                          shift and go to state 72

state 42

    (33) iteration_opts -> WHILE . HAPPENS ( expression

    HAPPENS         shift and go to state 73


state 43

    (53) function_call -> list_pop .

    *               reduce using rule 53 (function_call -> list_pop .)
    /               reduce using rule 53 (function_call -> list_pop .)
    +               reduce using rule 53 (function_call -> list_pop .)
    -               reduce using rule 53 (function_call -> list_pop .)
    <               reduce using rule 53 (function_call -> list_pop .)
    >               reduce using rule 53 (function_call -> list_pop .)
    EQ              reduce using rule 53 (function_call -> list_pop .)
    NEQ             reduce using rule 53 (function_call -> list_pop .)
    GTE             reduce using rule 53 (function_call -> list_pop .)
    LTE             reduce using rule 53 (function_call -> list_pop .)
    AND             reduce using rule 53 (function_call -> list_pop .)
    OR              reduce using rule 53 (function_call -> list_pop .)
    )               reduce using rule 53 (function_call -> list_pop .)
    ,               reduce using rule 53 (function_call -> list_pop .)
    }               reduce using rule 53 (function_call -> list_pop .)
    ID              reduce using rule 53 (function_call -> list_pop .)
    IF              reduce using rule 53 (function_call -> list_pop .)
    WHILE           reduce using rule 53 (function_call -> list_pop .)
    FOR             reduce using rule 53 (function_call -> list_pop .)
    READ            reduce using rule 53 (function_call -> list_pop .)
    PRINT           reduce using rule 53 (function_call -> list_pop .)
    PUSH            reduce using rule 53 (function_call -> list_pop .)
    POP             reduce using rule 53 (function_call -> list_pop .)
    RETURN          reduce using rule 53 (function_call -> list_pop .)


state 44

    (22) assignation -> add_assignation_var . = add_assignation_sign expression

    =               shift and go to state 74


state 45

    (67) list_pop -> POP . LAST add_list_pop_sign FROM add_list_pop_var ( )

    LAST            shift and go to state 75


state 46

    (51) function_call -> local_function .

    *               reduce using rule 51 (function_call -> local_function .)
    /               reduce using rule 51 (function_call -> local_function .)
    +               reduce using rule 51 (function_call -> local_function .)
    -               reduce using rule 51 (function_call -> local_function .)
    <               reduce using rule 51 (function_call -> local_function .)
    >               reduce using rule 51 (function_call -> local_function .)
    EQ              reduce using rule 51 (function_call -> local_function .)
    NEQ             reduce using rule 51 (function_call -> local_function .)
    GTE             reduce using rule 51 (function_call -> local_function .)
    LTE             reduce using rule 51 (function_call -> local_function .)
    AND             reduce using rule 51 (function_call -> local_function .)
    OR              reduce using rule 51 (function_call -> local_function .)
    )               reduce using rule 51 (function_call -> local_function .)
    ,               reduce using rule 51 (function_call -> local_function .)
    }               reduce using rule 51 (function_call -> local_function .)
    ID              reduce using rule 51 (function_call -> local_function .)
    IF              reduce using rule 51 (function_call -> local_function .)
    WHILE           reduce using rule 51 (function_call -> local_function .)
    FOR             reduce using rule 51 (function_call -> local_function .)
    READ            reduce using rule 51 (function_call -> local_function .)
    PRINT           reduce using rule 51 (function_call -> local_function .)
    PUSH            reduce using rule 51 (function_call -> local_function .)
    POP             reduce using rule 51 (function_call -> local_function .)
    RETURN          reduce using rule 51 (function_call -> local_function .)


state 47

    (8) block_stm_opt -> statement . block_stm_opt
    (7) block_stm_opt -> . empty
    (8) block_stm_opt -> . statement block_stm_opt
    (126) empty -> .
    (9) statement -> . assignation
    (10) statement -> . condition
    (11) statement -> . iteration
    (12) statement -> . function_call
    (22) assignation -> . add_assignation_var = add_assignation_sign expression
    (25) condition -> . cond_if cond_else_if_opt cond_else_opt
    (32) iteration -> . iteration_opts ) DO block
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (23) add_assignation_var -> . ID
    (26) cond_if -> . IF HAPPENS ( expression ) DO block
    (33) iteration_opts -> . WHILE HAPPENS ( expression
    (34) iteration_opts -> . FOR ( id_or_number
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    }               reduce using rule 126 (empty -> .)
    ID              shift and go to state 56
    IF              shift and go to state 58
    WHILE           shift and go to state 42
    FOR             shift and go to state 52
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    condition                      shift and go to state 57
    function_call                  shift and go to state 40
    list_pop                       shift and go to state 43
    add_assignation_var            shift and go to state 44
    local_function                 shift and go to state 46
    block_stm_opt                  shift and go to state 76
    list_push                      shift and go to state 51
    print                          shift and go to state 48
    empty                          shift and go to state 49
    iteration_opts                 shift and go to state 50
    statement                      shift and go to state 47
    read                           shift and go to state 53
    cond_if                        shift and go to state 54
    assignation                    shift and go to state 59
    iteration                      shift and go to state 60

state 48

    (50) function_call -> print .

    *               reduce using rule 50 (function_call -> print .)
    /               reduce using rule 50 (function_call -> print .)
    +               reduce using rule 50 (function_call -> print .)
    -               reduce using rule 50 (function_call -> print .)
    <               reduce using rule 50 (function_call -> print .)
    >               reduce using rule 50 (function_call -> print .)
    EQ              reduce using rule 50 (function_call -> print .)
    NEQ             reduce using rule 50 (function_call -> print .)
    GTE             reduce using rule 50 (function_call -> print .)
    LTE             reduce using rule 50 (function_call -> print .)
    AND             reduce using rule 50 (function_call -> print .)
    OR              reduce using rule 50 (function_call -> print .)
    )               reduce using rule 50 (function_call -> print .)
    ,               reduce using rule 50 (function_call -> print .)
    }               reduce using rule 50 (function_call -> print .)
    ID              reduce using rule 50 (function_call -> print .)
    IF              reduce using rule 50 (function_call -> print .)
    WHILE           reduce using rule 50 (function_call -> print .)
    FOR             reduce using rule 50 (function_call -> print .)
    READ            reduce using rule 50 (function_call -> print .)
    PRINT           reduce using rule 50 (function_call -> print .)
    PUSH            reduce using rule 50 (function_call -> print .)
    POP             reduce using rule 50 (function_call -> print .)
    RETURN          reduce using rule 50 (function_call -> print .)


state 49

    (7) block_stm_opt -> empty .

    }               reduce using rule 7 (block_stm_opt -> empty .)


state 50

    (32) iteration -> iteration_opts . ) DO block

    )               shift and go to state 77


state 51

    (52) function_call -> list_push .

    *               reduce using rule 52 (function_call -> list_push .)
    /               reduce using rule 52 (function_call -> list_push .)
    +               reduce using rule 52 (function_call -> list_push .)
    -               reduce using rule 52 (function_call -> list_push .)
    <               reduce using rule 52 (function_call -> list_push .)
    >               reduce using rule 52 (function_call -> list_push .)
    EQ              reduce using rule 52 (function_call -> list_push .)
    NEQ             reduce using rule 52 (function_call -> list_push .)
    GTE             reduce using rule 52 (function_call -> list_push .)
    LTE             reduce using rule 52 (function_call -> list_push .)
    AND             reduce using rule 52 (function_call -> list_push .)
    OR              reduce using rule 52 (function_call -> list_push .)
    )               reduce using rule 52 (function_call -> list_push .)
    ,               reduce using rule 52 (function_call -> list_push .)
    }               reduce using rule 52 (function_call -> list_push .)
    ID              reduce using rule 52 (function_call -> list_push .)
    IF              reduce using rule 52 (function_call -> list_push .)
    WHILE           reduce using rule 52 (function_call -> list_push .)
    FOR             reduce using rule 52 (function_call -> list_push .)
    READ            reduce using rule 52 (function_call -> list_push .)
    PRINT           reduce using rule 52 (function_call -> list_push .)
    PUSH            reduce using rule 52 (function_call -> list_push .)
    POP             reduce using rule 52 (function_call -> list_push .)
    RETURN          reduce using rule 52 (function_call -> list_push .)


state 52

    (34) iteration_opts -> FOR . ( id_or_number

    (               shift and go to state 78


state 53

    (49) function_call -> read .

    *               reduce using rule 49 (function_call -> read .)
    /               reduce using rule 49 (function_call -> read .)
    +               reduce using rule 49 (function_call -> read .)
    -               reduce using rule 49 (function_call -> read .)
    <               reduce using rule 49 (function_call -> read .)
    >               reduce using rule 49 (function_call -> read .)
    EQ              reduce using rule 49 (function_call -> read .)
    NEQ             reduce using rule 49 (function_call -> read .)
    GTE             reduce using rule 49 (function_call -> read .)
    LTE             reduce using rule 49 (function_call -> read .)
    AND             reduce using rule 49 (function_call -> read .)
    OR              reduce using rule 49 (function_call -> read .)
    )               reduce using rule 49 (function_call -> read .)
    ,               reduce using rule 49 (function_call -> read .)
    }               reduce using rule 49 (function_call -> read .)
    ID              reduce using rule 49 (function_call -> read .)
    IF              reduce using rule 49 (function_call -> read .)
    WHILE           reduce using rule 49 (function_call -> read .)
    FOR             reduce using rule 49 (function_call -> read .)
    READ            reduce using rule 49 (function_call -> read .)
    PRINT           reduce using rule 49 (function_call -> read .)
    PUSH            reduce using rule 49 (function_call -> read .)
    POP             reduce using rule 49 (function_call -> read .)
    RETURN          reduce using rule 49 (function_call -> read .)


state 54

    (25) condition -> cond_if . cond_else_if_opt cond_else_opt
    (27) cond_else_if_opt -> . empty
    (28) cond_else_if_opt -> . cond_else_if cond_else_if_opt
    (126) empty -> .
    (29) cond_else_if -> . OR IF HAPPENS ( expression ) DO block

    ELSE            reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    PUSH            reduce using rule 126 (empty -> .)
    POP             reduce using rule 126 (empty -> .)
    }               reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    OR              shift and go to state 81

    cond_else_if_opt               shift and go to state 79
    empty                          shift and go to state 80
    cond_else_if                   shift and go to state 82

state 55

    (64) list_push -> PUSH . TO add_list_push_sign add_list_push_var ( expression )

    TO              shift and go to state 83


state 56

    (23) add_assignation_var -> ID .
    (63) local_function -> ID . ( expr_params )

    =               reduce using rule 23 (add_assignation_var -> ID .)
    (               shift and go to state 84


state 57

    (10) statement -> condition .

    ID              reduce using rule 10 (statement -> condition .)
    IF              reduce using rule 10 (statement -> condition .)
    WHILE           reduce using rule 10 (statement -> condition .)
    FOR             reduce using rule 10 (statement -> condition .)
    READ            reduce using rule 10 (statement -> condition .)
    PRINT           reduce using rule 10 (statement -> condition .)
    PUSH            reduce using rule 10 (statement -> condition .)
    POP             reduce using rule 10 (statement -> condition .)
    RETURN          reduce using rule 10 (statement -> condition .)
    }               reduce using rule 10 (statement -> condition .)


state 58

    (26) cond_if -> IF . HAPPENS ( expression ) DO block

    HAPPENS         shift and go to state 85


state 59

    (9) statement -> assignation .

    ID              reduce using rule 9 (statement -> assignation .)
    IF              reduce using rule 9 (statement -> assignation .)
    WHILE           reduce using rule 9 (statement -> assignation .)
    FOR             reduce using rule 9 (statement -> assignation .)
    READ            reduce using rule 9 (statement -> assignation .)
    PRINT           reduce using rule 9 (statement -> assignation .)
    PUSH            reduce using rule 9 (statement -> assignation .)
    POP             reduce using rule 9 (statement -> assignation .)
    RETURN          reduce using rule 9 (statement -> assignation .)
    }               reduce using rule 9 (statement -> assignation .)


state 60

    (11) statement -> iteration .

    ID              reduce using rule 11 (statement -> iteration .)
    IF              reduce using rule 11 (statement -> iteration .)
    WHILE           reduce using rule 11 (statement -> iteration .)
    FOR             reduce using rule 11 (statement -> iteration .)
    READ            reduce using rule 11 (statement -> iteration .)
    PRINT           reduce using rule 11 (statement -> iteration .)
    PUSH            reduce using rule 11 (statement -> iteration .)
    POP             reduce using rule 11 (statement -> iteration .)
    RETURN          reduce using rule 11 (statement -> iteration .)
    }               reduce using rule 11 (statement -> iteration .)


state 61

    (14) var_body -> var_opts var_id ; . var_body_rec
    (15) var_body_rec -> . empty
    (16) var_body_rec -> . var_body
    (126) empty -> .
    (14) var_body -> . var_opts var_id ; var_body_rec
    (17) var_opts -> . base_type
    (18) var_opts -> . ARRAY FROM base_type FROM id_or_number
    (110) base_type -> . INT
    (111) base_type -> . FLOAT
    (112) base_type -> . STRING
    (113) base_type -> . BOOLEAN

  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    {               reduce using rule 126 (empty -> .)
    FUNCTION        reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    PUSH            reduce using rule 126 (empty -> .)
    POP             reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    }               reduce using rule 126 (empty -> .)
    ARRAY           shift and go to state 23
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 14
    BOOLEAN         shift and go to state 15

  ! ARRAY           [ reduce using rule 126 (empty -> .) ]
  ! INT             [ reduce using rule 126 (empty -> .) ]
  ! FLOAT           [ reduce using rule 126 (empty -> .) ]
  ! STRING          [ reduce using rule 126 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 126 (empty -> .) ]

    var_opts                       shift and go to state 20
    var_body                       shift and go to state 86
    base_type                      shift and go to state 22
    var_body_rec                   shift and go to state 87
    empty                          shift and go to state 88

state 62

    (19) var_id -> ID var_id_rec .

    ;               reduce using rule 19 (var_id -> ID var_id_rec .)


state 63

    (20) var_id_rec -> empty .

    ;               reduce using rule 20 (var_id_rec -> empty .)


state 64

    (21) var_id_rec -> , . var_id
    (19) var_id -> . ID var_id_rec

    ID              shift and go to state 31

    var_id                         shift and go to state 89

state 65

    (18) var_opts -> ARRAY FROM base_type . FROM id_or_number

    FROM            shift and go to state 90


state 66

    (42) function_params -> type ID . function_params_rec
    (43) function_params_rec -> . empty
    (44) function_params_rec -> . , function_params
    (126) empty -> .

    ,               shift and go to state 92
    )               reduce using rule 126 (empty -> .)

    function_params_rec            shift and go to state 91
    empty                          shift and go to state 93

state 67

    (35) function -> function_declaration ( function_params ) . { function_variables_opt function_stm function_return }

    {               shift and go to state 94


state 68

    (6) block -> { block_stm_opt } .

    ID              reduce using rule 6 (block -> { block_stm_opt } .)
    IF              reduce using rule 6 (block -> { block_stm_opt } .)
    WHILE           reduce using rule 6 (block -> { block_stm_opt } .)
    FOR             reduce using rule 6 (block -> { block_stm_opt } .)
    READ            reduce using rule 6 (block -> { block_stm_opt } .)
    PRINT           reduce using rule 6 (block -> { block_stm_opt } .)
    PUSH            reduce using rule 6 (block -> { block_stm_opt } .)
    POP             reduce using rule 6 (block -> { block_stm_opt } .)
    }               reduce using rule 6 (block -> { block_stm_opt } .)
    RETURN          reduce using rule 6 (block -> { block_stm_opt } .)
    OR              reduce using rule 6 (block -> { block_stm_opt } .)
    ELSE            reduce using rule 6 (block -> { block_stm_opt } .)
    $end            reduce using rule 6 (block -> { block_stm_opt } .)


state 69

    (54) read -> READ add_read_op . ( add_read_var )

    (               shift and go to state 95


state 70

    (56) add_read_op -> empty .

    (               reduce using rule 56 (add_read_op -> empty .)


state 71

    (57) print -> PRINT add_print_op . ( expr_params )

    (               shift and go to state 96


state 72

    (58) add_print_op -> empty .

    (               reduce using rule 58 (add_print_op -> empty .)


state 73

    (33) iteration_opts -> WHILE HAPPENS . ( expression

    (               shift and go to state 97


state 74

    (22) assignation -> add_assignation_var = . add_assignation_sign expression
    (24) add_assignation_sign -> . empty
    (126) empty -> .

    (               reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    +               reduce using rule 126 (empty -> .)
    -               reduce using rule 126 (empty -> .)
    CONST_I         reduce using rule 126 (empty -> .)
    CONST_F         reduce using rule 126 (empty -> .)
    CONST_S         reduce using rule 126 (empty -> .)
    TRUE            reduce using rule 126 (empty -> .)
    FALSE           reduce using rule 126 (empty -> .)
    RANDOM          reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    PUSH            reduce using rule 126 (empty -> .)
    POP             reduce using rule 126 (empty -> .)

    empty                          shift and go to state 98
    add_assignation_sign           shift and go to state 99

state 75

    (67) list_pop -> POP LAST . add_list_pop_sign FROM add_list_pop_var ( )
    (69) add_list_pop_sign -> . empty
    (126) empty -> .

    FROM            reduce using rule 126 (empty -> .)

    add_list_pop_sign              shift and go to state 100
    empty                          shift and go to state 101

state 76

    (8) block_stm_opt -> statement block_stm_opt .

    }               reduce using rule 8 (block_stm_opt -> statement block_stm_opt .)


state 77

    (32) iteration -> iteration_opts ) . DO block

    DO              shift and go to state 102


state 78

    (34) iteration_opts -> FOR ( . id_or_number
    (108) id_or_number -> . ID
    (109) id_or_number -> . CONST_I

    ID              shift and go to state 105
    CONST_I         shift and go to state 103

    id_or_number                   shift and go to state 104

state 79

    (25) condition -> cond_if cond_else_if_opt . cond_else_opt
    (30) cond_else_opt -> . empty
    (31) cond_else_opt -> . ELSE HAPPENS block
    (126) empty -> .

    ELSE            shift and go to state 107
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    PUSH            reduce using rule 126 (empty -> .)
    POP             reduce using rule 126 (empty -> .)
    }               reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)

    cond_else_opt                  shift and go to state 106
    empty                          shift and go to state 108

state 80

    (27) cond_else_if_opt -> empty .

    ELSE            reduce using rule 27 (cond_else_if_opt -> empty .)
    ID              reduce using rule 27 (cond_else_if_opt -> empty .)
    IF              reduce using rule 27 (cond_else_if_opt -> empty .)
    WHILE           reduce using rule 27 (cond_else_if_opt -> empty .)
    FOR             reduce using rule 27 (cond_else_if_opt -> empty .)
    READ            reduce using rule 27 (cond_else_if_opt -> empty .)
    PRINT           reduce using rule 27 (cond_else_if_opt -> empty .)
    PUSH            reduce using rule 27 (cond_else_if_opt -> empty .)
    POP             reduce using rule 27 (cond_else_if_opt -> empty .)
    }               reduce using rule 27 (cond_else_if_opt -> empty .)
    RETURN          reduce using rule 27 (cond_else_if_opt -> empty .)


state 81

    (29) cond_else_if -> OR . IF HAPPENS ( expression ) DO block

    IF              shift and go to state 109


state 82

    (28) cond_else_if_opt -> cond_else_if . cond_else_if_opt
    (27) cond_else_if_opt -> . empty
    (28) cond_else_if_opt -> . cond_else_if cond_else_if_opt
    (126) empty -> .
    (29) cond_else_if -> . OR IF HAPPENS ( expression ) DO block

    ELSE            reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    PUSH            reduce using rule 126 (empty -> .)
    POP             reduce using rule 126 (empty -> .)
    }               reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    OR              shift and go to state 81

    cond_else_if_opt               shift and go to state 110
    empty                          shift and go to state 80
    cond_else_if                   shift and go to state 82

state 83

    (64) list_push -> PUSH TO . add_list_push_sign add_list_push_var ( expression )
    (65) add_list_push_sign -> . empty
    (126) empty -> .

    ID              reduce using rule 126 (empty -> .)

    empty                          shift and go to state 112
    add_list_push_sign             shift and go to state 111

state 84

    (63) local_function -> ID ( . expr_params )
    (59) expr_params -> . empty
    (60) expr_params -> . expression expr_params_rec
    (126) empty -> .
    (72) expression -> . exp_comp expression_opt
    (75) exp_comp -> . exp_add exp_comp_opt
    (78) exp_add -> . exp_multiply exp_add_opt
    (81) exp_multiply -> . term exp_multiply_opt
    (84) term -> . term_nested
    (85) term -> . term_body
    (86) term_nested -> . ( expression )
    (87) term_body -> . term_body_opt
    (88) term_body -> . term_body_types
    (89) term_body_opt -> . term_body_opt_signs term_body_types
    (92) term_body_types -> . ID
    (93) term_body_types -> . term_body_types_rest
    (90) term_body_opt_signs -> . +
    (91) term_body_opt_signs -> . -
    (94) term_body_types_rest -> . CONST_I term_int_add_stk
    (95) term_body_types_rest -> . CONST_F term_float_add_stk
    (96) term_body_types_rest -> . CONST_S term_string_add_stk
    (97) term_body_types_rest -> . TRUE term_bool_add_stk
    (98) term_body_types_rest -> . FALSE term_bool_add_stk
    (99) term_body_types_rest -> . random
    (100) term_body_types_rest -> . list_access
    (101) term_body_types_rest -> . function_call
    (71) random -> . RANDOM ( FROM CONST_I , TO CONST_I )
    (70) list_access -> . ID [ id_or_number ]
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    )               reduce using rule 126 (empty -> .)
    (               shift and go to state 121
    ID              shift and go to state 131
    +               shift and go to state 122
    -               shift and go to state 123
    CONST_I         shift and go to state 119
    CONST_F         shift and go to state 118
    CONST_S         shift and go to state 113
    TRUE            shift and go to state 132
    FALSE           shift and go to state 135
    RANDOM          shift and go to state 128
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    exp_comp                       shift and go to state 114
    random                         shift and go to state 115
    function_call                  shift and go to state 116
    expr_params                    shift and go to state 117
    list_pop                       shift and go to state 43
    exp_multiply                   shift and go to state 120
    term_body_types_rest           shift and go to state 129
    term_body_opt                  shift and go to state 124
    local_function                 shift and go to state 46
    term_body_types                shift and go to state 125
    list_push                      shift and go to state 51
    term_nested                    shift and go to state 126
    print                          shift and go to state 48
    empty                          shift and go to state 127
    read                           shift and go to state 53
    term_body                      shift and go to state 130
    term_body_opt_signs            shift and go to state 133
    term                           shift and go to state 134
    list_access                    shift and go to state 136
    exp_add                        shift and go to state 137
    expression                     shift and go to state 138

state 85

    (26) cond_if -> IF HAPPENS . ( expression ) DO block

    (               shift and go to state 139


state 86

    (16) var_body_rec -> var_body .

    ARRAY           reduce using rule 16 (var_body_rec -> var_body .)
    INT             reduce using rule 16 (var_body_rec -> var_body .)
    FLOAT           reduce using rule 16 (var_body_rec -> var_body .)
    STRING          reduce using rule 16 (var_body_rec -> var_body .)
    BOOLEAN         reduce using rule 16 (var_body_rec -> var_body .)
    {               reduce using rule 16 (var_body_rec -> var_body .)
    FUNCTION        reduce using rule 16 (var_body_rec -> var_body .)
    ID              reduce using rule 16 (var_body_rec -> var_body .)
    IF              reduce using rule 16 (var_body_rec -> var_body .)
    WHILE           reduce using rule 16 (var_body_rec -> var_body .)
    FOR             reduce using rule 16 (var_body_rec -> var_body .)
    READ            reduce using rule 16 (var_body_rec -> var_body .)
    PRINT           reduce using rule 16 (var_body_rec -> var_body .)
    PUSH            reduce using rule 16 (var_body_rec -> var_body .)
    POP             reduce using rule 16 (var_body_rec -> var_body .)
    RETURN          reduce using rule 16 (var_body_rec -> var_body .)
    }               reduce using rule 16 (var_body_rec -> var_body .)


state 87

    (14) var_body -> var_opts var_id ; var_body_rec .

    ARRAY           reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    INT             reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    FLOAT           reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    STRING          reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    BOOLEAN         reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    {               reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    FUNCTION        reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    ID              reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    IF              reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    WHILE           reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    FOR             reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    READ            reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    PRINT           reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    PUSH            reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    POP             reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    RETURN          reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)
    }               reduce using rule 14 (var_body -> var_opts var_id ; var_body_rec .)


state 88

    (15) var_body_rec -> empty .

    ARRAY           reduce using rule 15 (var_body_rec -> empty .)
    INT             reduce using rule 15 (var_body_rec -> empty .)
    FLOAT           reduce using rule 15 (var_body_rec -> empty .)
    STRING          reduce using rule 15 (var_body_rec -> empty .)
    BOOLEAN         reduce using rule 15 (var_body_rec -> empty .)
    {               reduce using rule 15 (var_body_rec -> empty .)
    FUNCTION        reduce using rule 15 (var_body_rec -> empty .)
    ID              reduce using rule 15 (var_body_rec -> empty .)
    IF              reduce using rule 15 (var_body_rec -> empty .)
    WHILE           reduce using rule 15 (var_body_rec -> empty .)
    FOR             reduce using rule 15 (var_body_rec -> empty .)
    READ            reduce using rule 15 (var_body_rec -> empty .)
    PRINT           reduce using rule 15 (var_body_rec -> empty .)
    PUSH            reduce using rule 15 (var_body_rec -> empty .)
    POP             reduce using rule 15 (var_body_rec -> empty .)
    RETURN          reduce using rule 15 (var_body_rec -> empty .)
    }               reduce using rule 15 (var_body_rec -> empty .)


state 89

    (21) var_id_rec -> , var_id .

    ;               reduce using rule 21 (var_id_rec -> , var_id .)


state 90

    (18) var_opts -> ARRAY FROM base_type FROM . id_or_number
    (108) id_or_number -> . ID
    (109) id_or_number -> . CONST_I

    ID              shift and go to state 105
    CONST_I         shift and go to state 103

    id_or_number                   shift and go to state 140

state 91

    (42) function_params -> type ID function_params_rec .

    )               reduce using rule 42 (function_params -> type ID function_params_rec .)


state 92

    (44) function_params_rec -> , . function_params
    (41) function_params -> . empty
    (42) function_params -> . type ID function_params_rec
    (126) empty -> .
    (106) type -> . base_type
    (107) type -> . ARRAY FROM base_type
    (110) base_type -> . INT
    (111) base_type -> . FLOAT
    (112) base_type -> . STRING
    (113) base_type -> . BOOLEAN

    )               reduce using rule 126 (empty -> .)
    ARRAY           shift and go to state 10
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 14
    BOOLEAN         shift and go to state 15

    base_type                      shift and go to state 9
    type                           shift and go to state 36
    empty                          shift and go to state 35
    function_params                shift and go to state 141

state 93

    (43) function_params_rec -> empty .

    )               reduce using rule 43 (function_params_rec -> empty .)


state 94

    (35) function -> function_declaration ( function_params ) { . function_variables_opt function_stm function_return }
    (37) function_variables_opt -> . empty
    (38) function_variables_opt -> . variables
    (126) empty -> .
    (13) variables -> . VARIABLE : var_body

    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    PUSH            reduce using rule 126 (empty -> .)
    POP             reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    }               reduce using rule 126 (empty -> .)
    VARIABLE        shift and go to state 4

    function_variables_opt         shift and go to state 142
    variables                      shift and go to state 144
    empty                          shift and go to state 143

state 95

    (54) read -> READ add_read_op ( . add_read_var )
    (55) add_read_var -> . ID

    ID              shift and go to state 146

    add_read_var                   shift and go to state 145

state 96

    (57) print -> PRINT add_print_op ( . expr_params )
    (59) expr_params -> . empty
    (60) expr_params -> . expression expr_params_rec
    (126) empty -> .
    (72) expression -> . exp_comp expression_opt
    (75) exp_comp -> . exp_add exp_comp_opt
    (78) exp_add -> . exp_multiply exp_add_opt
    (81) exp_multiply -> . term exp_multiply_opt
    (84) term -> . term_nested
    (85) term -> . term_body
    (86) term_nested -> . ( expression )
    (87) term_body -> . term_body_opt
    (88) term_body -> . term_body_types
    (89) term_body_opt -> . term_body_opt_signs term_body_types
    (92) term_body_types -> . ID
    (93) term_body_types -> . term_body_types_rest
    (90) term_body_opt_signs -> . +
    (91) term_body_opt_signs -> . -
    (94) term_body_types_rest -> . CONST_I term_int_add_stk
    (95) term_body_types_rest -> . CONST_F term_float_add_stk
    (96) term_body_types_rest -> . CONST_S term_string_add_stk
    (97) term_body_types_rest -> . TRUE term_bool_add_stk
    (98) term_body_types_rest -> . FALSE term_bool_add_stk
    (99) term_body_types_rest -> . random
    (100) term_body_types_rest -> . list_access
    (101) term_body_types_rest -> . function_call
    (71) random -> . RANDOM ( FROM CONST_I , TO CONST_I )
    (70) list_access -> . ID [ id_or_number ]
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    )               reduce using rule 126 (empty -> .)
    (               shift and go to state 121
    ID              shift and go to state 131
    +               shift and go to state 122
    -               shift and go to state 123
    CONST_I         shift and go to state 119
    CONST_F         shift and go to state 118
    CONST_S         shift and go to state 113
    TRUE            shift and go to state 132
    FALSE           shift and go to state 135
    RANDOM          shift and go to state 128
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    exp_comp                       shift and go to state 114
    random                         shift and go to state 115
    function_call                  shift and go to state 116
    expr_params                    shift and go to state 147
    list_pop                       shift and go to state 43
    exp_multiply                   shift and go to state 120
    term_body_types_rest           shift and go to state 129
    term_body_opt                  shift and go to state 124
    local_function                 shift and go to state 46
    term_body_types                shift and go to state 125
    list_push                      shift and go to state 51
    term_nested                    shift and go to state 126
    print                          shift and go to state 48
    empty                          shift and go to state 127
    read                           shift and go to state 53
    term_body                      shift and go to state 130
    term_body_opt_signs            shift and go to state 133
    term                           shift and go to state 134
    list_access                    shift and go to state 136
    exp_add                        shift and go to state 137
    expression                     shift and go to state 138

state 97

    (33) iteration_opts -> WHILE HAPPENS ( . expression
    (72) expression -> . exp_comp expression_opt
    (75) exp_comp -> . exp_add exp_comp_opt
    (78) exp_add -> . exp_multiply exp_add_opt
    (81) exp_multiply -> . term exp_multiply_opt
    (84) term -> . term_nested
    (85) term -> . term_body
    (86) term_nested -> . ( expression )
    (87) term_body -> . term_body_opt
    (88) term_body -> . term_body_types
    (89) term_body_opt -> . term_body_opt_signs term_body_types
    (92) term_body_types -> . ID
    (93) term_body_types -> . term_body_types_rest
    (90) term_body_opt_signs -> . +
    (91) term_body_opt_signs -> . -
    (94) term_body_types_rest -> . CONST_I term_int_add_stk
    (95) term_body_types_rest -> . CONST_F term_float_add_stk
    (96) term_body_types_rest -> . CONST_S term_string_add_stk
    (97) term_body_types_rest -> . TRUE term_bool_add_stk
    (98) term_body_types_rest -> . FALSE term_bool_add_stk
    (99) term_body_types_rest -> . random
    (100) term_body_types_rest -> . list_access
    (101) term_body_types_rest -> . function_call
    (71) random -> . RANDOM ( FROM CONST_I , TO CONST_I )
    (70) list_access -> . ID [ id_or_number ]
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    (               shift and go to state 121
    ID              shift and go to state 131
    +               shift and go to state 122
    -               shift and go to state 123
    CONST_I         shift and go to state 119
    CONST_F         shift and go to state 118
    CONST_S         shift and go to state 113
    TRUE            shift and go to state 132
    FALSE           shift and go to state 135
    RANDOM          shift and go to state 128
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    exp_comp                       shift and go to state 114
    random                         shift and go to state 115
    function_call                  shift and go to state 116
    list_pop                       shift and go to state 43
    exp_multiply                   shift and go to state 120
    term_body_types_rest           shift and go to state 129
    term_body_opt                  shift and go to state 124
    local_function                 shift and go to state 46
    term_body_types                shift and go to state 125
    list_push                      shift and go to state 51
    term_nested                    shift and go to state 126
    print                          shift and go to state 48
    read                           shift and go to state 53
    term_body                      shift and go to state 130
    term_body_opt_signs            shift and go to state 133
    term                           shift and go to state 134
    list_access                    shift and go to state 136
    exp_add                        shift and go to state 137
    expression                     shift and go to state 148

state 98

    (24) add_assignation_sign -> empty .

    (               reduce using rule 24 (add_assignation_sign -> empty .)
    ID              reduce using rule 24 (add_assignation_sign -> empty .)
    +               reduce using rule 24 (add_assignation_sign -> empty .)
    -               reduce using rule 24 (add_assignation_sign -> empty .)
    CONST_I         reduce using rule 24 (add_assignation_sign -> empty .)
    CONST_F         reduce using rule 24 (add_assignation_sign -> empty .)
    CONST_S         reduce using rule 24 (add_assignation_sign -> empty .)
    TRUE            reduce using rule 24 (add_assignation_sign -> empty .)
    FALSE           reduce using rule 24 (add_assignation_sign -> empty .)
    RANDOM          reduce using rule 24 (add_assignation_sign -> empty .)
    READ            reduce using rule 24 (add_assignation_sign -> empty .)
    PRINT           reduce using rule 24 (add_assignation_sign -> empty .)
    PUSH            reduce using rule 24 (add_assignation_sign -> empty .)
    POP             reduce using rule 24 (add_assignation_sign -> empty .)


state 99

    (22) assignation -> add_assignation_var = add_assignation_sign . expression
    (72) expression -> . exp_comp expression_opt
    (75) exp_comp -> . exp_add exp_comp_opt
    (78) exp_add -> . exp_multiply exp_add_opt
    (81) exp_multiply -> . term exp_multiply_opt
    (84) term -> . term_nested
    (85) term -> . term_body
    (86) term_nested -> . ( expression )
    (87) term_body -> . term_body_opt
    (88) term_body -> . term_body_types
    (89) term_body_opt -> . term_body_opt_signs term_body_types
    (92) term_body_types -> . ID
    (93) term_body_types -> . term_body_types_rest
    (90) term_body_opt_signs -> . +
    (91) term_body_opt_signs -> . -
    (94) term_body_types_rest -> . CONST_I term_int_add_stk
    (95) term_body_types_rest -> . CONST_F term_float_add_stk
    (96) term_body_types_rest -> . CONST_S term_string_add_stk
    (97) term_body_types_rest -> . TRUE term_bool_add_stk
    (98) term_body_types_rest -> . FALSE term_bool_add_stk
    (99) term_body_types_rest -> . random
    (100) term_body_types_rest -> . list_access
    (101) term_body_types_rest -> . function_call
    (71) random -> . RANDOM ( FROM CONST_I , TO CONST_I )
    (70) list_access -> . ID [ id_or_number ]
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    (               shift and go to state 121
    ID              shift and go to state 131
    +               shift and go to state 122
    -               shift and go to state 123
    CONST_I         shift and go to state 119
    CONST_F         shift and go to state 118
    CONST_S         shift and go to state 113
    TRUE            shift and go to state 132
    FALSE           shift and go to state 135
    RANDOM          shift and go to state 128
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    exp_comp                       shift and go to state 114
    random                         shift and go to state 115
    function_call                  shift and go to state 116
    list_pop                       shift and go to state 43
    exp_multiply                   shift and go to state 120
    term_body_types_rest           shift and go to state 129
    term_body_opt                  shift and go to state 124
    local_function                 shift and go to state 46
    term_body_types                shift and go to state 125
    list_push                      shift and go to state 51
    term_nested                    shift and go to state 126
    print                          shift and go to state 48
    read                           shift and go to state 53
    term_body                      shift and go to state 130
    term_body_opt_signs            shift and go to state 133
    term                           shift and go to state 134
    list_access                    shift and go to state 136
    exp_add                        shift and go to state 137
    expression                     shift and go to state 149

state 100

    (67) list_pop -> POP LAST add_list_pop_sign . FROM add_list_pop_var ( )

    FROM            shift and go to state 150


state 101

    (69) add_list_pop_sign -> empty .

    FROM            reduce using rule 69 (add_list_pop_sign -> empty .)


state 102

    (32) iteration -> iteration_opts ) DO . block
    (6) block -> . { block_stm_opt }

    {               shift and go to state 28

    block                          shift and go to state 151

state 103

    (109) id_or_number -> CONST_I .

    )               reduce using rule 109 (id_or_number -> CONST_I .)
    ]               reduce using rule 109 (id_or_number -> CONST_I .)
    ID              reduce using rule 109 (id_or_number -> CONST_I .)


state 104

    (34) iteration_opts -> FOR ( id_or_number .

    )               reduce using rule 34 (iteration_opts -> FOR ( id_or_number .)


state 105

    (108) id_or_number -> ID .

    )               reduce using rule 108 (id_or_number -> ID .)
    ]               reduce using rule 108 (id_or_number -> ID .)
    ID              reduce using rule 108 (id_or_number -> ID .)


state 106

    (25) condition -> cond_if cond_else_if_opt cond_else_opt .

    ID              reduce using rule 25 (condition -> cond_if cond_else_if_opt cond_else_opt .)
    IF              reduce using rule 25 (condition -> cond_if cond_else_if_opt cond_else_opt .)
    WHILE           reduce using rule 25 (condition -> cond_if cond_else_if_opt cond_else_opt .)
    FOR             reduce using rule 25 (condition -> cond_if cond_else_if_opt cond_else_opt .)
    READ            reduce using rule 25 (condition -> cond_if cond_else_if_opt cond_else_opt .)
    PRINT           reduce using rule 25 (condition -> cond_if cond_else_if_opt cond_else_opt .)
    PUSH            reduce using rule 25 (condition -> cond_if cond_else_if_opt cond_else_opt .)
    POP             reduce using rule 25 (condition -> cond_if cond_else_if_opt cond_else_opt .)
    RETURN          reduce using rule 25 (condition -> cond_if cond_else_if_opt cond_else_opt .)
    }               reduce using rule 25 (condition -> cond_if cond_else_if_opt cond_else_opt .)


state 107

    (31) cond_else_opt -> ELSE . HAPPENS block

    HAPPENS         shift and go to state 152


state 108

    (30) cond_else_opt -> empty .

    ID              reduce using rule 30 (cond_else_opt -> empty .)
    IF              reduce using rule 30 (cond_else_opt -> empty .)
    WHILE           reduce using rule 30 (cond_else_opt -> empty .)
    FOR             reduce using rule 30 (cond_else_opt -> empty .)
    READ            reduce using rule 30 (cond_else_opt -> empty .)
    PRINT           reduce using rule 30 (cond_else_opt -> empty .)
    PUSH            reduce using rule 30 (cond_else_opt -> empty .)
    POP             reduce using rule 30 (cond_else_opt -> empty .)
    }               reduce using rule 30 (cond_else_opt -> empty .)
    RETURN          reduce using rule 30 (cond_else_opt -> empty .)


state 109

    (29) cond_else_if -> OR IF . HAPPENS ( expression ) DO block

    HAPPENS         shift and go to state 153


state 110

    (28) cond_else_if_opt -> cond_else_if cond_else_if_opt .

    ELSE            reduce using rule 28 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    ID              reduce using rule 28 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    IF              reduce using rule 28 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    WHILE           reduce using rule 28 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    FOR             reduce using rule 28 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    READ            reduce using rule 28 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    PRINT           reduce using rule 28 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    PUSH            reduce using rule 28 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    POP             reduce using rule 28 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    }               reduce using rule 28 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)
    RETURN          reduce using rule 28 (cond_else_if_opt -> cond_else_if cond_else_if_opt .)


state 111

    (64) list_push -> PUSH TO add_list_push_sign . add_list_push_var ( expression )
    (66) add_list_push_var -> . ID

    ID              shift and go to state 155

    add_list_push_var              shift and go to state 154

state 112

    (65) add_list_push_sign -> empty .

    ID              reduce using rule 65 (add_list_push_sign -> empty .)


state 113

    (96) term_body_types_rest -> CONST_S . term_string_add_stk
    (104) term_string_add_stk -> . empty
    (126) empty -> .

    *               reduce using rule 126 (empty -> .)
    /               reduce using rule 126 (empty -> .)
    +               reduce using rule 126 (empty -> .)
    -               reduce using rule 126 (empty -> .)
    <               reduce using rule 126 (empty -> .)
    >               reduce using rule 126 (empty -> .)
    EQ              reduce using rule 126 (empty -> .)
    NEQ             reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    ,               reduce using rule 126 (empty -> .)
    )               reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    PUSH            reduce using rule 126 (empty -> .)
    POP             reduce using rule 126 (empty -> .)
    }               reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)

    term_string_add_stk            shift and go to state 156
    empty                          shift and go to state 157

state 114

    (72) expression -> exp_comp . expression_opt
    (73) expression_opt -> . empty
    (74) expression_opt -> . logic_operators expression
    (126) empty -> .
    (114) logic_operators -> . AND
    (115) logic_operators -> . OR

    ,               reduce using rule 126 (empty -> .)
    )               reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    PUSH            reduce using rule 126 (empty -> .)
    POP             reduce using rule 126 (empty -> .)
    }               reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    AND             shift and go to state 158
    OR              shift and go to state 161

    expression_opt                 shift and go to state 160
    empty                          shift and go to state 162
    logic_operators                shift and go to state 159

state 115

    (99) term_body_types_rest -> random .

    *               reduce using rule 99 (term_body_types_rest -> random .)
    /               reduce using rule 99 (term_body_types_rest -> random .)
    +               reduce using rule 99 (term_body_types_rest -> random .)
    -               reduce using rule 99 (term_body_types_rest -> random .)
    <               reduce using rule 99 (term_body_types_rest -> random .)
    >               reduce using rule 99 (term_body_types_rest -> random .)
    EQ              reduce using rule 99 (term_body_types_rest -> random .)
    NEQ             reduce using rule 99 (term_body_types_rest -> random .)
    GTE             reduce using rule 99 (term_body_types_rest -> random .)
    LTE             reduce using rule 99 (term_body_types_rest -> random .)
    AND             reduce using rule 99 (term_body_types_rest -> random .)
    OR              reduce using rule 99 (term_body_types_rest -> random .)
    ,               reduce using rule 99 (term_body_types_rest -> random .)
    )               reduce using rule 99 (term_body_types_rest -> random .)
    ID              reduce using rule 99 (term_body_types_rest -> random .)
    IF              reduce using rule 99 (term_body_types_rest -> random .)
    WHILE           reduce using rule 99 (term_body_types_rest -> random .)
    FOR             reduce using rule 99 (term_body_types_rest -> random .)
    READ            reduce using rule 99 (term_body_types_rest -> random .)
    PRINT           reduce using rule 99 (term_body_types_rest -> random .)
    PUSH            reduce using rule 99 (term_body_types_rest -> random .)
    POP             reduce using rule 99 (term_body_types_rest -> random .)
    }               reduce using rule 99 (term_body_types_rest -> random .)
    RETURN          reduce using rule 99 (term_body_types_rest -> random .)


state 116

    (101) term_body_types_rest -> function_call .

    *               reduce using rule 101 (term_body_types_rest -> function_call .)
    /               reduce using rule 101 (term_body_types_rest -> function_call .)
    +               reduce using rule 101 (term_body_types_rest -> function_call .)
    -               reduce using rule 101 (term_body_types_rest -> function_call .)
    <               reduce using rule 101 (term_body_types_rest -> function_call .)
    >               reduce using rule 101 (term_body_types_rest -> function_call .)
    EQ              reduce using rule 101 (term_body_types_rest -> function_call .)
    NEQ             reduce using rule 101 (term_body_types_rest -> function_call .)
    GTE             reduce using rule 101 (term_body_types_rest -> function_call .)
    LTE             reduce using rule 101 (term_body_types_rest -> function_call .)
    AND             reduce using rule 101 (term_body_types_rest -> function_call .)
    OR              reduce using rule 101 (term_body_types_rest -> function_call .)
    ,               reduce using rule 101 (term_body_types_rest -> function_call .)
    )               reduce using rule 101 (term_body_types_rest -> function_call .)
    ID              reduce using rule 101 (term_body_types_rest -> function_call .)
    IF              reduce using rule 101 (term_body_types_rest -> function_call .)
    WHILE           reduce using rule 101 (term_body_types_rest -> function_call .)
    FOR             reduce using rule 101 (term_body_types_rest -> function_call .)
    READ            reduce using rule 101 (term_body_types_rest -> function_call .)
    PRINT           reduce using rule 101 (term_body_types_rest -> function_call .)
    PUSH            reduce using rule 101 (term_body_types_rest -> function_call .)
    POP             reduce using rule 101 (term_body_types_rest -> function_call .)
    }               reduce using rule 101 (term_body_types_rest -> function_call .)
    RETURN          reduce using rule 101 (term_body_types_rest -> function_call .)


state 117

    (63) local_function -> ID ( expr_params . )

    )               shift and go to state 163


state 118

    (95) term_body_types_rest -> CONST_F . term_float_add_stk
    (103) term_float_add_stk -> . empty
    (126) empty -> .

    *               reduce using rule 126 (empty -> .)
    /               reduce using rule 126 (empty -> .)
    +               reduce using rule 126 (empty -> .)
    -               reduce using rule 126 (empty -> .)
    <               reduce using rule 126 (empty -> .)
    >               reduce using rule 126 (empty -> .)
    EQ              reduce using rule 126 (empty -> .)
    NEQ             reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    ,               reduce using rule 126 (empty -> .)
    )               reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    PUSH            reduce using rule 126 (empty -> .)
    POP             reduce using rule 126 (empty -> .)
    }               reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)

    empty                          shift and go to state 164
    term_float_add_stk             shift and go to state 165

state 119

    (94) term_body_types_rest -> CONST_I . term_int_add_stk
    (102) term_int_add_stk -> . empty
    (126) empty -> .

    *               reduce using rule 126 (empty -> .)
    /               reduce using rule 126 (empty -> .)
    +               reduce using rule 126 (empty -> .)
    -               reduce using rule 126 (empty -> .)
    <               reduce using rule 126 (empty -> .)
    >               reduce using rule 126 (empty -> .)
    EQ              reduce using rule 126 (empty -> .)
    NEQ             reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    ,               reduce using rule 126 (empty -> .)
    )               reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    PUSH            reduce using rule 126 (empty -> .)
    POP             reduce using rule 126 (empty -> .)
    }               reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)

    term_int_add_stk               shift and go to state 166
    empty                          shift and go to state 167

state 120

    (78) exp_add -> exp_multiply . exp_add_opt
    (79) exp_add_opt -> . empty
    (80) exp_add_opt -> . add_operators exp_add
    (126) empty -> .
    (124) add_operators -> . +
    (125) add_operators -> . -

    <               reduce using rule 126 (empty -> .)
    >               reduce using rule 126 (empty -> .)
    EQ              reduce using rule 126 (empty -> .)
    NEQ             reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    ,               reduce using rule 126 (empty -> .)
    )               reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    PUSH            reduce using rule 126 (empty -> .)
    POP             reduce using rule 126 (empty -> .)
    }               reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    +               shift and go to state 171
    -               shift and go to state 168

    exp_add_opt                    shift and go to state 170
    add_operators                  shift and go to state 169
    empty                          shift and go to state 172

state 121

    (86) term_nested -> ( . expression )
    (72) expression -> . exp_comp expression_opt
    (75) exp_comp -> . exp_add exp_comp_opt
    (78) exp_add -> . exp_multiply exp_add_opt
    (81) exp_multiply -> . term exp_multiply_opt
    (84) term -> . term_nested
    (85) term -> . term_body
    (86) term_nested -> . ( expression )
    (87) term_body -> . term_body_opt
    (88) term_body -> . term_body_types
    (89) term_body_opt -> . term_body_opt_signs term_body_types
    (92) term_body_types -> . ID
    (93) term_body_types -> . term_body_types_rest
    (90) term_body_opt_signs -> . +
    (91) term_body_opt_signs -> . -
    (94) term_body_types_rest -> . CONST_I term_int_add_stk
    (95) term_body_types_rest -> . CONST_F term_float_add_stk
    (96) term_body_types_rest -> . CONST_S term_string_add_stk
    (97) term_body_types_rest -> . TRUE term_bool_add_stk
    (98) term_body_types_rest -> . FALSE term_bool_add_stk
    (99) term_body_types_rest -> . random
    (100) term_body_types_rest -> . list_access
    (101) term_body_types_rest -> . function_call
    (71) random -> . RANDOM ( FROM CONST_I , TO CONST_I )
    (70) list_access -> . ID [ id_or_number ]
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    (               shift and go to state 121
    ID              shift and go to state 131
    +               shift and go to state 122
    -               shift and go to state 123
    CONST_I         shift and go to state 119
    CONST_F         shift and go to state 118
    CONST_S         shift and go to state 113
    TRUE            shift and go to state 132
    FALSE           shift and go to state 135
    RANDOM          shift and go to state 128
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    exp_comp                       shift and go to state 114
    random                         shift and go to state 115
    function_call                  shift and go to state 116
    list_pop                       shift and go to state 43
    exp_multiply                   shift and go to state 120
    term_body_types_rest           shift and go to state 129
    term_body_opt                  shift and go to state 124
    local_function                 shift and go to state 46
    term_body_types                shift and go to state 125
    list_push                      shift and go to state 51
    term_nested                    shift and go to state 126
    print                          shift and go to state 48
    read                           shift and go to state 53
    term_body                      shift and go to state 130
    term_body_opt_signs            shift and go to state 133
    term                           shift and go to state 134
    list_access                    shift and go to state 136
    exp_add                        shift and go to state 137
    expression                     shift and go to state 173

state 122

    (90) term_body_opt_signs -> + .

    ID              reduce using rule 90 (term_body_opt_signs -> + .)
    CONST_I         reduce using rule 90 (term_body_opt_signs -> + .)
    CONST_F         reduce using rule 90 (term_body_opt_signs -> + .)
    CONST_S         reduce using rule 90 (term_body_opt_signs -> + .)
    TRUE            reduce using rule 90 (term_body_opt_signs -> + .)
    FALSE           reduce using rule 90 (term_body_opt_signs -> + .)
    RANDOM          reduce using rule 90 (term_body_opt_signs -> + .)
    READ            reduce using rule 90 (term_body_opt_signs -> + .)
    PRINT           reduce using rule 90 (term_body_opt_signs -> + .)
    PUSH            reduce using rule 90 (term_body_opt_signs -> + .)
    POP             reduce using rule 90 (term_body_opt_signs -> + .)


state 123

    (91) term_body_opt_signs -> - .

    ID              reduce using rule 91 (term_body_opt_signs -> - .)
    CONST_I         reduce using rule 91 (term_body_opt_signs -> - .)
    CONST_F         reduce using rule 91 (term_body_opt_signs -> - .)
    CONST_S         reduce using rule 91 (term_body_opt_signs -> - .)
    TRUE            reduce using rule 91 (term_body_opt_signs -> - .)
    FALSE           reduce using rule 91 (term_body_opt_signs -> - .)
    RANDOM          reduce using rule 91 (term_body_opt_signs -> - .)
    READ            reduce using rule 91 (term_body_opt_signs -> - .)
    PRINT           reduce using rule 91 (term_body_opt_signs -> - .)
    PUSH            reduce using rule 91 (term_body_opt_signs -> - .)
    POP             reduce using rule 91 (term_body_opt_signs -> - .)


state 124

    (87) term_body -> term_body_opt .

    *               reduce using rule 87 (term_body -> term_body_opt .)
    /               reduce using rule 87 (term_body -> term_body_opt .)
    +               reduce using rule 87 (term_body -> term_body_opt .)
    -               reduce using rule 87 (term_body -> term_body_opt .)
    <               reduce using rule 87 (term_body -> term_body_opt .)
    >               reduce using rule 87 (term_body -> term_body_opt .)
    EQ              reduce using rule 87 (term_body -> term_body_opt .)
    NEQ             reduce using rule 87 (term_body -> term_body_opt .)
    GTE             reduce using rule 87 (term_body -> term_body_opt .)
    LTE             reduce using rule 87 (term_body -> term_body_opt .)
    AND             reduce using rule 87 (term_body -> term_body_opt .)
    OR              reduce using rule 87 (term_body -> term_body_opt .)
    ,               reduce using rule 87 (term_body -> term_body_opt .)
    )               reduce using rule 87 (term_body -> term_body_opt .)
    ID              reduce using rule 87 (term_body -> term_body_opt .)
    IF              reduce using rule 87 (term_body -> term_body_opt .)
    WHILE           reduce using rule 87 (term_body -> term_body_opt .)
    FOR             reduce using rule 87 (term_body -> term_body_opt .)
    READ            reduce using rule 87 (term_body -> term_body_opt .)
    PRINT           reduce using rule 87 (term_body -> term_body_opt .)
    PUSH            reduce using rule 87 (term_body -> term_body_opt .)
    POP             reduce using rule 87 (term_body -> term_body_opt .)
    }               reduce using rule 87 (term_body -> term_body_opt .)
    RETURN          reduce using rule 87 (term_body -> term_body_opt .)


state 125

    (88) term_body -> term_body_types .

    *               reduce using rule 88 (term_body -> term_body_types .)
    /               reduce using rule 88 (term_body -> term_body_types .)
    +               reduce using rule 88 (term_body -> term_body_types .)
    -               reduce using rule 88 (term_body -> term_body_types .)
    <               reduce using rule 88 (term_body -> term_body_types .)
    >               reduce using rule 88 (term_body -> term_body_types .)
    EQ              reduce using rule 88 (term_body -> term_body_types .)
    NEQ             reduce using rule 88 (term_body -> term_body_types .)
    GTE             reduce using rule 88 (term_body -> term_body_types .)
    LTE             reduce using rule 88 (term_body -> term_body_types .)
    AND             reduce using rule 88 (term_body -> term_body_types .)
    OR              reduce using rule 88 (term_body -> term_body_types .)
    ,               reduce using rule 88 (term_body -> term_body_types .)
    )               reduce using rule 88 (term_body -> term_body_types .)
    ID              reduce using rule 88 (term_body -> term_body_types .)
    IF              reduce using rule 88 (term_body -> term_body_types .)
    WHILE           reduce using rule 88 (term_body -> term_body_types .)
    FOR             reduce using rule 88 (term_body -> term_body_types .)
    READ            reduce using rule 88 (term_body -> term_body_types .)
    PRINT           reduce using rule 88 (term_body -> term_body_types .)
    PUSH            reduce using rule 88 (term_body -> term_body_types .)
    POP             reduce using rule 88 (term_body -> term_body_types .)
    }               reduce using rule 88 (term_body -> term_body_types .)
    RETURN          reduce using rule 88 (term_body -> term_body_types .)


state 126

    (84) term -> term_nested .

    *               reduce using rule 84 (term -> term_nested .)
    /               reduce using rule 84 (term -> term_nested .)
    +               reduce using rule 84 (term -> term_nested .)
    -               reduce using rule 84 (term -> term_nested .)
    <               reduce using rule 84 (term -> term_nested .)
    >               reduce using rule 84 (term -> term_nested .)
    EQ              reduce using rule 84 (term -> term_nested .)
    NEQ             reduce using rule 84 (term -> term_nested .)
    GTE             reduce using rule 84 (term -> term_nested .)
    LTE             reduce using rule 84 (term -> term_nested .)
    AND             reduce using rule 84 (term -> term_nested .)
    OR              reduce using rule 84 (term -> term_nested .)
    ID              reduce using rule 84 (term -> term_nested .)
    IF              reduce using rule 84 (term -> term_nested .)
    WHILE           reduce using rule 84 (term -> term_nested .)
    FOR             reduce using rule 84 (term -> term_nested .)
    READ            reduce using rule 84 (term -> term_nested .)
    PRINT           reduce using rule 84 (term -> term_nested .)
    PUSH            reduce using rule 84 (term -> term_nested .)
    POP             reduce using rule 84 (term -> term_nested .)
    }               reduce using rule 84 (term -> term_nested .)
    RETURN          reduce using rule 84 (term -> term_nested .)
    ,               reduce using rule 84 (term -> term_nested .)
    )               reduce using rule 84 (term -> term_nested .)


state 127

    (59) expr_params -> empty .

    )               reduce using rule 59 (expr_params -> empty .)


state 128

    (71) random -> RANDOM . ( FROM CONST_I , TO CONST_I )

    (               shift and go to state 174


state 129

    (93) term_body_types -> term_body_types_rest .

    *               reduce using rule 93 (term_body_types -> term_body_types_rest .)
    /               reduce using rule 93 (term_body_types -> term_body_types_rest .)
    +               reduce using rule 93 (term_body_types -> term_body_types_rest .)
    -               reduce using rule 93 (term_body_types -> term_body_types_rest .)
    <               reduce using rule 93 (term_body_types -> term_body_types_rest .)
    >               reduce using rule 93 (term_body_types -> term_body_types_rest .)
    EQ              reduce using rule 93 (term_body_types -> term_body_types_rest .)
    NEQ             reduce using rule 93 (term_body_types -> term_body_types_rest .)
    GTE             reduce using rule 93 (term_body_types -> term_body_types_rest .)
    LTE             reduce using rule 93 (term_body_types -> term_body_types_rest .)
    AND             reduce using rule 93 (term_body_types -> term_body_types_rest .)
    OR              reduce using rule 93 (term_body_types -> term_body_types_rest .)
    ,               reduce using rule 93 (term_body_types -> term_body_types_rest .)
    )               reduce using rule 93 (term_body_types -> term_body_types_rest .)
    ID              reduce using rule 93 (term_body_types -> term_body_types_rest .)
    IF              reduce using rule 93 (term_body_types -> term_body_types_rest .)
    WHILE           reduce using rule 93 (term_body_types -> term_body_types_rest .)
    FOR             reduce using rule 93 (term_body_types -> term_body_types_rest .)
    READ            reduce using rule 93 (term_body_types -> term_body_types_rest .)
    PRINT           reduce using rule 93 (term_body_types -> term_body_types_rest .)
    PUSH            reduce using rule 93 (term_body_types -> term_body_types_rest .)
    POP             reduce using rule 93 (term_body_types -> term_body_types_rest .)
    }               reduce using rule 93 (term_body_types -> term_body_types_rest .)
    RETURN          reduce using rule 93 (term_body_types -> term_body_types_rest .)


state 130

    (85) term -> term_body .

    *               reduce using rule 85 (term -> term_body .)
    /               reduce using rule 85 (term -> term_body .)
    +               reduce using rule 85 (term -> term_body .)
    -               reduce using rule 85 (term -> term_body .)
    <               reduce using rule 85 (term -> term_body .)
    >               reduce using rule 85 (term -> term_body .)
    EQ              reduce using rule 85 (term -> term_body .)
    NEQ             reduce using rule 85 (term -> term_body .)
    GTE             reduce using rule 85 (term -> term_body .)
    LTE             reduce using rule 85 (term -> term_body .)
    AND             reduce using rule 85 (term -> term_body .)
    OR              reduce using rule 85 (term -> term_body .)
    ID              reduce using rule 85 (term -> term_body .)
    IF              reduce using rule 85 (term -> term_body .)
    WHILE           reduce using rule 85 (term -> term_body .)
    FOR             reduce using rule 85 (term -> term_body .)
    READ            reduce using rule 85 (term -> term_body .)
    PRINT           reduce using rule 85 (term -> term_body .)
    PUSH            reduce using rule 85 (term -> term_body .)
    POP             reduce using rule 85 (term -> term_body .)
    }               reduce using rule 85 (term -> term_body .)
    RETURN          reduce using rule 85 (term -> term_body .)
    ,               reduce using rule 85 (term -> term_body .)
    )               reduce using rule 85 (term -> term_body .)


state 131

    (92) term_body_types -> ID .
    (70) list_access -> ID . [ id_or_number ]
    (63) local_function -> ID . ( expr_params )

    *               reduce using rule 92 (term_body_types -> ID .)
    /               reduce using rule 92 (term_body_types -> ID .)
    +               reduce using rule 92 (term_body_types -> ID .)
    -               reduce using rule 92 (term_body_types -> ID .)
    <               reduce using rule 92 (term_body_types -> ID .)
    >               reduce using rule 92 (term_body_types -> ID .)
    EQ              reduce using rule 92 (term_body_types -> ID .)
    NEQ             reduce using rule 92 (term_body_types -> ID .)
    GTE             reduce using rule 92 (term_body_types -> ID .)
    LTE             reduce using rule 92 (term_body_types -> ID .)
    AND             reduce using rule 92 (term_body_types -> ID .)
    OR              reduce using rule 92 (term_body_types -> ID .)
    ,               reduce using rule 92 (term_body_types -> ID .)
    )               reduce using rule 92 (term_body_types -> ID .)
    ID              reduce using rule 92 (term_body_types -> ID .)
    IF              reduce using rule 92 (term_body_types -> ID .)
    WHILE           reduce using rule 92 (term_body_types -> ID .)
    FOR             reduce using rule 92 (term_body_types -> ID .)
    READ            reduce using rule 92 (term_body_types -> ID .)
    PRINT           reduce using rule 92 (term_body_types -> ID .)
    PUSH            reduce using rule 92 (term_body_types -> ID .)
    POP             reduce using rule 92 (term_body_types -> ID .)
    }               reduce using rule 92 (term_body_types -> ID .)
    RETURN          reduce using rule 92 (term_body_types -> ID .)
    [               shift and go to state 175
    (               shift and go to state 84


state 132

    (97) term_body_types_rest -> TRUE . term_bool_add_stk
    (105) term_bool_add_stk -> . empty
    (126) empty -> .

    *               reduce using rule 126 (empty -> .)
    /               reduce using rule 126 (empty -> .)
    +               reduce using rule 126 (empty -> .)
    -               reduce using rule 126 (empty -> .)
    <               reduce using rule 126 (empty -> .)
    >               reduce using rule 126 (empty -> .)
    EQ              reduce using rule 126 (empty -> .)
    NEQ             reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    ,               reduce using rule 126 (empty -> .)
    )               reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    PUSH            reduce using rule 126 (empty -> .)
    POP             reduce using rule 126 (empty -> .)
    }               reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)

    term_bool_add_stk              shift and go to state 176
    empty                          shift and go to state 177

state 133

    (89) term_body_opt -> term_body_opt_signs . term_body_types
    (92) term_body_types -> . ID
    (93) term_body_types -> . term_body_types_rest
    (94) term_body_types_rest -> . CONST_I term_int_add_stk
    (95) term_body_types_rest -> . CONST_F term_float_add_stk
    (96) term_body_types_rest -> . CONST_S term_string_add_stk
    (97) term_body_types_rest -> . TRUE term_bool_add_stk
    (98) term_body_types_rest -> . FALSE term_bool_add_stk
    (99) term_body_types_rest -> . random
    (100) term_body_types_rest -> . list_access
    (101) term_body_types_rest -> . function_call
    (71) random -> . RANDOM ( FROM CONST_I , TO CONST_I )
    (70) list_access -> . ID [ id_or_number ]
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    ID              shift and go to state 131
    CONST_I         shift and go to state 119
    CONST_F         shift and go to state 118
    CONST_S         shift and go to state 113
    TRUE            shift and go to state 132
    FALSE           shift and go to state 135
    RANDOM          shift and go to state 128
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    random                         shift and go to state 115
    function_call                  shift and go to state 116
    list_pop                       shift and go to state 43
    local_function                 shift and go to state 46
    term_body_types                shift and go to state 178
    list_push                      shift and go to state 51
    print                          shift and go to state 48
    read                           shift and go to state 53
    term_body_types_rest           shift and go to state 129
    list_access                    shift and go to state 136

state 134

    (81) exp_multiply -> term . exp_multiply_opt
    (82) exp_multiply_opt -> . empty
    (83) exp_multiply_opt -> . multiply_operators exp_multiply
    (126) empty -> .
    (122) multiply_operators -> . *
    (123) multiply_operators -> . /

    +               reduce using rule 126 (empty -> .)
    -               reduce using rule 126 (empty -> .)
    <               reduce using rule 126 (empty -> .)
    >               reduce using rule 126 (empty -> .)
    EQ              reduce using rule 126 (empty -> .)
    NEQ             reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    ,               reduce using rule 126 (empty -> .)
    )               reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    PUSH            reduce using rule 126 (empty -> .)
    POP             reduce using rule 126 (empty -> .)
    }               reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    *               shift and go to state 181
    /               shift and go to state 182

    multiply_operators             shift and go to state 179
    empty                          shift and go to state 183
    exp_multiply_opt               shift and go to state 180

state 135

    (98) term_body_types_rest -> FALSE . term_bool_add_stk
    (105) term_bool_add_stk -> . empty
    (126) empty -> .

    *               reduce using rule 126 (empty -> .)
    /               reduce using rule 126 (empty -> .)
    +               reduce using rule 126 (empty -> .)
    -               reduce using rule 126 (empty -> .)
    <               reduce using rule 126 (empty -> .)
    >               reduce using rule 126 (empty -> .)
    EQ              reduce using rule 126 (empty -> .)
    NEQ             reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    ,               reduce using rule 126 (empty -> .)
    )               reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    PUSH            reduce using rule 126 (empty -> .)
    POP             reduce using rule 126 (empty -> .)
    }               reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)

    term_bool_add_stk              shift and go to state 184
    empty                          shift and go to state 177

state 136

    (100) term_body_types_rest -> list_access .

    *               reduce using rule 100 (term_body_types_rest -> list_access .)
    /               reduce using rule 100 (term_body_types_rest -> list_access .)
    +               reduce using rule 100 (term_body_types_rest -> list_access .)
    -               reduce using rule 100 (term_body_types_rest -> list_access .)
    <               reduce using rule 100 (term_body_types_rest -> list_access .)
    >               reduce using rule 100 (term_body_types_rest -> list_access .)
    EQ              reduce using rule 100 (term_body_types_rest -> list_access .)
    NEQ             reduce using rule 100 (term_body_types_rest -> list_access .)
    GTE             reduce using rule 100 (term_body_types_rest -> list_access .)
    LTE             reduce using rule 100 (term_body_types_rest -> list_access .)
    AND             reduce using rule 100 (term_body_types_rest -> list_access .)
    OR              reduce using rule 100 (term_body_types_rest -> list_access .)
    ,               reduce using rule 100 (term_body_types_rest -> list_access .)
    )               reduce using rule 100 (term_body_types_rest -> list_access .)
    ID              reduce using rule 100 (term_body_types_rest -> list_access .)
    IF              reduce using rule 100 (term_body_types_rest -> list_access .)
    WHILE           reduce using rule 100 (term_body_types_rest -> list_access .)
    FOR             reduce using rule 100 (term_body_types_rest -> list_access .)
    READ            reduce using rule 100 (term_body_types_rest -> list_access .)
    PRINT           reduce using rule 100 (term_body_types_rest -> list_access .)
    PUSH            reduce using rule 100 (term_body_types_rest -> list_access .)
    POP             reduce using rule 100 (term_body_types_rest -> list_access .)
    }               reduce using rule 100 (term_body_types_rest -> list_access .)
    RETURN          reduce using rule 100 (term_body_types_rest -> list_access .)


state 137

    (75) exp_comp -> exp_add . exp_comp_opt
    (76) exp_comp_opt -> . empty
    (77) exp_comp_opt -> . comp_operators exp_comp
    (126) empty -> .
    (116) comp_operators -> . <
    (117) comp_operators -> . >
    (118) comp_operators -> . EQ
    (119) comp_operators -> . NEQ
    (120) comp_operators -> . GTE
    (121) comp_operators -> . LTE

    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    ,               reduce using rule 126 (empty -> .)
    )               reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    PUSH            reduce using rule 126 (empty -> .)
    POP             reduce using rule 126 (empty -> .)
    }               reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    <               shift and go to state 191
    >               shift and go to state 189
    EQ              shift and go to state 190
    NEQ             shift and go to state 185
    GTE             shift and go to state 187
    LTE             shift and go to state 186

    comp_operators                 shift and go to state 193
    empty                          shift and go to state 192
    exp_comp_opt                   shift and go to state 188

state 138

    (60) expr_params -> expression . expr_params_rec
    (61) expr_params_rec -> . empty
    (62) expr_params_rec -> . , expr_params
    (126) empty -> .

    ,               shift and go to state 196
    )               reduce using rule 126 (empty -> .)

    empty                          shift and go to state 194
    expr_params_rec                shift and go to state 195

state 139

    (26) cond_if -> IF HAPPENS ( . expression ) DO block
    (72) expression -> . exp_comp expression_opt
    (75) exp_comp -> . exp_add exp_comp_opt
    (78) exp_add -> . exp_multiply exp_add_opt
    (81) exp_multiply -> . term exp_multiply_opt
    (84) term -> . term_nested
    (85) term -> . term_body
    (86) term_nested -> . ( expression )
    (87) term_body -> . term_body_opt
    (88) term_body -> . term_body_types
    (89) term_body_opt -> . term_body_opt_signs term_body_types
    (92) term_body_types -> . ID
    (93) term_body_types -> . term_body_types_rest
    (90) term_body_opt_signs -> . +
    (91) term_body_opt_signs -> . -
    (94) term_body_types_rest -> . CONST_I term_int_add_stk
    (95) term_body_types_rest -> . CONST_F term_float_add_stk
    (96) term_body_types_rest -> . CONST_S term_string_add_stk
    (97) term_body_types_rest -> . TRUE term_bool_add_stk
    (98) term_body_types_rest -> . FALSE term_bool_add_stk
    (99) term_body_types_rest -> . random
    (100) term_body_types_rest -> . list_access
    (101) term_body_types_rest -> . function_call
    (71) random -> . RANDOM ( FROM CONST_I , TO CONST_I )
    (70) list_access -> . ID [ id_or_number ]
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    (               shift and go to state 121
    ID              shift and go to state 131
    +               shift and go to state 122
    -               shift and go to state 123
    CONST_I         shift and go to state 119
    CONST_F         shift and go to state 118
    CONST_S         shift and go to state 113
    TRUE            shift and go to state 132
    FALSE           shift and go to state 135
    RANDOM          shift and go to state 128
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    exp_comp                       shift and go to state 114
    random                         shift and go to state 115
    function_call                  shift and go to state 116
    list_pop                       shift and go to state 43
    exp_multiply                   shift and go to state 120
    term_body_types_rest           shift and go to state 129
    term_body_opt                  shift and go to state 124
    local_function                 shift and go to state 46
    term_body_types                shift and go to state 125
    list_push                      shift and go to state 51
    term_nested                    shift and go to state 126
    print                          shift and go to state 48
    read                           shift and go to state 53
    term_body                      shift and go to state 130
    term_body_opt_signs            shift and go to state 133
    term                           shift and go to state 134
    list_access                    shift and go to state 136
    exp_add                        shift and go to state 137
    expression                     shift and go to state 197

state 140

    (18) var_opts -> ARRAY FROM base_type FROM id_or_number .

    ID              reduce using rule 18 (var_opts -> ARRAY FROM base_type FROM id_or_number .)


state 141

    (44) function_params_rec -> , function_params .

    )               reduce using rule 44 (function_params_rec -> , function_params .)


state 142

    (35) function -> function_declaration ( function_params ) { function_variables_opt . function_stm function_return }
    (45) function_stm -> . empty
    (46) function_stm -> . statement function_stm
    (126) empty -> .
    (9) statement -> . assignation
    (10) statement -> . condition
    (11) statement -> . iteration
    (12) statement -> . function_call
    (22) assignation -> . add_assignation_var = add_assignation_sign expression
    (25) condition -> . cond_if cond_else_if_opt cond_else_opt
    (32) iteration -> . iteration_opts ) DO block
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (23) add_assignation_var -> . ID
    (26) cond_if -> . IF HAPPENS ( expression ) DO block
    (33) iteration_opts -> . WHILE HAPPENS ( expression
    (34) iteration_opts -> . FOR ( id_or_number
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    RETURN          reduce using rule 126 (empty -> .)
    }               reduce using rule 126 (empty -> .)
    ID              shift and go to state 56
    IF              shift and go to state 58
    WHILE           shift and go to state 42
    FOR             shift and go to state 52
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    function_call                  shift and go to state 40
    list_pop                       shift and go to state 43
    add_assignation_var            shift and go to state 44
    local_function                 shift and go to state 46
    statement                      shift and go to state 198
    print                          shift and go to state 48
    empty                          shift and go to state 199
    iteration_opts                 shift and go to state 50
    list_push                      shift and go to state 51
    read                           shift and go to state 53
    cond_if                        shift and go to state 54
    condition                      shift and go to state 57
    assignation                    shift and go to state 59
    iteration                      shift and go to state 60
    function_stm                   shift and go to state 200

state 143

    (37) function_variables_opt -> empty .

    ID              reduce using rule 37 (function_variables_opt -> empty .)
    IF              reduce using rule 37 (function_variables_opt -> empty .)
    WHILE           reduce using rule 37 (function_variables_opt -> empty .)
    FOR             reduce using rule 37 (function_variables_opt -> empty .)
    READ            reduce using rule 37 (function_variables_opt -> empty .)
    PRINT           reduce using rule 37 (function_variables_opt -> empty .)
    PUSH            reduce using rule 37 (function_variables_opt -> empty .)
    POP             reduce using rule 37 (function_variables_opt -> empty .)
    RETURN          reduce using rule 37 (function_variables_opt -> empty .)
    }               reduce using rule 37 (function_variables_opt -> empty .)


state 144

    (38) function_variables_opt -> variables .

    ID              reduce using rule 38 (function_variables_opt -> variables .)
    IF              reduce using rule 38 (function_variables_opt -> variables .)
    WHILE           reduce using rule 38 (function_variables_opt -> variables .)
    FOR             reduce using rule 38 (function_variables_opt -> variables .)
    READ            reduce using rule 38 (function_variables_opt -> variables .)
    PRINT           reduce using rule 38 (function_variables_opt -> variables .)
    PUSH            reduce using rule 38 (function_variables_opt -> variables .)
    POP             reduce using rule 38 (function_variables_opt -> variables .)
    RETURN          reduce using rule 38 (function_variables_opt -> variables .)
    }               reduce using rule 38 (function_variables_opt -> variables .)


state 145

    (54) read -> READ add_read_op ( add_read_var . )

    )               shift and go to state 201


state 146

    (55) add_read_var -> ID .

    )               reduce using rule 55 (add_read_var -> ID .)


state 147

    (57) print -> PRINT add_print_op ( expr_params . )

    )               shift and go to state 202


state 148

    (33) iteration_opts -> WHILE HAPPENS ( expression .

    )               reduce using rule 33 (iteration_opts -> WHILE HAPPENS ( expression .)


state 149

    (22) assignation -> add_assignation_var = add_assignation_sign expression .

    ID              reduce using rule 22 (assignation -> add_assignation_var = add_assignation_sign expression .)
    IF              reduce using rule 22 (assignation -> add_assignation_var = add_assignation_sign expression .)
    WHILE           reduce using rule 22 (assignation -> add_assignation_var = add_assignation_sign expression .)
    FOR             reduce using rule 22 (assignation -> add_assignation_var = add_assignation_sign expression .)
    READ            reduce using rule 22 (assignation -> add_assignation_var = add_assignation_sign expression .)
    PRINT           reduce using rule 22 (assignation -> add_assignation_var = add_assignation_sign expression .)
    PUSH            reduce using rule 22 (assignation -> add_assignation_var = add_assignation_sign expression .)
    POP             reduce using rule 22 (assignation -> add_assignation_var = add_assignation_sign expression .)
    }               reduce using rule 22 (assignation -> add_assignation_var = add_assignation_sign expression .)
    RETURN          reduce using rule 22 (assignation -> add_assignation_var = add_assignation_sign expression .)


state 150

    (67) list_pop -> POP LAST add_list_pop_sign FROM . add_list_pop_var ( )
    (68) add_list_pop_var -> . ID

    ID              shift and go to state 204

    add_list_pop_var               shift and go to state 203

state 151

    (32) iteration -> iteration_opts ) DO block .

    ID              reduce using rule 32 (iteration -> iteration_opts ) DO block .)
    IF              reduce using rule 32 (iteration -> iteration_opts ) DO block .)
    WHILE           reduce using rule 32 (iteration -> iteration_opts ) DO block .)
    FOR             reduce using rule 32 (iteration -> iteration_opts ) DO block .)
    READ            reduce using rule 32 (iteration -> iteration_opts ) DO block .)
    PRINT           reduce using rule 32 (iteration -> iteration_opts ) DO block .)
    PUSH            reduce using rule 32 (iteration -> iteration_opts ) DO block .)
    POP             reduce using rule 32 (iteration -> iteration_opts ) DO block .)
    }               reduce using rule 32 (iteration -> iteration_opts ) DO block .)
    RETURN          reduce using rule 32 (iteration -> iteration_opts ) DO block .)


state 152

    (31) cond_else_opt -> ELSE HAPPENS . block
    (6) block -> . { block_stm_opt }

    {               shift and go to state 28

    block                          shift and go to state 205

state 153

    (29) cond_else_if -> OR IF HAPPENS . ( expression ) DO block

    (               shift and go to state 206


state 154

    (64) list_push -> PUSH TO add_list_push_sign add_list_push_var . ( expression )

    (               shift and go to state 207


state 155

    (66) add_list_push_var -> ID .

    (               reduce using rule 66 (add_list_push_var -> ID .)


state 156

    (96) term_body_types_rest -> CONST_S term_string_add_stk .

    *               reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    /               reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    +               reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    -               reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    <               reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    >               reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    EQ              reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    NEQ             reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    GTE             reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    LTE             reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    AND             reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    OR              reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    ,               reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    )               reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    ID              reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    IF              reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    WHILE           reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    FOR             reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    READ            reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    PRINT           reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    PUSH            reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    POP             reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    }               reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)
    RETURN          reduce using rule 96 (term_body_types_rest -> CONST_S term_string_add_stk .)


state 157

    (104) term_string_add_stk -> empty .

    *               reduce using rule 104 (term_string_add_stk -> empty .)
    /               reduce using rule 104 (term_string_add_stk -> empty .)
    +               reduce using rule 104 (term_string_add_stk -> empty .)
    -               reduce using rule 104 (term_string_add_stk -> empty .)
    <               reduce using rule 104 (term_string_add_stk -> empty .)
    >               reduce using rule 104 (term_string_add_stk -> empty .)
    EQ              reduce using rule 104 (term_string_add_stk -> empty .)
    NEQ             reduce using rule 104 (term_string_add_stk -> empty .)
    GTE             reduce using rule 104 (term_string_add_stk -> empty .)
    LTE             reduce using rule 104 (term_string_add_stk -> empty .)
    AND             reduce using rule 104 (term_string_add_stk -> empty .)
    OR              reduce using rule 104 (term_string_add_stk -> empty .)
    ,               reduce using rule 104 (term_string_add_stk -> empty .)
    )               reduce using rule 104 (term_string_add_stk -> empty .)
    ID              reduce using rule 104 (term_string_add_stk -> empty .)
    IF              reduce using rule 104 (term_string_add_stk -> empty .)
    WHILE           reduce using rule 104 (term_string_add_stk -> empty .)
    FOR             reduce using rule 104 (term_string_add_stk -> empty .)
    READ            reduce using rule 104 (term_string_add_stk -> empty .)
    PRINT           reduce using rule 104 (term_string_add_stk -> empty .)
    PUSH            reduce using rule 104 (term_string_add_stk -> empty .)
    POP             reduce using rule 104 (term_string_add_stk -> empty .)
    }               reduce using rule 104 (term_string_add_stk -> empty .)
    RETURN          reduce using rule 104 (term_string_add_stk -> empty .)


state 158

    (114) logic_operators -> AND .

    (               reduce using rule 114 (logic_operators -> AND .)
    ID              reduce using rule 114 (logic_operators -> AND .)
    +               reduce using rule 114 (logic_operators -> AND .)
    -               reduce using rule 114 (logic_operators -> AND .)
    CONST_I         reduce using rule 114 (logic_operators -> AND .)
    CONST_F         reduce using rule 114 (logic_operators -> AND .)
    CONST_S         reduce using rule 114 (logic_operators -> AND .)
    TRUE            reduce using rule 114 (logic_operators -> AND .)
    FALSE           reduce using rule 114 (logic_operators -> AND .)
    RANDOM          reduce using rule 114 (logic_operators -> AND .)
    READ            reduce using rule 114 (logic_operators -> AND .)
    PRINT           reduce using rule 114 (logic_operators -> AND .)
    PUSH            reduce using rule 114 (logic_operators -> AND .)
    POP             reduce using rule 114 (logic_operators -> AND .)


state 159

    (74) expression_opt -> logic_operators . expression
    (72) expression -> . exp_comp expression_opt
    (75) exp_comp -> . exp_add exp_comp_opt
    (78) exp_add -> . exp_multiply exp_add_opt
    (81) exp_multiply -> . term exp_multiply_opt
    (84) term -> . term_nested
    (85) term -> . term_body
    (86) term_nested -> . ( expression )
    (87) term_body -> . term_body_opt
    (88) term_body -> . term_body_types
    (89) term_body_opt -> . term_body_opt_signs term_body_types
    (92) term_body_types -> . ID
    (93) term_body_types -> . term_body_types_rest
    (90) term_body_opt_signs -> . +
    (91) term_body_opt_signs -> . -
    (94) term_body_types_rest -> . CONST_I term_int_add_stk
    (95) term_body_types_rest -> . CONST_F term_float_add_stk
    (96) term_body_types_rest -> . CONST_S term_string_add_stk
    (97) term_body_types_rest -> . TRUE term_bool_add_stk
    (98) term_body_types_rest -> . FALSE term_bool_add_stk
    (99) term_body_types_rest -> . random
    (100) term_body_types_rest -> . list_access
    (101) term_body_types_rest -> . function_call
    (71) random -> . RANDOM ( FROM CONST_I , TO CONST_I )
    (70) list_access -> . ID [ id_or_number ]
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    (               shift and go to state 121
    ID              shift and go to state 131
    +               shift and go to state 122
    -               shift and go to state 123
    CONST_I         shift and go to state 119
    CONST_F         shift and go to state 118
    CONST_S         shift and go to state 113
    TRUE            shift and go to state 132
    FALSE           shift and go to state 135
    RANDOM          shift and go to state 128
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    exp_comp                       shift and go to state 114
    random                         shift and go to state 115
    function_call                  shift and go to state 116
    list_pop                       shift and go to state 43
    exp_multiply                   shift and go to state 120
    term_body_types_rest           shift and go to state 129
    term_body_opt                  shift and go to state 124
    local_function                 shift and go to state 46
    term_body_types                shift and go to state 125
    list_push                      shift and go to state 51
    term_nested                    shift and go to state 126
    print                          shift and go to state 48
    read                           shift and go to state 53
    term_body                      shift and go to state 130
    term_body_opt_signs            shift and go to state 133
    term                           shift and go to state 134
    list_access                    shift and go to state 136
    exp_add                        shift and go to state 137
    expression                     shift and go to state 208

state 160

    (72) expression -> exp_comp expression_opt .

    ID              reduce using rule 72 (expression -> exp_comp expression_opt .)
    IF              reduce using rule 72 (expression -> exp_comp expression_opt .)
    WHILE           reduce using rule 72 (expression -> exp_comp expression_opt .)
    FOR             reduce using rule 72 (expression -> exp_comp expression_opt .)
    READ            reduce using rule 72 (expression -> exp_comp expression_opt .)
    PRINT           reduce using rule 72 (expression -> exp_comp expression_opt .)
    PUSH            reduce using rule 72 (expression -> exp_comp expression_opt .)
    POP             reduce using rule 72 (expression -> exp_comp expression_opt .)
    }               reduce using rule 72 (expression -> exp_comp expression_opt .)
    RETURN          reduce using rule 72 (expression -> exp_comp expression_opt .)
    ,               reduce using rule 72 (expression -> exp_comp expression_opt .)
    )               reduce using rule 72 (expression -> exp_comp expression_opt .)


state 161

    (115) logic_operators -> OR .

    (               reduce using rule 115 (logic_operators -> OR .)
    ID              reduce using rule 115 (logic_operators -> OR .)
    +               reduce using rule 115 (logic_operators -> OR .)
    -               reduce using rule 115 (logic_operators -> OR .)
    CONST_I         reduce using rule 115 (logic_operators -> OR .)
    CONST_F         reduce using rule 115 (logic_operators -> OR .)
    CONST_S         reduce using rule 115 (logic_operators -> OR .)
    TRUE            reduce using rule 115 (logic_operators -> OR .)
    FALSE           reduce using rule 115 (logic_operators -> OR .)
    RANDOM          reduce using rule 115 (logic_operators -> OR .)
    READ            reduce using rule 115 (logic_operators -> OR .)
    PRINT           reduce using rule 115 (logic_operators -> OR .)
    PUSH            reduce using rule 115 (logic_operators -> OR .)
    POP             reduce using rule 115 (logic_operators -> OR .)


state 162

    (73) expression_opt -> empty .

    ,               reduce using rule 73 (expression_opt -> empty .)
    )               reduce using rule 73 (expression_opt -> empty .)
    ID              reduce using rule 73 (expression_opt -> empty .)
    IF              reduce using rule 73 (expression_opt -> empty .)
    WHILE           reduce using rule 73 (expression_opt -> empty .)
    FOR             reduce using rule 73 (expression_opt -> empty .)
    READ            reduce using rule 73 (expression_opt -> empty .)
    PRINT           reduce using rule 73 (expression_opt -> empty .)
    PUSH            reduce using rule 73 (expression_opt -> empty .)
    POP             reduce using rule 73 (expression_opt -> empty .)
    }               reduce using rule 73 (expression_opt -> empty .)
    RETURN          reduce using rule 73 (expression_opt -> empty .)


state 163

    (63) local_function -> ID ( expr_params ) .

    *               reduce using rule 63 (local_function -> ID ( expr_params ) .)
    /               reduce using rule 63 (local_function -> ID ( expr_params ) .)
    +               reduce using rule 63 (local_function -> ID ( expr_params ) .)
    -               reduce using rule 63 (local_function -> ID ( expr_params ) .)
    <               reduce using rule 63 (local_function -> ID ( expr_params ) .)
    >               reduce using rule 63 (local_function -> ID ( expr_params ) .)
    EQ              reduce using rule 63 (local_function -> ID ( expr_params ) .)
    NEQ             reduce using rule 63 (local_function -> ID ( expr_params ) .)
    GTE             reduce using rule 63 (local_function -> ID ( expr_params ) .)
    LTE             reduce using rule 63 (local_function -> ID ( expr_params ) .)
    AND             reduce using rule 63 (local_function -> ID ( expr_params ) .)
    OR              reduce using rule 63 (local_function -> ID ( expr_params ) .)
    ,               reduce using rule 63 (local_function -> ID ( expr_params ) .)
    )               reduce using rule 63 (local_function -> ID ( expr_params ) .)
    ID              reduce using rule 63 (local_function -> ID ( expr_params ) .)
    IF              reduce using rule 63 (local_function -> ID ( expr_params ) .)
    WHILE           reduce using rule 63 (local_function -> ID ( expr_params ) .)
    FOR             reduce using rule 63 (local_function -> ID ( expr_params ) .)
    READ            reduce using rule 63 (local_function -> ID ( expr_params ) .)
    PRINT           reduce using rule 63 (local_function -> ID ( expr_params ) .)
    PUSH            reduce using rule 63 (local_function -> ID ( expr_params ) .)
    POP             reduce using rule 63 (local_function -> ID ( expr_params ) .)
    RETURN          reduce using rule 63 (local_function -> ID ( expr_params ) .)
    }               reduce using rule 63 (local_function -> ID ( expr_params ) .)


state 164

    (103) term_float_add_stk -> empty .

    *               reduce using rule 103 (term_float_add_stk -> empty .)
    /               reduce using rule 103 (term_float_add_stk -> empty .)
    +               reduce using rule 103 (term_float_add_stk -> empty .)
    -               reduce using rule 103 (term_float_add_stk -> empty .)
    <               reduce using rule 103 (term_float_add_stk -> empty .)
    >               reduce using rule 103 (term_float_add_stk -> empty .)
    EQ              reduce using rule 103 (term_float_add_stk -> empty .)
    NEQ             reduce using rule 103 (term_float_add_stk -> empty .)
    GTE             reduce using rule 103 (term_float_add_stk -> empty .)
    LTE             reduce using rule 103 (term_float_add_stk -> empty .)
    AND             reduce using rule 103 (term_float_add_stk -> empty .)
    OR              reduce using rule 103 (term_float_add_stk -> empty .)
    ,               reduce using rule 103 (term_float_add_stk -> empty .)
    )               reduce using rule 103 (term_float_add_stk -> empty .)
    ID              reduce using rule 103 (term_float_add_stk -> empty .)
    IF              reduce using rule 103 (term_float_add_stk -> empty .)
    WHILE           reduce using rule 103 (term_float_add_stk -> empty .)
    FOR             reduce using rule 103 (term_float_add_stk -> empty .)
    READ            reduce using rule 103 (term_float_add_stk -> empty .)
    PRINT           reduce using rule 103 (term_float_add_stk -> empty .)
    PUSH            reduce using rule 103 (term_float_add_stk -> empty .)
    POP             reduce using rule 103 (term_float_add_stk -> empty .)
    }               reduce using rule 103 (term_float_add_stk -> empty .)
    RETURN          reduce using rule 103 (term_float_add_stk -> empty .)


state 165

    (95) term_body_types_rest -> CONST_F term_float_add_stk .

    *               reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    /               reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    +               reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    -               reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    <               reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    >               reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    EQ              reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    NEQ             reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    GTE             reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    LTE             reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    AND             reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    OR              reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    ,               reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    )               reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    ID              reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    IF              reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    WHILE           reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    FOR             reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    READ            reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    PRINT           reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    PUSH            reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    POP             reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    }               reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)
    RETURN          reduce using rule 95 (term_body_types_rest -> CONST_F term_float_add_stk .)


state 166

    (94) term_body_types_rest -> CONST_I term_int_add_stk .

    *               reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    /               reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    +               reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    -               reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    <               reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    >               reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    EQ              reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    NEQ             reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    GTE             reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    LTE             reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    AND             reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    OR              reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    ,               reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    )               reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    ID              reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    IF              reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    WHILE           reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    FOR             reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    READ            reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    PRINT           reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    PUSH            reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    POP             reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    }               reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)
    RETURN          reduce using rule 94 (term_body_types_rest -> CONST_I term_int_add_stk .)


state 167

    (102) term_int_add_stk -> empty .

    *               reduce using rule 102 (term_int_add_stk -> empty .)
    /               reduce using rule 102 (term_int_add_stk -> empty .)
    +               reduce using rule 102 (term_int_add_stk -> empty .)
    -               reduce using rule 102 (term_int_add_stk -> empty .)
    <               reduce using rule 102 (term_int_add_stk -> empty .)
    >               reduce using rule 102 (term_int_add_stk -> empty .)
    EQ              reduce using rule 102 (term_int_add_stk -> empty .)
    NEQ             reduce using rule 102 (term_int_add_stk -> empty .)
    GTE             reduce using rule 102 (term_int_add_stk -> empty .)
    LTE             reduce using rule 102 (term_int_add_stk -> empty .)
    AND             reduce using rule 102 (term_int_add_stk -> empty .)
    OR              reduce using rule 102 (term_int_add_stk -> empty .)
    ,               reduce using rule 102 (term_int_add_stk -> empty .)
    )               reduce using rule 102 (term_int_add_stk -> empty .)
    ID              reduce using rule 102 (term_int_add_stk -> empty .)
    IF              reduce using rule 102 (term_int_add_stk -> empty .)
    WHILE           reduce using rule 102 (term_int_add_stk -> empty .)
    FOR             reduce using rule 102 (term_int_add_stk -> empty .)
    READ            reduce using rule 102 (term_int_add_stk -> empty .)
    PRINT           reduce using rule 102 (term_int_add_stk -> empty .)
    PUSH            reduce using rule 102 (term_int_add_stk -> empty .)
    POP             reduce using rule 102 (term_int_add_stk -> empty .)
    }               reduce using rule 102 (term_int_add_stk -> empty .)
    RETURN          reduce using rule 102 (term_int_add_stk -> empty .)


state 168

    (125) add_operators -> - .

    (               reduce using rule 125 (add_operators -> - .)
    ID              reduce using rule 125 (add_operators -> - .)
    +               reduce using rule 125 (add_operators -> - .)
    -               reduce using rule 125 (add_operators -> - .)
    CONST_I         reduce using rule 125 (add_operators -> - .)
    CONST_F         reduce using rule 125 (add_operators -> - .)
    CONST_S         reduce using rule 125 (add_operators -> - .)
    TRUE            reduce using rule 125 (add_operators -> - .)
    FALSE           reduce using rule 125 (add_operators -> - .)
    RANDOM          reduce using rule 125 (add_operators -> - .)
    READ            reduce using rule 125 (add_operators -> - .)
    PRINT           reduce using rule 125 (add_operators -> - .)
    PUSH            reduce using rule 125 (add_operators -> - .)
    POP             reduce using rule 125 (add_operators -> - .)


state 169

    (80) exp_add_opt -> add_operators . exp_add
    (78) exp_add -> . exp_multiply exp_add_opt
    (81) exp_multiply -> . term exp_multiply_opt
    (84) term -> . term_nested
    (85) term -> . term_body
    (86) term_nested -> . ( expression )
    (87) term_body -> . term_body_opt
    (88) term_body -> . term_body_types
    (89) term_body_opt -> . term_body_opt_signs term_body_types
    (92) term_body_types -> . ID
    (93) term_body_types -> . term_body_types_rest
    (90) term_body_opt_signs -> . +
    (91) term_body_opt_signs -> . -
    (94) term_body_types_rest -> . CONST_I term_int_add_stk
    (95) term_body_types_rest -> . CONST_F term_float_add_stk
    (96) term_body_types_rest -> . CONST_S term_string_add_stk
    (97) term_body_types_rest -> . TRUE term_bool_add_stk
    (98) term_body_types_rest -> . FALSE term_bool_add_stk
    (99) term_body_types_rest -> . random
    (100) term_body_types_rest -> . list_access
    (101) term_body_types_rest -> . function_call
    (71) random -> . RANDOM ( FROM CONST_I , TO CONST_I )
    (70) list_access -> . ID [ id_or_number ]
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    (               shift and go to state 121
    ID              shift and go to state 131
    +               shift and go to state 122
    -               shift and go to state 123
    CONST_I         shift and go to state 119
    CONST_F         shift and go to state 118
    CONST_S         shift and go to state 113
    TRUE            shift and go to state 132
    FALSE           shift and go to state 135
    RANDOM          shift and go to state 128
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    random                         shift and go to state 115
    function_call                  shift and go to state 116
    list_pop                       shift and go to state 43
    exp_multiply                   shift and go to state 120
    term_body_types_rest           shift and go to state 129
    term_body_opt                  shift and go to state 124
    local_function                 shift and go to state 46
    term_body_types                shift and go to state 125
    list_push                      shift and go to state 51
    term_nested                    shift and go to state 126
    print                          shift and go to state 48
    read                           shift and go to state 53
    term_body                      shift and go to state 130
    term_body_opt_signs            shift and go to state 133
    term                           shift and go to state 134
    list_access                    shift and go to state 136
    exp_add                        shift and go to state 209

state 170

    (78) exp_add -> exp_multiply exp_add_opt .

    <               reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    >               reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    EQ              reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    NEQ             reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    GTE             reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    LTE             reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    AND             reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    OR              reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    )               reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    ID              reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    IF              reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    WHILE           reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    FOR             reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    READ            reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    PRINT           reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    PUSH            reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    POP             reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    }               reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    RETURN          reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)
    ,               reduce using rule 78 (exp_add -> exp_multiply exp_add_opt .)


state 171

    (124) add_operators -> + .

    (               reduce using rule 124 (add_operators -> + .)
    ID              reduce using rule 124 (add_operators -> + .)
    +               reduce using rule 124 (add_operators -> + .)
    -               reduce using rule 124 (add_operators -> + .)
    CONST_I         reduce using rule 124 (add_operators -> + .)
    CONST_F         reduce using rule 124 (add_operators -> + .)
    CONST_S         reduce using rule 124 (add_operators -> + .)
    TRUE            reduce using rule 124 (add_operators -> + .)
    FALSE           reduce using rule 124 (add_operators -> + .)
    RANDOM          reduce using rule 124 (add_operators -> + .)
    READ            reduce using rule 124 (add_operators -> + .)
    PRINT           reduce using rule 124 (add_operators -> + .)
    PUSH            reduce using rule 124 (add_operators -> + .)
    POP             reduce using rule 124 (add_operators -> + .)


state 172

    (79) exp_add_opt -> empty .

    <               reduce using rule 79 (exp_add_opt -> empty .)
    >               reduce using rule 79 (exp_add_opt -> empty .)
    EQ              reduce using rule 79 (exp_add_opt -> empty .)
    NEQ             reduce using rule 79 (exp_add_opt -> empty .)
    GTE             reduce using rule 79 (exp_add_opt -> empty .)
    LTE             reduce using rule 79 (exp_add_opt -> empty .)
    AND             reduce using rule 79 (exp_add_opt -> empty .)
    OR              reduce using rule 79 (exp_add_opt -> empty .)
    ,               reduce using rule 79 (exp_add_opt -> empty .)
    )               reduce using rule 79 (exp_add_opt -> empty .)
    ID              reduce using rule 79 (exp_add_opt -> empty .)
    IF              reduce using rule 79 (exp_add_opt -> empty .)
    WHILE           reduce using rule 79 (exp_add_opt -> empty .)
    FOR             reduce using rule 79 (exp_add_opt -> empty .)
    READ            reduce using rule 79 (exp_add_opt -> empty .)
    PRINT           reduce using rule 79 (exp_add_opt -> empty .)
    PUSH            reduce using rule 79 (exp_add_opt -> empty .)
    POP             reduce using rule 79 (exp_add_opt -> empty .)
    }               reduce using rule 79 (exp_add_opt -> empty .)
    RETURN          reduce using rule 79 (exp_add_opt -> empty .)


state 173

    (86) term_nested -> ( expression . )

    )               shift and go to state 210


state 174

    (71) random -> RANDOM ( . FROM CONST_I , TO CONST_I )

    FROM            shift and go to state 211


state 175

    (70) list_access -> ID [ . id_or_number ]
    (108) id_or_number -> . ID
    (109) id_or_number -> . CONST_I

    ID              shift and go to state 105
    CONST_I         shift and go to state 103

    id_or_number                   shift and go to state 212

state 176

    (97) term_body_types_rest -> TRUE term_bool_add_stk .

    *               reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    /               reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    +               reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    -               reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    <               reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    >               reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    EQ              reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    NEQ             reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    GTE             reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    LTE             reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    AND             reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    OR              reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    ,               reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    )               reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    ID              reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    IF              reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    WHILE           reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    FOR             reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    READ            reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    PRINT           reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    PUSH            reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    POP             reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    }               reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)
    RETURN          reduce using rule 97 (term_body_types_rest -> TRUE term_bool_add_stk .)


state 177

    (105) term_bool_add_stk -> empty .

    *               reduce using rule 105 (term_bool_add_stk -> empty .)
    /               reduce using rule 105 (term_bool_add_stk -> empty .)
    +               reduce using rule 105 (term_bool_add_stk -> empty .)
    -               reduce using rule 105 (term_bool_add_stk -> empty .)
    <               reduce using rule 105 (term_bool_add_stk -> empty .)
    >               reduce using rule 105 (term_bool_add_stk -> empty .)
    EQ              reduce using rule 105 (term_bool_add_stk -> empty .)
    NEQ             reduce using rule 105 (term_bool_add_stk -> empty .)
    GTE             reduce using rule 105 (term_bool_add_stk -> empty .)
    LTE             reduce using rule 105 (term_bool_add_stk -> empty .)
    AND             reduce using rule 105 (term_bool_add_stk -> empty .)
    OR              reduce using rule 105 (term_bool_add_stk -> empty .)
    ,               reduce using rule 105 (term_bool_add_stk -> empty .)
    )               reduce using rule 105 (term_bool_add_stk -> empty .)
    ID              reduce using rule 105 (term_bool_add_stk -> empty .)
    IF              reduce using rule 105 (term_bool_add_stk -> empty .)
    WHILE           reduce using rule 105 (term_bool_add_stk -> empty .)
    FOR             reduce using rule 105 (term_bool_add_stk -> empty .)
    READ            reduce using rule 105 (term_bool_add_stk -> empty .)
    PRINT           reduce using rule 105 (term_bool_add_stk -> empty .)
    PUSH            reduce using rule 105 (term_bool_add_stk -> empty .)
    POP             reduce using rule 105 (term_bool_add_stk -> empty .)
    }               reduce using rule 105 (term_bool_add_stk -> empty .)
    RETURN          reduce using rule 105 (term_bool_add_stk -> empty .)


state 178

    (89) term_body_opt -> term_body_opt_signs term_body_types .

    *               reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    /               reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    +               reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    -               reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    <               reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    >               reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    EQ              reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    NEQ             reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    GTE             reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    LTE             reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    AND             reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    OR              reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    ,               reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    )               reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    ID              reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    IF              reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    WHILE           reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    FOR             reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    READ            reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    PRINT           reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    PUSH            reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    POP             reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    }               reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)
    RETURN          reduce using rule 89 (term_body_opt -> term_body_opt_signs term_body_types .)


state 179

    (83) exp_multiply_opt -> multiply_operators . exp_multiply
    (81) exp_multiply -> . term exp_multiply_opt
    (84) term -> . term_nested
    (85) term -> . term_body
    (86) term_nested -> . ( expression )
    (87) term_body -> . term_body_opt
    (88) term_body -> . term_body_types
    (89) term_body_opt -> . term_body_opt_signs term_body_types
    (92) term_body_types -> . ID
    (93) term_body_types -> . term_body_types_rest
    (90) term_body_opt_signs -> . +
    (91) term_body_opt_signs -> . -
    (94) term_body_types_rest -> . CONST_I term_int_add_stk
    (95) term_body_types_rest -> . CONST_F term_float_add_stk
    (96) term_body_types_rest -> . CONST_S term_string_add_stk
    (97) term_body_types_rest -> . TRUE term_bool_add_stk
    (98) term_body_types_rest -> . FALSE term_bool_add_stk
    (99) term_body_types_rest -> . random
    (100) term_body_types_rest -> . list_access
    (101) term_body_types_rest -> . function_call
    (71) random -> . RANDOM ( FROM CONST_I , TO CONST_I )
    (70) list_access -> . ID [ id_or_number ]
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    (               shift and go to state 121
    ID              shift and go to state 131
    +               shift and go to state 122
    -               shift and go to state 123
    CONST_I         shift and go to state 119
    CONST_F         shift and go to state 118
    CONST_S         shift and go to state 113
    TRUE            shift and go to state 132
    FALSE           shift and go to state 135
    RANDOM          shift and go to state 128
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    random                         shift and go to state 115
    function_call                  shift and go to state 116
    list_pop                       shift and go to state 43
    exp_multiply                   shift and go to state 213
    term_body                      shift and go to state 130
    term_body_opt                  shift and go to state 124
    local_function                 shift and go to state 46
    term_body_types                shift and go to state 125
    list_push                      shift and go to state 51
    term_nested                    shift and go to state 126
    print                          shift and go to state 48
    read                           shift and go to state 53
    term_body_types_rest           shift and go to state 129
    term_body_opt_signs            shift and go to state 133
    term                           shift and go to state 134
    list_access                    shift and go to state 136

state 180

    (81) exp_multiply -> term exp_multiply_opt .

    +               reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    -               reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    <               reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    >               reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    EQ              reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    NEQ             reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    GTE             reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    LTE             reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    AND             reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    OR              reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    ,               reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    )               reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    ID              reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    IF              reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    WHILE           reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    FOR             reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    READ            reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    PRINT           reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    PUSH            reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    POP             reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    }               reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)
    RETURN          reduce using rule 81 (exp_multiply -> term exp_multiply_opt .)


state 181

    (122) multiply_operators -> * .

    (               reduce using rule 122 (multiply_operators -> * .)
    ID              reduce using rule 122 (multiply_operators -> * .)
    +               reduce using rule 122 (multiply_operators -> * .)
    -               reduce using rule 122 (multiply_operators -> * .)
    CONST_I         reduce using rule 122 (multiply_operators -> * .)
    CONST_F         reduce using rule 122 (multiply_operators -> * .)
    CONST_S         reduce using rule 122 (multiply_operators -> * .)
    TRUE            reduce using rule 122 (multiply_operators -> * .)
    FALSE           reduce using rule 122 (multiply_operators -> * .)
    RANDOM          reduce using rule 122 (multiply_operators -> * .)
    READ            reduce using rule 122 (multiply_operators -> * .)
    PRINT           reduce using rule 122 (multiply_operators -> * .)
    PUSH            reduce using rule 122 (multiply_operators -> * .)
    POP             reduce using rule 122 (multiply_operators -> * .)


state 182

    (123) multiply_operators -> / .

    (               reduce using rule 123 (multiply_operators -> / .)
    ID              reduce using rule 123 (multiply_operators -> / .)
    +               reduce using rule 123 (multiply_operators -> / .)
    -               reduce using rule 123 (multiply_operators -> / .)
    CONST_I         reduce using rule 123 (multiply_operators -> / .)
    CONST_F         reduce using rule 123 (multiply_operators -> / .)
    CONST_S         reduce using rule 123 (multiply_operators -> / .)
    TRUE            reduce using rule 123 (multiply_operators -> / .)
    FALSE           reduce using rule 123 (multiply_operators -> / .)
    RANDOM          reduce using rule 123 (multiply_operators -> / .)
    READ            reduce using rule 123 (multiply_operators -> / .)
    PRINT           reduce using rule 123 (multiply_operators -> / .)
    PUSH            reduce using rule 123 (multiply_operators -> / .)
    POP             reduce using rule 123 (multiply_operators -> / .)


state 183

    (82) exp_multiply_opt -> empty .

    +               reduce using rule 82 (exp_multiply_opt -> empty .)
    -               reduce using rule 82 (exp_multiply_opt -> empty .)
    <               reduce using rule 82 (exp_multiply_opt -> empty .)
    >               reduce using rule 82 (exp_multiply_opt -> empty .)
    EQ              reduce using rule 82 (exp_multiply_opt -> empty .)
    NEQ             reduce using rule 82 (exp_multiply_opt -> empty .)
    GTE             reduce using rule 82 (exp_multiply_opt -> empty .)
    LTE             reduce using rule 82 (exp_multiply_opt -> empty .)
    AND             reduce using rule 82 (exp_multiply_opt -> empty .)
    OR              reduce using rule 82 (exp_multiply_opt -> empty .)
    ,               reduce using rule 82 (exp_multiply_opt -> empty .)
    )               reduce using rule 82 (exp_multiply_opt -> empty .)
    ID              reduce using rule 82 (exp_multiply_opt -> empty .)
    IF              reduce using rule 82 (exp_multiply_opt -> empty .)
    WHILE           reduce using rule 82 (exp_multiply_opt -> empty .)
    FOR             reduce using rule 82 (exp_multiply_opt -> empty .)
    READ            reduce using rule 82 (exp_multiply_opt -> empty .)
    PRINT           reduce using rule 82 (exp_multiply_opt -> empty .)
    PUSH            reduce using rule 82 (exp_multiply_opt -> empty .)
    POP             reduce using rule 82 (exp_multiply_opt -> empty .)
    }               reduce using rule 82 (exp_multiply_opt -> empty .)
    RETURN          reduce using rule 82 (exp_multiply_opt -> empty .)


state 184

    (98) term_body_types_rest -> FALSE term_bool_add_stk .

    *               reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    /               reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    +               reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    -               reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    <               reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    >               reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    EQ              reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    NEQ             reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    GTE             reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    LTE             reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    AND             reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    OR              reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    ,               reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    )               reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    ID              reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    IF              reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    WHILE           reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    FOR             reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    READ            reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    PRINT           reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    PUSH            reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    POP             reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    }               reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)
    RETURN          reduce using rule 98 (term_body_types_rest -> FALSE term_bool_add_stk .)


state 185

    (119) comp_operators -> NEQ .

    (               reduce using rule 119 (comp_operators -> NEQ .)
    ID              reduce using rule 119 (comp_operators -> NEQ .)
    +               reduce using rule 119 (comp_operators -> NEQ .)
    -               reduce using rule 119 (comp_operators -> NEQ .)
    CONST_I         reduce using rule 119 (comp_operators -> NEQ .)
    CONST_F         reduce using rule 119 (comp_operators -> NEQ .)
    CONST_S         reduce using rule 119 (comp_operators -> NEQ .)
    TRUE            reduce using rule 119 (comp_operators -> NEQ .)
    FALSE           reduce using rule 119 (comp_operators -> NEQ .)
    RANDOM          reduce using rule 119 (comp_operators -> NEQ .)
    READ            reduce using rule 119 (comp_operators -> NEQ .)
    PRINT           reduce using rule 119 (comp_operators -> NEQ .)
    PUSH            reduce using rule 119 (comp_operators -> NEQ .)
    POP             reduce using rule 119 (comp_operators -> NEQ .)


state 186

    (121) comp_operators -> LTE .

    (               reduce using rule 121 (comp_operators -> LTE .)
    ID              reduce using rule 121 (comp_operators -> LTE .)
    +               reduce using rule 121 (comp_operators -> LTE .)
    -               reduce using rule 121 (comp_operators -> LTE .)
    CONST_I         reduce using rule 121 (comp_operators -> LTE .)
    CONST_F         reduce using rule 121 (comp_operators -> LTE .)
    CONST_S         reduce using rule 121 (comp_operators -> LTE .)
    TRUE            reduce using rule 121 (comp_operators -> LTE .)
    FALSE           reduce using rule 121 (comp_operators -> LTE .)
    RANDOM          reduce using rule 121 (comp_operators -> LTE .)
    READ            reduce using rule 121 (comp_operators -> LTE .)
    PRINT           reduce using rule 121 (comp_operators -> LTE .)
    PUSH            reduce using rule 121 (comp_operators -> LTE .)
    POP             reduce using rule 121 (comp_operators -> LTE .)


state 187

    (120) comp_operators -> GTE .

    (               reduce using rule 120 (comp_operators -> GTE .)
    ID              reduce using rule 120 (comp_operators -> GTE .)
    +               reduce using rule 120 (comp_operators -> GTE .)
    -               reduce using rule 120 (comp_operators -> GTE .)
    CONST_I         reduce using rule 120 (comp_operators -> GTE .)
    CONST_F         reduce using rule 120 (comp_operators -> GTE .)
    CONST_S         reduce using rule 120 (comp_operators -> GTE .)
    TRUE            reduce using rule 120 (comp_operators -> GTE .)
    FALSE           reduce using rule 120 (comp_operators -> GTE .)
    RANDOM          reduce using rule 120 (comp_operators -> GTE .)
    READ            reduce using rule 120 (comp_operators -> GTE .)
    PRINT           reduce using rule 120 (comp_operators -> GTE .)
    PUSH            reduce using rule 120 (comp_operators -> GTE .)
    POP             reduce using rule 120 (comp_operators -> GTE .)


state 188

    (75) exp_comp -> exp_add exp_comp_opt .

    AND             reduce using rule 75 (exp_comp -> exp_add exp_comp_opt .)
    OR              reduce using rule 75 (exp_comp -> exp_add exp_comp_opt .)
    ,               reduce using rule 75 (exp_comp -> exp_add exp_comp_opt .)
    )               reduce using rule 75 (exp_comp -> exp_add exp_comp_opt .)
    }               reduce using rule 75 (exp_comp -> exp_add exp_comp_opt .)
    ID              reduce using rule 75 (exp_comp -> exp_add exp_comp_opt .)
    IF              reduce using rule 75 (exp_comp -> exp_add exp_comp_opt .)
    WHILE           reduce using rule 75 (exp_comp -> exp_add exp_comp_opt .)
    FOR             reduce using rule 75 (exp_comp -> exp_add exp_comp_opt .)
    READ            reduce using rule 75 (exp_comp -> exp_add exp_comp_opt .)
    PRINT           reduce using rule 75 (exp_comp -> exp_add exp_comp_opt .)
    PUSH            reduce using rule 75 (exp_comp -> exp_add exp_comp_opt .)
    POP             reduce using rule 75 (exp_comp -> exp_add exp_comp_opt .)
    RETURN          reduce using rule 75 (exp_comp -> exp_add exp_comp_opt .)


state 189

    (117) comp_operators -> > .

    (               reduce using rule 117 (comp_operators -> > .)
    ID              reduce using rule 117 (comp_operators -> > .)
    +               reduce using rule 117 (comp_operators -> > .)
    -               reduce using rule 117 (comp_operators -> > .)
    CONST_I         reduce using rule 117 (comp_operators -> > .)
    CONST_F         reduce using rule 117 (comp_operators -> > .)
    CONST_S         reduce using rule 117 (comp_operators -> > .)
    TRUE            reduce using rule 117 (comp_operators -> > .)
    FALSE           reduce using rule 117 (comp_operators -> > .)
    RANDOM          reduce using rule 117 (comp_operators -> > .)
    READ            reduce using rule 117 (comp_operators -> > .)
    PRINT           reduce using rule 117 (comp_operators -> > .)
    PUSH            reduce using rule 117 (comp_operators -> > .)
    POP             reduce using rule 117 (comp_operators -> > .)


state 190

    (118) comp_operators -> EQ .

    (               reduce using rule 118 (comp_operators -> EQ .)
    ID              reduce using rule 118 (comp_operators -> EQ .)
    +               reduce using rule 118 (comp_operators -> EQ .)
    -               reduce using rule 118 (comp_operators -> EQ .)
    CONST_I         reduce using rule 118 (comp_operators -> EQ .)
    CONST_F         reduce using rule 118 (comp_operators -> EQ .)
    CONST_S         reduce using rule 118 (comp_operators -> EQ .)
    TRUE            reduce using rule 118 (comp_operators -> EQ .)
    FALSE           reduce using rule 118 (comp_operators -> EQ .)
    RANDOM          reduce using rule 118 (comp_operators -> EQ .)
    READ            reduce using rule 118 (comp_operators -> EQ .)
    PRINT           reduce using rule 118 (comp_operators -> EQ .)
    PUSH            reduce using rule 118 (comp_operators -> EQ .)
    POP             reduce using rule 118 (comp_operators -> EQ .)


state 191

    (116) comp_operators -> < .

    (               reduce using rule 116 (comp_operators -> < .)
    ID              reduce using rule 116 (comp_operators -> < .)
    +               reduce using rule 116 (comp_operators -> < .)
    -               reduce using rule 116 (comp_operators -> < .)
    CONST_I         reduce using rule 116 (comp_operators -> < .)
    CONST_F         reduce using rule 116 (comp_operators -> < .)
    CONST_S         reduce using rule 116 (comp_operators -> < .)
    TRUE            reduce using rule 116 (comp_operators -> < .)
    FALSE           reduce using rule 116 (comp_operators -> < .)
    RANDOM          reduce using rule 116 (comp_operators -> < .)
    READ            reduce using rule 116 (comp_operators -> < .)
    PRINT           reduce using rule 116 (comp_operators -> < .)
    PUSH            reduce using rule 116 (comp_operators -> < .)
    POP             reduce using rule 116 (comp_operators -> < .)


state 192

    (76) exp_comp_opt -> empty .

    AND             reduce using rule 76 (exp_comp_opt -> empty .)
    OR              reduce using rule 76 (exp_comp_opt -> empty .)
    ,               reduce using rule 76 (exp_comp_opt -> empty .)
    )               reduce using rule 76 (exp_comp_opt -> empty .)
    ID              reduce using rule 76 (exp_comp_opt -> empty .)
    IF              reduce using rule 76 (exp_comp_opt -> empty .)
    WHILE           reduce using rule 76 (exp_comp_opt -> empty .)
    FOR             reduce using rule 76 (exp_comp_opt -> empty .)
    READ            reduce using rule 76 (exp_comp_opt -> empty .)
    PRINT           reduce using rule 76 (exp_comp_opt -> empty .)
    PUSH            reduce using rule 76 (exp_comp_opt -> empty .)
    POP             reduce using rule 76 (exp_comp_opt -> empty .)
    }               reduce using rule 76 (exp_comp_opt -> empty .)
    RETURN          reduce using rule 76 (exp_comp_opt -> empty .)


state 193

    (77) exp_comp_opt -> comp_operators . exp_comp
    (75) exp_comp -> . exp_add exp_comp_opt
    (78) exp_add -> . exp_multiply exp_add_opt
    (81) exp_multiply -> . term exp_multiply_opt
    (84) term -> . term_nested
    (85) term -> . term_body
    (86) term_nested -> . ( expression )
    (87) term_body -> . term_body_opt
    (88) term_body -> . term_body_types
    (89) term_body_opt -> . term_body_opt_signs term_body_types
    (92) term_body_types -> . ID
    (93) term_body_types -> . term_body_types_rest
    (90) term_body_opt_signs -> . +
    (91) term_body_opt_signs -> . -
    (94) term_body_types_rest -> . CONST_I term_int_add_stk
    (95) term_body_types_rest -> . CONST_F term_float_add_stk
    (96) term_body_types_rest -> . CONST_S term_string_add_stk
    (97) term_body_types_rest -> . TRUE term_bool_add_stk
    (98) term_body_types_rest -> . FALSE term_bool_add_stk
    (99) term_body_types_rest -> . random
    (100) term_body_types_rest -> . list_access
    (101) term_body_types_rest -> . function_call
    (71) random -> . RANDOM ( FROM CONST_I , TO CONST_I )
    (70) list_access -> . ID [ id_or_number ]
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    (               shift and go to state 121
    ID              shift and go to state 131
    +               shift and go to state 122
    -               shift and go to state 123
    CONST_I         shift and go to state 119
    CONST_F         shift and go to state 118
    CONST_S         shift and go to state 113
    TRUE            shift and go to state 132
    FALSE           shift and go to state 135
    RANDOM          shift and go to state 128
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    exp_comp                       shift and go to state 214
    random                         shift and go to state 115
    function_call                  shift and go to state 116
    list_pop                       shift and go to state 43
    exp_multiply                   shift and go to state 120
    term_body_types_rest           shift and go to state 129
    term_body_opt                  shift and go to state 124
    local_function                 shift and go to state 46
    term_body_types                shift and go to state 125
    list_push                      shift and go to state 51
    term_nested                    shift and go to state 126
    print                          shift and go to state 48
    read                           shift and go to state 53
    term_body                      shift and go to state 130
    term_body_opt_signs            shift and go to state 133
    term                           shift and go to state 134
    list_access                    shift and go to state 136
    exp_add                        shift and go to state 137

state 194

    (61) expr_params_rec -> empty .

    )               reduce using rule 61 (expr_params_rec -> empty .)


state 195

    (60) expr_params -> expression expr_params_rec .

    )               reduce using rule 60 (expr_params -> expression expr_params_rec .)


state 196

    (62) expr_params_rec -> , . expr_params
    (59) expr_params -> . empty
    (60) expr_params -> . expression expr_params_rec
    (126) empty -> .
    (72) expression -> . exp_comp expression_opt
    (75) exp_comp -> . exp_add exp_comp_opt
    (78) exp_add -> . exp_multiply exp_add_opt
    (81) exp_multiply -> . term exp_multiply_opt
    (84) term -> . term_nested
    (85) term -> . term_body
    (86) term_nested -> . ( expression )
    (87) term_body -> . term_body_opt
    (88) term_body -> . term_body_types
    (89) term_body_opt -> . term_body_opt_signs term_body_types
    (92) term_body_types -> . ID
    (93) term_body_types -> . term_body_types_rest
    (90) term_body_opt_signs -> . +
    (91) term_body_opt_signs -> . -
    (94) term_body_types_rest -> . CONST_I term_int_add_stk
    (95) term_body_types_rest -> . CONST_F term_float_add_stk
    (96) term_body_types_rest -> . CONST_S term_string_add_stk
    (97) term_body_types_rest -> . TRUE term_bool_add_stk
    (98) term_body_types_rest -> . FALSE term_bool_add_stk
    (99) term_body_types_rest -> . random
    (100) term_body_types_rest -> . list_access
    (101) term_body_types_rest -> . function_call
    (71) random -> . RANDOM ( FROM CONST_I , TO CONST_I )
    (70) list_access -> . ID [ id_or_number ]
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    )               reduce using rule 126 (empty -> .)
    (               shift and go to state 121
    ID              shift and go to state 131
    +               shift and go to state 122
    -               shift and go to state 123
    CONST_I         shift and go to state 119
    CONST_F         shift and go to state 118
    CONST_S         shift and go to state 113
    TRUE            shift and go to state 132
    FALSE           shift and go to state 135
    RANDOM          shift and go to state 128
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    exp_comp                       shift and go to state 114
    random                         shift and go to state 115
    function_call                  shift and go to state 116
    expr_params                    shift and go to state 215
    list_pop                       shift and go to state 43
    exp_multiply                   shift and go to state 120
    term_body_types_rest           shift and go to state 129
    term_body_opt                  shift and go to state 124
    local_function                 shift and go to state 46
    term_body_types                shift and go to state 125
    list_push                      shift and go to state 51
    term_nested                    shift and go to state 126
    print                          shift and go to state 48
    empty                          shift and go to state 127
    read                           shift and go to state 53
    term_body                      shift and go to state 130
    term_body_opt_signs            shift and go to state 133
    term                           shift and go to state 134
    list_access                    shift and go to state 136
    exp_add                        shift and go to state 137
    expression                     shift and go to state 138

state 197

    (26) cond_if -> IF HAPPENS ( expression . ) DO block

    )               shift and go to state 216


state 198

    (46) function_stm -> statement . function_stm
    (45) function_stm -> . empty
    (46) function_stm -> . statement function_stm
    (126) empty -> .
    (9) statement -> . assignation
    (10) statement -> . condition
    (11) statement -> . iteration
    (12) statement -> . function_call
    (22) assignation -> . add_assignation_var = add_assignation_sign expression
    (25) condition -> . cond_if cond_else_if_opt cond_else_opt
    (32) iteration -> . iteration_opts ) DO block
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (23) add_assignation_var -> . ID
    (26) cond_if -> . IF HAPPENS ( expression ) DO block
    (33) iteration_opts -> . WHILE HAPPENS ( expression
    (34) iteration_opts -> . FOR ( id_or_number
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    RETURN          reduce using rule 126 (empty -> .)
    }               reduce using rule 126 (empty -> .)
    ID              shift and go to state 56
    IF              shift and go to state 58
    WHILE           shift and go to state 42
    FOR             shift and go to state 52
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    function_call                  shift and go to state 40
    list_pop                       shift and go to state 43
    add_assignation_var            shift and go to state 44
    local_function                 shift and go to state 46
    condition                      shift and go to state 57
    list_push                      shift and go to state 51
    print                          shift and go to state 48
    empty                          shift and go to state 199
    iteration_opts                 shift and go to state 50
    statement                      shift and go to state 198
    read                           shift and go to state 53
    cond_if                        shift and go to state 54
    assignation                    shift and go to state 59
    iteration                      shift and go to state 60
    function_stm                   shift and go to state 217

state 199

    (45) function_stm -> empty .

    RETURN          reduce using rule 45 (function_stm -> empty .)
    }               reduce using rule 45 (function_stm -> empty .)


state 200

    (35) function -> function_declaration ( function_params ) { function_variables_opt function_stm . function_return }
    (47) function_return -> . empty
    (48) function_return -> . RETURN expression
    (126) empty -> .

    RETURN          shift and go to state 218
    }               reduce using rule 126 (empty -> .)

    function_return                shift and go to state 220
    empty                          shift and go to state 219

state 201

    (54) read -> READ add_read_op ( add_read_var ) .

    *               reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    /               reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    +               reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    -               reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    <               reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    >               reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    EQ              reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    NEQ             reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    GTE             reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    LTE             reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    AND             reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    OR              reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    )               reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    ,               reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    ID              reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    IF              reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    WHILE           reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    FOR             reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    READ            reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    PRINT           reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    PUSH            reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    POP             reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    }               reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)
    RETURN          reduce using rule 54 (read -> READ add_read_op ( add_read_var ) .)


state 202

    (57) print -> PRINT add_print_op ( expr_params ) .

    *               reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    /               reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    +               reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    -               reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    <               reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    >               reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    EQ              reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    NEQ             reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    GTE             reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    LTE             reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    AND             reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    OR              reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    )               reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    ID              reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    IF              reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    WHILE           reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    FOR             reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    READ            reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    PRINT           reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    PUSH            reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    POP             reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    }               reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    RETURN          reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)
    ,               reduce using rule 57 (print -> PRINT add_print_op ( expr_params ) .)


state 203

    (67) list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var . ( )

    (               shift and go to state 221


state 204

    (68) add_list_pop_var -> ID .

    (               reduce using rule 68 (add_list_pop_var -> ID .)


state 205

    (31) cond_else_opt -> ELSE HAPPENS block .

    ID              reduce using rule 31 (cond_else_opt -> ELSE HAPPENS block .)
    IF              reduce using rule 31 (cond_else_opt -> ELSE HAPPENS block .)
    WHILE           reduce using rule 31 (cond_else_opt -> ELSE HAPPENS block .)
    FOR             reduce using rule 31 (cond_else_opt -> ELSE HAPPENS block .)
    READ            reduce using rule 31 (cond_else_opt -> ELSE HAPPENS block .)
    PRINT           reduce using rule 31 (cond_else_opt -> ELSE HAPPENS block .)
    PUSH            reduce using rule 31 (cond_else_opt -> ELSE HAPPENS block .)
    POP             reduce using rule 31 (cond_else_opt -> ELSE HAPPENS block .)
    }               reduce using rule 31 (cond_else_opt -> ELSE HAPPENS block .)
    RETURN          reduce using rule 31 (cond_else_opt -> ELSE HAPPENS block .)


state 206

    (29) cond_else_if -> OR IF HAPPENS ( . expression ) DO block
    (72) expression -> . exp_comp expression_opt
    (75) exp_comp -> . exp_add exp_comp_opt
    (78) exp_add -> . exp_multiply exp_add_opt
    (81) exp_multiply -> . term exp_multiply_opt
    (84) term -> . term_nested
    (85) term -> . term_body
    (86) term_nested -> . ( expression )
    (87) term_body -> . term_body_opt
    (88) term_body -> . term_body_types
    (89) term_body_opt -> . term_body_opt_signs term_body_types
    (92) term_body_types -> . ID
    (93) term_body_types -> . term_body_types_rest
    (90) term_body_opt_signs -> . +
    (91) term_body_opt_signs -> . -
    (94) term_body_types_rest -> . CONST_I term_int_add_stk
    (95) term_body_types_rest -> . CONST_F term_float_add_stk
    (96) term_body_types_rest -> . CONST_S term_string_add_stk
    (97) term_body_types_rest -> . TRUE term_bool_add_stk
    (98) term_body_types_rest -> . FALSE term_bool_add_stk
    (99) term_body_types_rest -> . random
    (100) term_body_types_rest -> . list_access
    (101) term_body_types_rest -> . function_call
    (71) random -> . RANDOM ( FROM CONST_I , TO CONST_I )
    (70) list_access -> . ID [ id_or_number ]
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    (               shift and go to state 121
    ID              shift and go to state 131
    +               shift and go to state 122
    -               shift and go to state 123
    CONST_I         shift and go to state 119
    CONST_F         shift and go to state 118
    CONST_S         shift and go to state 113
    TRUE            shift and go to state 132
    FALSE           shift and go to state 135
    RANDOM          shift and go to state 128
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    exp_comp                       shift and go to state 114
    random                         shift and go to state 115
    function_call                  shift and go to state 116
    list_pop                       shift and go to state 43
    exp_multiply                   shift and go to state 120
    term_body_types_rest           shift and go to state 129
    term_body_opt                  shift and go to state 124
    local_function                 shift and go to state 46
    term_body_types                shift and go to state 125
    list_push                      shift and go to state 51
    term_nested                    shift and go to state 126
    print                          shift and go to state 48
    read                           shift and go to state 53
    term_body                      shift and go to state 130
    term_body_opt_signs            shift and go to state 133
    term                           shift and go to state 134
    list_access                    shift and go to state 136
    exp_add                        shift and go to state 137
    expression                     shift and go to state 222

state 207

    (64) list_push -> PUSH TO add_list_push_sign add_list_push_var ( . expression )
    (72) expression -> . exp_comp expression_opt
    (75) exp_comp -> . exp_add exp_comp_opt
    (78) exp_add -> . exp_multiply exp_add_opt
    (81) exp_multiply -> . term exp_multiply_opt
    (84) term -> . term_nested
    (85) term -> . term_body
    (86) term_nested -> . ( expression )
    (87) term_body -> . term_body_opt
    (88) term_body -> . term_body_types
    (89) term_body_opt -> . term_body_opt_signs term_body_types
    (92) term_body_types -> . ID
    (93) term_body_types -> . term_body_types_rest
    (90) term_body_opt_signs -> . +
    (91) term_body_opt_signs -> . -
    (94) term_body_types_rest -> . CONST_I term_int_add_stk
    (95) term_body_types_rest -> . CONST_F term_float_add_stk
    (96) term_body_types_rest -> . CONST_S term_string_add_stk
    (97) term_body_types_rest -> . TRUE term_bool_add_stk
    (98) term_body_types_rest -> . FALSE term_bool_add_stk
    (99) term_body_types_rest -> . random
    (100) term_body_types_rest -> . list_access
    (101) term_body_types_rest -> . function_call
    (71) random -> . RANDOM ( FROM CONST_I , TO CONST_I )
    (70) list_access -> . ID [ id_or_number ]
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    (               shift and go to state 121
    ID              shift and go to state 131
    +               shift and go to state 122
    -               shift and go to state 123
    CONST_I         shift and go to state 119
    CONST_F         shift and go to state 118
    CONST_S         shift and go to state 113
    TRUE            shift and go to state 132
    FALSE           shift and go to state 135
    RANDOM          shift and go to state 128
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    exp_comp                       shift and go to state 114
    random                         shift and go to state 115
    function_call                  shift and go to state 116
    list_pop                       shift and go to state 43
    exp_multiply                   shift and go to state 120
    term_body_types_rest           shift and go to state 129
    term_body_opt                  shift and go to state 124
    local_function                 shift and go to state 46
    term_body_types                shift and go to state 125
    list_push                      shift and go to state 51
    term_nested                    shift and go to state 126
    print                          shift and go to state 48
    read                           shift and go to state 53
    term_body                      shift and go to state 130
    term_body_opt_signs            shift and go to state 133
    term                           shift and go to state 134
    list_access                    shift and go to state 136
    exp_add                        shift and go to state 137
    expression                     shift and go to state 223

state 208

    (74) expression_opt -> logic_operators expression .

    ,               reduce using rule 74 (expression_opt -> logic_operators expression .)
    )               reduce using rule 74 (expression_opt -> logic_operators expression .)
    ID              reduce using rule 74 (expression_opt -> logic_operators expression .)
    IF              reduce using rule 74 (expression_opt -> logic_operators expression .)
    WHILE           reduce using rule 74 (expression_opt -> logic_operators expression .)
    FOR             reduce using rule 74 (expression_opt -> logic_operators expression .)
    READ            reduce using rule 74 (expression_opt -> logic_operators expression .)
    PRINT           reduce using rule 74 (expression_opt -> logic_operators expression .)
    PUSH            reduce using rule 74 (expression_opt -> logic_operators expression .)
    POP             reduce using rule 74 (expression_opt -> logic_operators expression .)
    }               reduce using rule 74 (expression_opt -> logic_operators expression .)
    RETURN          reduce using rule 74 (expression_opt -> logic_operators expression .)


state 209

    (80) exp_add_opt -> add_operators exp_add .

    <               reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    >               reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    EQ              reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    NEQ             reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    GTE             reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    LTE             reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    AND             reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    OR              reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    ,               reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    )               reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    ID              reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    IF              reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    WHILE           reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    FOR             reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    READ            reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    PRINT           reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    PUSH            reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    POP             reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    }               reduce using rule 80 (exp_add_opt -> add_operators exp_add .)
    RETURN          reduce using rule 80 (exp_add_opt -> add_operators exp_add .)


state 210

    (86) term_nested -> ( expression ) .

    *               reduce using rule 86 (term_nested -> ( expression ) .)
    /               reduce using rule 86 (term_nested -> ( expression ) .)
    +               reduce using rule 86 (term_nested -> ( expression ) .)
    -               reduce using rule 86 (term_nested -> ( expression ) .)
    <               reduce using rule 86 (term_nested -> ( expression ) .)
    >               reduce using rule 86 (term_nested -> ( expression ) .)
    EQ              reduce using rule 86 (term_nested -> ( expression ) .)
    NEQ             reduce using rule 86 (term_nested -> ( expression ) .)
    GTE             reduce using rule 86 (term_nested -> ( expression ) .)
    LTE             reduce using rule 86 (term_nested -> ( expression ) .)
    AND             reduce using rule 86 (term_nested -> ( expression ) .)
    OR              reduce using rule 86 (term_nested -> ( expression ) .)
    )               reduce using rule 86 (term_nested -> ( expression ) .)
    ,               reduce using rule 86 (term_nested -> ( expression ) .)
    ID              reduce using rule 86 (term_nested -> ( expression ) .)
    IF              reduce using rule 86 (term_nested -> ( expression ) .)
    WHILE           reduce using rule 86 (term_nested -> ( expression ) .)
    FOR             reduce using rule 86 (term_nested -> ( expression ) .)
    READ            reduce using rule 86 (term_nested -> ( expression ) .)
    PRINT           reduce using rule 86 (term_nested -> ( expression ) .)
    PUSH            reduce using rule 86 (term_nested -> ( expression ) .)
    POP             reduce using rule 86 (term_nested -> ( expression ) .)
    }               reduce using rule 86 (term_nested -> ( expression ) .)
    RETURN          reduce using rule 86 (term_nested -> ( expression ) .)


state 211

    (71) random -> RANDOM ( FROM . CONST_I , TO CONST_I )

    CONST_I         shift and go to state 224


state 212

    (70) list_access -> ID [ id_or_number . ]

    ]               shift and go to state 225


state 213

    (83) exp_multiply_opt -> multiply_operators exp_multiply .

    +               reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    -               reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    <               reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    >               reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    EQ              reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    NEQ             reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    GTE             reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    LTE             reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    AND             reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    OR              reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    ,               reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    )               reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    ID              reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    IF              reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    WHILE           reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    FOR             reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    READ            reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    PRINT           reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    PUSH            reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    POP             reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    }               reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)
    RETURN          reduce using rule 83 (exp_multiply_opt -> multiply_operators exp_multiply .)


state 214

    (77) exp_comp_opt -> comp_operators exp_comp .

    AND             reduce using rule 77 (exp_comp_opt -> comp_operators exp_comp .)
    OR              reduce using rule 77 (exp_comp_opt -> comp_operators exp_comp .)
    ,               reduce using rule 77 (exp_comp_opt -> comp_operators exp_comp .)
    )               reduce using rule 77 (exp_comp_opt -> comp_operators exp_comp .)
    ID              reduce using rule 77 (exp_comp_opt -> comp_operators exp_comp .)
    IF              reduce using rule 77 (exp_comp_opt -> comp_operators exp_comp .)
    WHILE           reduce using rule 77 (exp_comp_opt -> comp_operators exp_comp .)
    FOR             reduce using rule 77 (exp_comp_opt -> comp_operators exp_comp .)
    READ            reduce using rule 77 (exp_comp_opt -> comp_operators exp_comp .)
    PRINT           reduce using rule 77 (exp_comp_opt -> comp_operators exp_comp .)
    PUSH            reduce using rule 77 (exp_comp_opt -> comp_operators exp_comp .)
    POP             reduce using rule 77 (exp_comp_opt -> comp_operators exp_comp .)
    }               reduce using rule 77 (exp_comp_opt -> comp_operators exp_comp .)
    RETURN          reduce using rule 77 (exp_comp_opt -> comp_operators exp_comp .)


state 215

    (62) expr_params_rec -> , expr_params .

    )               reduce using rule 62 (expr_params_rec -> , expr_params .)


state 216

    (26) cond_if -> IF HAPPENS ( expression ) . DO block

    DO              shift and go to state 226


state 217

    (46) function_stm -> statement function_stm .

    RETURN          reduce using rule 46 (function_stm -> statement function_stm .)
    }               reduce using rule 46 (function_stm -> statement function_stm .)


state 218

    (48) function_return -> RETURN . expression
    (72) expression -> . exp_comp expression_opt
    (75) exp_comp -> . exp_add exp_comp_opt
    (78) exp_add -> . exp_multiply exp_add_opt
    (81) exp_multiply -> . term exp_multiply_opt
    (84) term -> . term_nested
    (85) term -> . term_body
    (86) term_nested -> . ( expression )
    (87) term_body -> . term_body_opt
    (88) term_body -> . term_body_types
    (89) term_body_opt -> . term_body_opt_signs term_body_types
    (92) term_body_types -> . ID
    (93) term_body_types -> . term_body_types_rest
    (90) term_body_opt_signs -> . +
    (91) term_body_opt_signs -> . -
    (94) term_body_types_rest -> . CONST_I term_int_add_stk
    (95) term_body_types_rest -> . CONST_F term_float_add_stk
    (96) term_body_types_rest -> . CONST_S term_string_add_stk
    (97) term_body_types_rest -> . TRUE term_bool_add_stk
    (98) term_body_types_rest -> . FALSE term_bool_add_stk
    (99) term_body_types_rest -> . random
    (100) term_body_types_rest -> . list_access
    (101) term_body_types_rest -> . function_call
    (71) random -> . RANDOM ( FROM CONST_I , TO CONST_I )
    (70) list_access -> . ID [ id_or_number ]
    (49) function_call -> . read
    (50) function_call -> . print
    (51) function_call -> . local_function
    (52) function_call -> . list_push
    (53) function_call -> . list_pop
    (54) read -> . READ add_read_op ( add_read_var )
    (57) print -> . PRINT add_print_op ( expr_params )
    (63) local_function -> . ID ( expr_params )
    (64) list_push -> . PUSH TO add_list_push_sign add_list_push_var ( expression )
    (67) list_pop -> . POP LAST add_list_pop_sign FROM add_list_pop_var ( )

    (               shift and go to state 121
    ID              shift and go to state 131
    +               shift and go to state 122
    -               shift and go to state 123
    CONST_I         shift and go to state 119
    CONST_F         shift and go to state 118
    CONST_S         shift and go to state 113
    TRUE            shift and go to state 132
    FALSE           shift and go to state 135
    RANDOM          shift and go to state 128
    READ            shift and go to state 39
    PRINT           shift and go to state 41
    PUSH            shift and go to state 55
    POP             shift and go to state 45

    exp_comp                       shift and go to state 114
    random                         shift and go to state 115
    function_call                  shift and go to state 116
    list_pop                       shift and go to state 43
    exp_multiply                   shift and go to state 120
    term_body_types_rest           shift and go to state 129
    term_body_opt                  shift and go to state 124
    local_function                 shift and go to state 46
    term_body_types                shift and go to state 125
    list_push                      shift and go to state 51
    term_nested                    shift and go to state 126
    print                          shift and go to state 48
    read                           shift and go to state 53
    term_body                      shift and go to state 130
    term_body_opt_signs            shift and go to state 133
    term                           shift and go to state 134
    list_access                    shift and go to state 136
    exp_add                        shift and go to state 137
    expression                     shift and go to state 227

state 219

    (47) function_return -> empty .

    }               reduce using rule 47 (function_return -> empty .)


state 220

    (35) function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return . }

    }               shift and go to state 228


state 221

    (67) list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( . )

    )               shift and go to state 229


state 222

    (29) cond_else_if -> OR IF HAPPENS ( expression . ) DO block

    )               shift and go to state 230


state 223

    (64) list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression . )

    )               shift and go to state 231


state 224

    (71) random -> RANDOM ( FROM CONST_I . , TO CONST_I )

    ,               shift and go to state 232


state 225

    (70) list_access -> ID [ id_or_number ] .

    *               reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    /               reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    +               reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    -               reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    <               reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    >               reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    EQ              reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    NEQ             reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    GTE             reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    LTE             reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    AND             reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    OR              reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    ,               reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    )               reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    ID              reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    IF              reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    WHILE           reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    FOR             reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    READ            reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    PRINT           reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    PUSH            reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    POP             reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    }               reduce using rule 70 (list_access -> ID [ id_or_number ] .)
    RETURN          reduce using rule 70 (list_access -> ID [ id_or_number ] .)


state 226

    (26) cond_if -> IF HAPPENS ( expression ) DO . block
    (6) block -> . { block_stm_opt }

    {               shift and go to state 28

    block                          shift and go to state 233

state 227

    (48) function_return -> RETURN expression .

    }               reduce using rule 48 (function_return -> RETURN expression .)


state 228

    (35) function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return } .

    ARRAY           reduce using rule 35 (function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return } .)
    INT             reduce using rule 35 (function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return } .)
    FLOAT           reduce using rule 35 (function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return } .)
    STRING          reduce using rule 35 (function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return } .)
    BOOLEAN         reduce using rule 35 (function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return } .)
    FUNCTION        reduce using rule 35 (function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return } .)
    {               reduce using rule 35 (function -> function_declaration ( function_params ) { function_variables_opt function_stm function_return } .)


state 229

    (67) list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .

    *               reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    /               reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    +               reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    -               reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    <               reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    >               reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    EQ              reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    NEQ             reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    GTE             reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    LTE             reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    AND             reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    OR              reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    ,               reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    )               reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    ID              reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    IF              reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    WHILE           reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    FOR             reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    READ            reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    PRINT           reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    PUSH            reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    POP             reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    }               reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)
    RETURN          reduce using rule 67 (list_pop -> POP LAST add_list_pop_sign FROM add_list_pop_var ( ) .)


state 230

    (29) cond_else_if -> OR IF HAPPENS ( expression ) . DO block

    DO              shift and go to state 234


state 231

    (64) list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .

    *               reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    /               reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    +               reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    -               reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    <               reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    >               reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    EQ              reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    NEQ             reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    GTE             reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    LTE             reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    AND             reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    OR              reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    ,               reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    )               reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    ID              reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    IF              reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    WHILE           reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    FOR             reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    READ            reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    PRINT           reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    PUSH            reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    POP             reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    }               reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)
    RETURN          reduce using rule 64 (list_push -> PUSH TO add_list_push_sign add_list_push_var ( expression ) .)


state 232

    (71) random -> RANDOM ( FROM CONST_I , . TO CONST_I )

    TO              shift and go to state 235


state 233

    (26) cond_if -> IF HAPPENS ( expression ) DO block .

    OR              reduce using rule 26 (cond_if -> IF HAPPENS ( expression ) DO block .)
    ELSE            reduce using rule 26 (cond_if -> IF HAPPENS ( expression ) DO block .)
    ID              reduce using rule 26 (cond_if -> IF HAPPENS ( expression ) DO block .)
    IF              reduce using rule 26 (cond_if -> IF HAPPENS ( expression ) DO block .)
    WHILE           reduce using rule 26 (cond_if -> IF HAPPENS ( expression ) DO block .)
    FOR             reduce using rule 26 (cond_if -> IF HAPPENS ( expression ) DO block .)
    READ            reduce using rule 26 (cond_if -> IF HAPPENS ( expression ) DO block .)
    PRINT           reduce using rule 26 (cond_if -> IF HAPPENS ( expression ) DO block .)
    PUSH            reduce using rule 26 (cond_if -> IF HAPPENS ( expression ) DO block .)
    POP             reduce using rule 26 (cond_if -> IF HAPPENS ( expression ) DO block .)
    }               reduce using rule 26 (cond_if -> IF HAPPENS ( expression ) DO block .)
    RETURN          reduce using rule 26 (cond_if -> IF HAPPENS ( expression ) DO block .)


state 234

    (29) cond_else_if -> OR IF HAPPENS ( expression ) DO . block
    (6) block -> . { block_stm_opt }

    {               shift and go to state 28

    block                          shift and go to state 236

state 235

    (71) random -> RANDOM ( FROM CONST_I , TO . CONST_I )

    CONST_I         shift and go to state 237


state 236

    (29) cond_else_if -> OR IF HAPPENS ( expression ) DO block .

    OR              reduce using rule 29 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    ELSE            reduce using rule 29 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    ID              reduce using rule 29 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    IF              reduce using rule 29 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    WHILE           reduce using rule 29 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    FOR             reduce using rule 29 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    READ            reduce using rule 29 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    PRINT           reduce using rule 29 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    PUSH            reduce using rule 29 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    POP             reduce using rule 29 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    }               reduce using rule 29 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)
    RETURN          reduce using rule 29 (cond_else_if -> OR IF HAPPENS ( expression ) DO block .)


state 237

    (71) random -> RANDOM ( FROM CONST_I , TO CONST_I . )

    )               shift and go to state 238


state 238

    (71) random -> RANDOM ( FROM CONST_I , TO CONST_I ) .

    *               reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    /               reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    +               reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    -               reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    <               reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    >               reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    EQ              reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    NEQ             reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    GTE             reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    LTE             reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    AND             reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    OR              reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    )               reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    ,               reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    ID              reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    IF              reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    WHILE           reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    FOR             reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    READ            reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    PRINT           reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    PUSH            reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    POP             reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    }               reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)
    RETURN          reduce using rule 71 (random -> RANDOM ( FROM CONST_I , TO CONST_I ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ARRAY in state 61 resolved as shift
WARNING: shift/reduce conflict for INT in state 61 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 61 resolved as shift
WARNING: shift/reduce conflict for STRING in state 61 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 61 resolved as shift
